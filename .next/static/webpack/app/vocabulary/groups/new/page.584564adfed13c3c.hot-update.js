"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/vocabulary/groups/new/page",{

/***/ "(app-pages-browser)/./src/lib/supabase/vocabulary.ts":
/*!****************************************!*\
  !*** ./src/lib/supabase/vocabulary.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   vocabularyService: function() { return /* binding */ vocabularyService; }\n/* harmony export */ });\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/auth-helpers-nextjs */ \"(app-pages-browser)/./node_modules/@supabase/auth-helpers-nextjs/dist/index.js\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_0__);\n\nconst supabase = (0,_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_0__.createClientComponentClient)();\nconst vocabularyService = {\n    // ==================== VOCABULARY ITEMS ====================\n    // Get all vocabulary items with optional filters\n    async getVocabulary () {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        let query = supabase.from(\"vocabulary\").select(\"*\").order(\"word\", {\n            ascending: true\n        });\n        // Apply filters\n        if (filters.search) {\n            query = query.or(\"word.ilike.%\".concat(filters.search, \"%,translation.ilike.%\").concat(filters.search, \"%,definition.ilike.%\").concat(filters.search, \"%\"));\n        }\n        if (filters.difficulty) {\n            query = query.eq(\"difficulty\", filters.difficulty);\n        }\n        if (filters.partOfSpeech) {\n            query = query.eq(\"part_of_speech\", filters.partOfSpeech);\n        }\n        if (filters.tags && filters.tags.length > 0) {\n            query = query.contains(\"tags\", filters.tags);\n        }\n        const { data, error } = await query;\n        if (error) throw error;\n        return data;\n    },\n    // Get vocabulary items in a specific group\n    async getVocabularyInGroup (groupId) {\n        const { data, error } = await supabase.from(\"vocabulary_group_items\").select(\"\\n        *,\\n        vocabulary(*)\\n      \").eq(\"vocabulary_group_id\", groupId).order(\"position\", {\n            ascending: true\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Get single vocabulary item by ID\n    async getVocabularyItem (id) {\n        const { data, error } = await supabase.from(\"vocabulary\").select(\"*\").eq(\"id\", id).single();\n        if (error) throw error;\n        return data;\n    },\n    // Create new vocabulary item\n    async createVocabulary (vocabularyData) {\n        const { data: user } = await supabase.auth.getUser();\n        if (!user.user) throw new Error(\"User not authenticated\");\n        const dataWithDefaults = {\n            ...vocabularyData,\n            difficulty: vocabularyData.difficulty || \"beginner\",\n            user_id: user.user.id\n        };\n        const { data, error } = await supabase.from(\"vocabulary\").insert(dataWithDefaults).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Update vocabulary item\n    async updateVocabulary (param) {\n        let { id, ...vocabularyData } = param;\n        const { data, error } = await supabase.from(\"vocabulary\").update({\n            ...vocabularyData,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Delete vocabulary item\n    async deleteVocabulary (id) {\n        const { error } = await supabase.from(\"vocabulary\").delete().eq(\"id\", id);\n        if (error) throw error;\n    },\n    // ==================== VOCABULARY GROUPS ====================\n    // Get all vocabulary groups with optional filters\n    async getVocabularyGroups () {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        let query = supabase.from(\"vocabulary_groups\").select(\"\\n        *,\\n        category:categories(id, name, color, icon),\\n        vocabulary_group_items(count),\\n        vocabulary_group_books(\\n          book:books(\\n            id,\\n            title,\\n            author,\\n            cover_image_url\\n          )\\n        )\\n      \").order(\"created_at\", {\n            ascending: false\n        });\n        // Apply filters\n        if (filters.search) {\n            query = query.or(\"name.ilike.%\".concat(filters.search, \"%,description.ilike.%\").concat(filters.search, \"%\"));\n        }\n        if (filters.difficulty) {\n            query = query.eq(\"difficulty\", filters.difficulty);\n        }\n        if (filters.language) {\n            query = query.eq(\"language\", filters.language);\n        }\n        if (filters.targetLanguage) {\n            query = query.eq(\"target_language\", filters.targetLanguage);\n        }\n        if (filters.categoryId) {\n            query = query.eq(\"category_id\", filters.categoryId);\n        }\n        if (filters.isPublic !== undefined) {\n            query = query.eq(\"is_public\", filters.isPublic);\n        }\n        if (filters.tags && filters.tags.length > 0) {\n            query = query.contains(\"tags\", filters.tags);\n        }\n        const { data, error } = await query;\n        if (error) throw error;\n        // Add vocabulary count to each group\n        const groupsWithCount = (data === null || data === void 0 ? void 0 : data.map((group)=>{\n            var _group_vocabulary_group_items_, _group_vocabulary_group_items;\n            return {\n                ...group,\n                vocabulary_count: ((_group_vocabulary_group_items = group.vocabulary_group_items) === null || _group_vocabulary_group_items === void 0 ? void 0 : (_group_vocabulary_group_items_ = _group_vocabulary_group_items[0]) === null || _group_vocabulary_group_items_ === void 0 ? void 0 : _group_vocabulary_group_items_.count) || 0\n            };\n        })) || [];\n        return groupsWithCount;\n    },\n    // Get single vocabulary group by ID\n    async getVocabularyGroup (id) {\n        const { data, error } = await supabase.from(\"vocabulary_groups\").select(\"\\n        *,\\n        category:categories(id, name, color, icon),\\n        vocabulary_group_items(\\n          *,\\n          vocabulary(*)\\n        )\\n      \").eq(\"id\", id).single();\n        if (error) throw error;\n        return data;\n    },\n    // Create new vocabulary group\n    async createVocabularyGroup (groupData) {\n        const { data: user } = await supabase.auth.getUser();\n        if (!user.user) throw new Error(\"User not authenticated\");\n        const dataWithDefaults = {\n            ...groupData,\n            language: groupData.language || \"en\",\n            difficulty: groupData.difficulty || \"beginner\",\n            is_public: groupData.is_public || false,\n            user_id: user.user.id\n        };\n        const { data, error } = await supabase.from(\"vocabulary_groups\").insert(dataWithDefaults).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Update vocabulary group\n    async updateVocabularyGroup (param) {\n        let { id, ...groupData } = param;\n        const { data, error } = await supabase.from(\"vocabulary_groups\").update({\n            ...groupData,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Delete vocabulary group\n    async deleteVocabularyGroup (id) {\n        const { error } = await supabase.from(\"vocabulary_groups\").delete().eq(\"id\", id);\n        if (error) throw error;\n    },\n    // ==================== GROUP MEMBERSHIP ====================\n    // Add vocabulary item to group\n    async addVocabularyToGroup (vocabularyId, groupId, position) {\n        // Get current max position if not provided\n        if (position === undefined) {\n            const { data: items } = await supabase.from(\"vocabulary_group_items\").select(\"position\").eq(\"vocabulary_group_id\", groupId).order(\"position\", {\n                ascending: false\n            }).limit(1);\n            position = items && items.length > 0 ? items[0].position + 1 : 0;\n        }\n        const { data, error } = await supabase.from(\"vocabulary_group_items\").insert({\n            vocabulary_group_id: groupId,\n            vocabulary_id: vocabularyId,\n            position: position\n        }).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // Remove vocabulary item from group\n    async removeVocabularyFromGroup (vocabularyId, groupId) {\n        const { error } = await supabase.from(\"vocabulary_group_items\").delete().eq(\"vocabulary_group_id\", groupId).eq(\"vocabulary_id\", vocabularyId);\n        if (error) throw error;\n    },\n    // Update vocabulary position in group\n    async updateVocabularyPosition (vocabularyId, groupId, newPosition) {\n        const { data, error } = await supabase.from(\"vocabulary_group_items\").update({\n            position: newPosition\n        }).eq(\"vocabulary_group_id\", groupId).eq(\"vocabulary_id\", vocabularyId).select().single();\n        if (error) throw error;\n        return data;\n    },\n    // ==================== STATISTICS ====================\n    // Get vocabulary statistics\n    async getVocabularyStats () {\n        var _vocabularyData_data, _vocabularyData_data1, _vocabularyData_data2, _vocabularyData_data3, _vocabularyData_data4, _groupsData_data, _groupsData_data1, _groupsData_data2, _groupsData_data3, _groupsData_data4;\n        const { data: user } = await supabase.auth.getUser();\n        if (!user.user) throw new Error(\"User not authenticated\");\n        const [vocabularyData, groupsData] = await Promise.all([\n            supabase.from(\"vocabulary\").select(\"difficulty\", {\n                count: \"exact\"\n            }).eq(\"user_id\", user.user.id),\n            supabase.from(\"vocabulary_groups\").select(\"difficulty\", {\n                count: \"exact\"\n            }).eq(\"user_id\", user.user.id)\n        ]);\n        if (vocabularyData.error) throw vocabularyData.error;\n        if (groupsData.error) throw groupsData.error;\n        const vocabularyStats = {\n            total: ((_vocabularyData_data = vocabularyData.data) === null || _vocabularyData_data === void 0 ? void 0 : _vocabularyData_data.length) || 0,\n            beginner: ((_vocabularyData_data1 = vocabularyData.data) === null || _vocabularyData_data1 === void 0 ? void 0 : _vocabularyData_data1.filter((v)=>v.difficulty === \"beginner\").length) || 0,\n            intermediate: ((_vocabularyData_data2 = vocabularyData.data) === null || _vocabularyData_data2 === void 0 ? void 0 : _vocabularyData_data2.filter((v)=>v.difficulty === \"intermediate\").length) || 0,\n            advanced: ((_vocabularyData_data3 = vocabularyData.data) === null || _vocabularyData_data3 === void 0 ? void 0 : _vocabularyData_data3.filter((v)=>v.difficulty === \"advanced\").length) || 0,\n            expert: ((_vocabularyData_data4 = vocabularyData.data) === null || _vocabularyData_data4 === void 0 ? void 0 : _vocabularyData_data4.filter((v)=>v.difficulty === \"expert\").length) || 0\n        };\n        const groupStats = {\n            total: ((_groupsData_data = groupsData.data) === null || _groupsData_data === void 0 ? void 0 : _groupsData_data.length) || 0,\n            beginner: ((_groupsData_data1 = groupsData.data) === null || _groupsData_data1 === void 0 ? void 0 : _groupsData_data1.filter((g)=>g.difficulty === \"beginner\").length) || 0,\n            intermediate: ((_groupsData_data2 = groupsData.data) === null || _groupsData_data2 === void 0 ? void 0 : _groupsData_data2.filter((g)=>g.difficulty === \"intermediate\").length) || 0,\n            advanced: ((_groupsData_data3 = groupsData.data) === null || _groupsData_data3 === void 0 ? void 0 : _groupsData_data3.filter((g)=>g.difficulty === \"advanced\").length) || 0,\n            expert: ((_groupsData_data4 = groupsData.data) === null || _groupsData_data4 === void 0 ? void 0 : _groupsData_data4.filter((g)=>g.difficulty === \"expert\").length) || 0\n        };\n        return {\n            vocabulary: vocabularyStats,\n            groups: groupStats\n        };\n    },\n    // Get unique part of speech values\n    async getPartsOfSpeech () {\n        const { data: user } = await supabase.auth.getUser();\n        if (!user.user) throw new Error(\"User not authenticated\");\n        const { data, error } = await supabase.from(\"vocabulary\").select(\"part_of_speech\").eq(\"user_id\", user.user.id).not(\"part_of_speech\", \"is\", null);\n        if (error) throw error;\n        // Extract unique parts of speech\n        const partsOfSpeechSet = new Set(data === null || data === void 0 ? void 0 : data.map((vocab)=>vocab.part_of_speech).filter(Boolean));\n        const partsOfSpeech = Array.from(partsOfSpeechSet).sort();\n        return partsOfSpeech;\n    },\n    // Get unique languages used in vocabulary groups\n    async getLanguages () {\n        const { data: user } = await supabase.auth.getUser();\n        if (!user.user) throw new Error(\"User not authenticated\");\n        const { data, error } = await supabase.from(\"vocabulary_groups\").select(\"language, target_language\").eq(\"user_id\", user.user.id);\n        if (error) throw error;\n        // Extract unique languages\n        const languages = new Set();\n        data === null || data === void 0 ? void 0 : data.forEach((group)=>{\n            if (group.language) languages.add(group.language);\n            if (group.target_language) languages.add(group.target_language);\n        });\n        return Array.from(languages).sort();\n    },\n    // Get difficulty level options\n    getDifficultyLevels () {\n        return [\n            {\n                value: \"beginner\",\n                label: \"Beginner\",\n                color: \"green\"\n            },\n            {\n                value: \"intermediate\",\n                label: \"Intermediate\",\n                color: \"yellow\"\n            },\n            {\n                value: \"advanced\",\n                label: \"Advanced\",\n                color: \"orange\"\n            },\n            {\n                value: \"expert\",\n                label: \"Expert\",\n                color: \"red\"\n            }\n        ];\n    },\n    // Get common parts of speech options\n    getPartsOfSpeechOptions () {\n        return [\n            {\n                value: \"noun\",\n                label: \"Noun\"\n            },\n            {\n                value: \"verb\",\n                label: \"Verb\"\n            },\n            {\n                value: \"adjective\",\n                label: \"Adjective\"\n            },\n            {\n                value: \"adverb\",\n                label: \"Adverb\"\n            },\n            {\n                value: \"pronoun\",\n                label: \"Pronoun\"\n            },\n            {\n                value: \"preposition\",\n                label: \"Preposition\"\n            },\n            {\n                value: \"conjunction\",\n                label: \"Conjunction\"\n            },\n            {\n                value: \"interjection\",\n                label: \"Interjection\"\n            },\n            {\n                value: \"article\",\n                label: \"Article\"\n            }\n        ];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase/vocabulary.ts\n"));

/***/ })

});