This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-06-15T05:41:19.053Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.claude/settings.local.json
.cursor/mcp.json
.cursor/rules/cursor_rules.mdc
.cursor/rules/dev_workflow.mdc
.cursor/rules/self_improve.mdc
.cursor/rules/taskmaster.mdc
.env.example
.env.local
.eslintrc.json
.gitignore
.prettierrc
.roo/rules-architect/architect-rules
.roo/rules-ask/ask-rules
.roo/rules-boomerang/boomerang-rules
.roo/rules-code/code-rules
.roo/rules-debug/debug-rules
.roo/rules-test/test-rules
.roo/rules/dev_workflow.md
.roo/rules/roo_rules.md
.roo/rules/self_improve.md
.roo/rules/taskmaster.md
.roomodes
.taskmaster/config.json
.taskmaster/docs/prd.txt
.taskmaster/templates/example_prd.txt
.windsurfrules
DATABASE_MIGRATION_INSTRUCTIONS.md
database/functions_and_views.sql
database/migration_001_initial_schema.sql
database/migration_002_fix_lessons_schema.sql
database/migrations/004_add_course_relationships.sql
database/rls_policies.sql
database/schema_documentation.md
database/schema.sql
database/shared_access_policies.sql
migrations/create_course_objectives_table.sql
next-env.d.ts
next.config.js
package.json
postcss.config.js
README.md
src/app/auth/page.tsx
src/app/books/[id]/edit/page.tsx
src/app/books/[id]/page.tsx
src/app/books/layout.tsx
src/app/books/new/page.tsx
src/app/books/page.tsx
src/app/courses/[id]/edit/page.tsx
src/app/courses/[id]/page.tsx
src/app/courses/layout.tsx
src/app/courses/new/page.tsx
src/app/courses/page.tsx
src/app/dashboard/components/page.tsx
src/app/dashboard/page.tsx
src/app/decoders/[id]/edit/page.tsx
src/app/decoders/[id]/page.tsx
src/app/decoders/new/page.tsx
src/app/decoders/page.tsx
src/app/globals.css
src/app/layout.tsx
src/app/lessons/[id]/edit/page.tsx
src/app/lessons/page.tsx
src/app/methods/[id]/edit/page.tsx
src/app/methods/new/page.tsx
src/app/methods/page.tsx
src/app/objectives/[id]/edit/page.tsx
src/app/objectives/layout.tsx
src/app/objectives/new/page.tsx
src/app/objectives/page.tsx
src/app/page.tsx
src/app/schedules/[id]/edit/page.tsx
src/app/schedules/[id]/page.tsx
src/app/schedules/layout.tsx
src/app/schedules/new/page.tsx
src/app/schedules/page.tsx
src/app/tasks/[id]/edit/page.tsx
src/app/tasks/new/page.tsx
src/app/tasks/page.tsx
src/app/vocabulary/[id]/edit/page.tsx
src/app/vocabulary/[id]/page.tsx
src/app/vocabulary/groups/[id]/edit/page.tsx
src/app/vocabulary/groups/[id]/page.tsx
src/app/vocabulary/groups/new/page.tsx
src/app/vocabulary/groups/page.tsx
src/app/vocabulary/individual/page.tsx
src/app/vocabulary/layout.tsx
src/app/vocabulary/new/page.tsx
src/app/vocabulary/page.tsx
src/components/auth/AuthGuard.tsx
src/components/auth/index.ts
src/components/auth/LoginForm.tsx
src/components/auth/UserProfile.tsx
src/components/books/BookForm.tsx
src/components/books/BookImportModal.tsx
src/components/books/index.ts
src/components/courses/CourseForm.tsx
src/components/courses/index.ts
src/components/courses/ObjectiveSelector.tsx
src/components/decoders/DecoderForm.tsx
src/components/ErrorBoundary.tsx
src/components/layout/DashboardLayout.tsx
src/components/objectives/ObjectiveForm.tsx
src/components/relationships/CourseBookManager.tsx
src/components/relationships/CourseLessonManager.tsx
src/components/relationships/CourseLessonsWithSchedules.tsx
src/components/relationships/CourseMethodManager.tsx
src/components/relationships/CourseObjectiveManager.tsx
src/components/relationships/CourseScheduleList.tsx
src/components/relationships/CourseTaskManager.tsx
src/components/relationships/CourseVocabularyManager.tsx
src/components/relationships/index.ts
src/components/relationships/LessonBookManager.tsx
src/components/relationships/LessonContentManager.tsx
src/components/relationships/LessonTaskManager.tsx
src/components/schedules/LessonDetailModal.tsx
src/components/schedules/LessonForm.tsx
src/components/schedules/ScheduleCalendar.tsx
src/components/schedules/ScheduleForm.tsx
src/components/ui/Badge.tsx
src/components/ui/BelongingSelector.tsx
src/components/ui/Button.tsx
src/components/ui/Card.tsx
src/components/ui/FilterPanel.tsx
src/components/ui/index.ts
src/components/ui/Input.tsx
src/components/ui/Modal.tsx
src/components/ui/Pagination.tsx
src/components/ui/RichTextDisplay.tsx
src/components/ui/RichTextTruncate.tsx
src/components/ui/SearchBox.tsx
src/components/ui/Select.tsx
src/components/ui/Spinner.tsx
src/components/ui/Table copy.tsx
src/components/ui/Table.tsx
src/components/ui/Tabs.tsx
src/components/ui/Textarea.tsx
src/components/vocabulary/index.ts
src/components/vocabulary/VocabularyForm.tsx
src/components/vocabulary/VocabularyGroupForm.tsx
src/contexts/AuthContext.tsx
src/lib/constants/shared.ts
src/lib/services/relationships/course-book-service.ts
src/lib/services/relationships/course-schedule-service.ts
src/lib/services/relationships/course-vocabulary-service.ts
src/lib/services/relationships/index.ts
src/lib/services/relationships/lesson-relationship-service.ts
src/lib/services/schedule-service.ts
src/lib/supabase.ts
src/lib/supabase/books.ts
src/lib/supabase/categories.ts
src/lib/supabase/course-objectives.ts
src/lib/supabase/courses.ts
src/lib/supabase/decoders.ts
src/lib/supabase/lessons.ts
src/lib/supabase/methods.ts
src/lib/supabase/objectives.ts
src/lib/supabase/schedules.ts
src/lib/supabase/tasks.ts
src/lib/supabase/vocabulary.ts
src/lib/utils.ts
src/types/database.ts
src/types/index.ts
src/types/schedule.ts
SUPABASE_RLS_FIX.md
tailwind.config.js
tsconfig.json
tsconfig.tsbuildinfo

================================================================
Repository Files
================================================================

================
File: .claude/settings.local.json
================
{
  "permissions": {
    "allow": [
      "Bash(npm run build:*)",
      "Bash(grep:*)",
      "Bash(npx tsc:*)",
      "Bash(psql:*)",
      "Bash(rg:*)",
      "Bash(find:*)",
      "Bash(sed:*)",
      "Bash(npm run dev:*)",
      "mcp__supabase__list_projects",
      "mcp__supabase__execute_sql",
      "Bash(npm run type-check:*)",
      "mcp__supabase__get_project",
      "mcp__supabase__list_tables",
      "mcp__supabase__apply_migration",
      "Bash(rm:*)",
      "Bash(pkill:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint)"
    ],
    "deny": []
  }
}

================
File: .cursor/mcp.json
================
{
    "mcpServers": {
        "task-master-ai": {
            "command": "npx",
            "args": [
                "-y",
                "--package=task-master-ai",
                "task-master-ai"
            ],
            "env": {
                "ANTHROPIC_API_KEY": "ANTHROPIC_API_KEY_HERE",
                "PERPLEXITY_API_KEY": "PERPLEXITY_API_KEY_HERE",
                "OPENAI_API_KEY": "OPENAI_API_KEY_HERE",
                "GOOGLE_API_KEY": "GOOGLE_API_KEY_HERE",
                "XAI_API_KEY": "XAI_API_KEY_HERE",
                "OPENROUTER_API_KEY": "OPENROUTER_API_KEY_HERE",
                "MISTRAL_API_KEY": "MISTRAL_API_KEY_HERE",
                "AZURE_OPENAI_API_KEY": "AZURE_OPENAI_API_KEY_HERE",
                "OLLAMA_API_KEY": "OLLAMA_API_KEY_HERE"
            }
        }
    }
}

================
File: .cursor/rules/cursor_rules.mdc
================
---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

================
File: .cursor/rules/dev_workflow.mdc
================
---
description: Guide for using Task Master to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
# Task Master Development Workflow

This guide outlines the typical process for using Task Master to manage software development projects.

## Primary Interaction: MCP Server vs. CLI

Task Master offers two primary ways to interact:

1.  **MCP Server (Recommended for Integrated Tools)**:
    - For AI agents and integrated development environments (like Cursor), interacting via the **MCP server is the preferred method**.
    - The MCP server exposes Task Master functionality through a set of tools (e.g., `get_tasks`, `add_subtask`).
    - This method offers better performance, structured data exchange, and richer error handling compared to CLI parsing.
    - Refer to [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc) for details on the MCP architecture and available tools.
    - A comprehensive list and description of MCP tools and their corresponding CLI commands can be found in [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc).
    - **Restart the MCP server** if core logic in `scripts/modules` or MCP tool/direct function definitions change.

2.  **`task-master` CLI (For Users & Fallback)**:
    - The global `task-master` command provides a user-friendly interface for direct terminal interaction.
    - It can also serve as a fallback if the MCP server is inaccessible or a specific function isn't exposed via MCP.
    - Install globally with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.
    - The CLI commands often mirror the MCP tools (e.g., `task-master list` corresponds to `get_tasks`).
    - Refer to [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc) for a detailed command reference.

## Standard Development Workflow Process

-   Start new projects by running `initialize_project` tool / `task-master init` or `parse_prd` / `task-master parse-prd --input='<prd-file.txt>'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to generate initial tasks.json
-   Begin coding sessions with `get_tasks` / `task-master list` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to see current tasks, status, and IDs
-   Determine the next task to work on using `next_task` / `task-master next` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Analyze task complexity with `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before breaking down tasks
-   Review complexity report using `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Select tasks based on dependencies (all marked 'done'), priority level, and ID order
-   Clarify tasks by checking task files in tasks/ directory or asking for user input
-   View specific task details using `get_task` / `task-master show <id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to understand implementation requirements
-   Break down complex tasks using `expand_task` / `task-master expand --id=<id> --force --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) with appropriate flags like `--force` (to replace existing subtasks) and `--research`.
-   Clear existing subtasks if needed using `clear_subtasks` / `task-master clear-subtasks --id=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before regenerating
-   Implement code following task details, dependencies, and project standards
-   Verify tasks according to test strategies before marking as complete (See [`tests.mdc`](mdc:.cursor/rules/tests.mdc))
-   Mark completed tasks with `set_task_status` / `task-master set-status --id=<id> --status=done` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
-   Update dependent tasks when implementation differs from original plan using `update` / `task-master update --from=<id> --prompt="..."` or `update_task` / `task-master update-task --id=<id> --prompt="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
-   Add new tasks discovered during implementation using `add_task` / `task-master add-task --prompt="..." --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Add new subtasks as needed using `add_subtask` / `task-master add-subtask --parent=<id> --title="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Append notes or details to subtasks using `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='Add implementation notes here...\nMore details...'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Generate task files with `generate` / `task-master generate` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) after updating tasks.json
-   Maintain valid dependency structure with `add_dependency`/`remove_dependency` tools or `task-master add-dependency`/`remove-dependency` commands, `validate_dependencies` / `task-master validate-dependencies`, and `fix_dependencies` / `task-master fix-dependencies` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) when needed
-   Respect dependency chains and task priorities when selecting work
-   Report progress regularly using `get_tasks` / `task-master list`
-   Reorganize tasks as needed using `move_task` / `task-master move --from=<id> --to=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to change task hierarchy or ordering

## Task Complexity Analysis

-   Run `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for comprehensive analysis
-   Review complexity report via `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for a formatted, readable version.
-   Focus on tasks with highest complexity scores (8-10) for detailed breakdown
-   Use analysis results to determine appropriate subtask allocation
-   Note that reports are automatically used by the `expand_task` tool/command

## Task Breakdown Process

-   Use `expand_task` / `task-master expand --id=<id>`. It automatically uses the complexity report if found, otherwise generates default number of subtasks.
-   Use `--num=<number>` to specify an explicit number of subtasks, overriding defaults or complexity report recommendations.
-   Add `--research` flag to leverage Perplexity AI for research-backed expansion.
-   Add `--force` flag to clear existing subtasks before generating new ones (default is to append).
-   Use `--prompt="<context>"` to provide additional context when needed.
-   Review and adjust generated subtasks as necessary.
-   Use `expand_all` tool or `task-master expand --all` to expand multiple pending tasks at once, respecting flags like `--force` and `--research`.
-   If subtasks need complete replacement (regardless of the `--force` flag on `expand`), clear them first with `clear_subtasks` / `task-master clear-subtasks --id=<id>`.

## Implementation Drift Handling

-   When implementation differs significantly from planned approach
-   When future tasks need modification due to current implementation choices
-   When new dependencies or requirements emerge
-   Use `update` / `task-master update --from=<futureTaskId> --prompt='<explanation>\nUpdate context...' --research` to update multiple future tasks.
-   Use `update_task` / `task-master update-task --id=<taskId> --prompt='<explanation>\nUpdate context...' --research` to update a single specific task.

## Task Status Management

-   Use 'pending' for tasks ready to be worked on
-   Use 'done' for completed and verified tasks
-   Use 'deferred' for postponed tasks
-   Add custom status values as needed for project-specific workflows

## Task Structure Fields

- **id**: Unique identifier for the task (Example: `1`, `1.1`)
- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
- **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
- **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`) 
- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`) 
- **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`) 
- Refer to task structure details (previously linked to `tasks.mdc`).

## Configuration Management (Updated)

Taskmaster configuration is managed through two main mechanisms:

1.  **`.taskmaster/config.json` File (Primary):**
    *   Located in the project root directory.
    *   Stores most configuration settings: AI model selections (main, research, fallback), parameters (max tokens, temperature), logging level, default subtasks/priority, project name, etc.
    *   **Managed via `task-master models --setup` command.** Do not edit manually unless you know what you are doing.
    *   **View/Set specific models via `task-master models` command or `models` MCP tool.**
    *   Created automatically when you run `task-master models --setup` for the first time.

2.  **Environment Variables (`.env` / `mcp.json`):**
    *   Used **only** for sensitive API keys and specific endpoint URLs.
    *   Place API keys (one per provider) in a `.env` file in the project root for CLI usage.
    *   For MCP/Cursor integration, configure these keys in the `env` section of `.cursor/mcp.json`.
    *   Available keys/variables: See `assets/env.example` or the Configuration section in the command reference (previously linked to `taskmaster.mdc`).

**Important:** Non-API key settings (like model selections, `MAX_TOKENS`, `TASKMASTER_LOG_LEVEL`) are **no longer configured via environment variables**. Use the `task-master models` command (or `--setup` for interactive configuration) or the `models` MCP tool.
**If AI commands FAIL in MCP** verify that the API key for the selected provider is present in the `env` section of `.cursor/mcp.json`.
**If AI commands FAIL in CLI** verify that the API key for the selected provider is present in the `.env` file in the root of the project.

## Determining the Next Task

- Run `next_task` / `task-master next` to show the next task to work on.
- The command identifies tasks with all dependencies satisfied
- Tasks are prioritized by priority level, dependency count, and ID
- The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
- Recommended before starting any new development work
- Respects your project's dependency structure
- Ensures tasks are completed in the appropriate sequence
- Provides ready-to-use commands for common task actions

## Viewing Specific Task Details

- Run `get_task` / `task-master show <id>` to view a specific task.
- Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
- Displays comprehensive information similar to the next command, but for a specific task
- For parent tasks, shows all subtasks and their current status
- For subtasks, shows parent task information and relationship
- Provides contextual suggested actions appropriate for the specific task
- Useful for examining task details before implementation or checking status

## Managing Task Dependencies

- Use `add_dependency` / `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency.
- Use `remove_dependency` / `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency.
- The system prevents circular dependencies and duplicate dependency entries
- Dependencies are checked for existence before being added or removed
- Task files are automatically regenerated after dependency changes
- Dependencies are visualized with status indicators in task listings and files

## Task Reorganization

- Use `move_task` / `task-master move --from=<id> --to=<id>` to move tasks or subtasks within the hierarchy
- This command supports several use cases:
  - Moving a standalone task to become a subtask (e.g., `--from=5 --to=7`)
  - Moving a subtask to become a standalone task (e.g., `--from=5.2 --to=7`) 
  - Moving a subtask to a different parent (e.g., `--from=5.2 --to=7.3`)
  - Reordering subtasks within the same parent (e.g., `--from=5.2 --to=5.4`)
  - Moving a task to a new, non-existent ID position (e.g., `--from=5 --to=25`)
  - Moving multiple tasks at once using comma-separated IDs (e.g., `--from=10,11,12 --to=16,17,18`)
- The system includes validation to prevent data loss:
  - Allows moving to non-existent IDs by creating placeholder tasks
  - Prevents moving to existing task IDs that have content (to avoid overwriting)
  - Validates source tasks exist before attempting to move them
- The system maintains proper parent-child relationships and dependency integrity
- Task files are automatically regenerated after the move operation
- This provides greater flexibility in organizing and refining your task structure as project understanding evolves
- This is especially useful when dealing with potential merge conflicts arising from teams creating tasks on separate branches. Solve these conflicts very easily by moving your tasks and keeping theirs.

## Iterative Subtask Implementation

Once a task has been broken down into subtasks using `expand_task` or similar methods, follow this iterative process for implementation:

1.  **Understand the Goal (Preparation):**
    *   Use `get_task` / `task-master show <subtaskId>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to thoroughly understand the specific goals and requirements of the subtask.

2.  **Initial Exploration & Planning (Iteration 1):**
    *   This is the first attempt at creating a concrete implementation plan.
    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
    *   Determine the intended code changes (diffs) and their locations.
    *   Gather *all* relevant details from this exploration phase.

3.  **Log the Plan:**
    *   Run `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<detailed plan>'`.
    *   Provide the *complete and detailed* findings from the exploration phase in the prompt. Include file paths, line numbers, proposed diffs, reasoning, and any potential challenges identified. Do not omit details. The goal is to create a rich, timestamped log within the subtask's `details`.

4.  **Verify the Plan:**
    *   Run `get_task` / `task-master show <subtaskId>` again to confirm that the detailed implementation plan has been successfully appended to the subtask's details.

5.  **Begin Implementation:**
    *   Set the subtask status using `set_task_status` / `task-master set-status --id=<subtaskId> --status=in-progress`.
    *   Start coding based on the logged plan.

6.  **Refine and Log Progress (Iteration 2+):**
    *   As implementation progresses, you will encounter challenges, discover nuances, or confirm successful approaches.
    *   **Before appending new information**: Briefly review the *existing* details logged in the subtask (using `get_task` or recalling from context) to ensure the update adds fresh insights and avoids redundancy.
    *   **Regularly** use `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<update details>\n- What worked...\n- What didn't work...'` to append new findings.
    *   **Crucially, log:**
        *   What worked ("fundamental truths" discovered).
        *   What didn't work and why (to avoid repeating mistakes).
        *   Specific code snippets or configurations that were successful.
        *   Decisions made, especially if confirmed with user input.
        *   Any deviations from the initial plan and the reasoning.
    *   The objective is to continuously enrich the subtask's details, creating a log of the implementation journey that helps the AI (and human developers) learn, adapt, and avoid repeating errors.

7.  **Review & Update Rules (Post-Implementation):**
    *   Once the implementation for the subtask is functionally complete, review all code changes and the relevant chat history.
    *   Identify any new or modified code patterns, conventions, or best practices established during the implementation.
    *   Create new or update existing rules following internal guidelines (previously linked to `cursor_rules.mdc` and `self_improve.mdc`).

8.  **Mark Task Complete:**
    *   After verifying the implementation and updating any necessary rules, mark the subtask as completed: `set_task_status` / `task-master set-status --id=<subtaskId> --status=done`.

9.  **Commit Changes (If using Git):**
    *   Stage the relevant code changes and any updated/new rule files (`git add .`).
    *   Craft a comprehensive Git commit message summarizing the work done for the subtask, including both code implementation and any rule adjustments.
    *   Execute the commit command directly in the terminal (e.g., `git commit -m 'feat(module): Implement feature X for subtask <subtaskId>\n\n- Details about changes...\n- Updated rule Y for pattern Z'`).
    *   Consider if a Changeset is needed according to internal versioning guidelines (previously linked to `changeset.mdc`). If so, run `npm run changeset`, stage the generated file, and amend the commit or create a new one.

10. **Proceed to Next Subtask:**
    *   Identify the next subtask (e.g., using `next_task` / `task-master next`).

## Code Analysis & Refactoring Techniques

- **Top-Level Function Search**:
    - Useful for understanding module structure or planning refactors.
    - Use grep/ripgrep to find exported functions/constants:
      `rg "export (async function|function|const) \w+"` or similar patterns.
    - Can help compare functions between files during migrations or identify potential naming conflicts.

---
*This workflow provides a general guideline. Adapt it based on your specific project needs and team practices.*

================
File: .cursor/rules/self_improve.mdc
================
---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.

================
File: .cursor/rules/taskmaster.mdc
================
---
description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
globs: **/*
alwaysApply: true
---
# Taskmaster Tool & Command Reference

This document provides a detailed reference for interacting with Taskmaster, covering both the recommended MCP tools, suitable for integrations like Cursor, and the corresponding `task-master` CLI commands, designed for direct user interaction or fallback.

**Note:** For interacting with Taskmaster programmatically or via integrated tools, using the **MCP tools is strongly recommended** due to better performance, structured data, and error handling. The CLI commands serve as a user-friendly alternative and fallback. 

**Important:** Several MCP tools involve AI processing... The AI-powered tools include `parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, and `add_task`.

---

## Initialization & Setup

### 1. Initialize Project (`init`)

*   **MCP Tool:** `initialize_project`
*   **CLI Command:** `task-master init [options]`
*   **Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project.`
*   **Key CLI Options:**
    *   `--name <name>`: `Set the name for your project in Taskmaster's configuration.`
    *   `--description <text>`: `Provide a brief description for your project.`
    *   `--version <version>`: `Set the initial version for your project, e.g., '0.1.0'.`
    *   `-y, --yes`: `Initialize Taskmaster quickly using default settings without interactive prompts.`
*   **Usage:** Run this once at the beginning of a new project.
*   **MCP Variant Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project by running the 'task-master init' command.`
*   **Key MCP Parameters/Options:**
    *   `projectName`: `Set the name for your project.` (CLI: `--name <name>`)
    *   `projectDescription`: `Provide a brief description for your project.` (CLI: `--description <text>`)
    *   `projectVersion`: `Set the initial version for your project, e.g., '0.1.0'.` (CLI: `--version <version>`)
    *   `authorName`: `Author name.` (CLI: `--author <author>`)
    *   `skipInstall`: `Skip installing dependencies. Default is false.` (CLI: `--skip-install`)
    *   `addAliases`: `Add shell aliases tm and taskmaster. Default is false.` (CLI: `--aliases`)
    *   `yes`: `Skip prompts and use defaults/provided arguments. Default is false.` (CLI: `-y, --yes`)
*   **Usage:** Run this once at the beginning of a new project, typically via an integrated tool like Cursor. Operates on the current working directory of the MCP server. 
*   **Important:** Once complete, you *MUST* parse a prd in order to generate tasks. There will be no tasks files until then. The next step after initializing should be to create a PRD using the example PRD in .taskmaster/templates/example_prd.txt. 

### 2. Parse PRD (`parse_prd`)

*   **MCP Tool:** `parse_prd`
*   **CLI Command:** `task-master parse-prd [file] [options]`
*   **Description:** `Parse a Product Requirements Document, PRD, or text file with Taskmaster to automatically generate an initial set of tasks in tasks.json.`
*   **Key Parameters/Options:**
    *   `input`: `Path to your PRD or requirements text file that Taskmaster should parse for tasks.` (CLI: `[file]` positional or `-i, --input <file>`)
    *   `output`: `Specify where Taskmaster should save the generated 'tasks.json' file. Defaults to '.taskmaster/tasks/tasks.json'.` (CLI: `-o, --output <file>`)
    *   `numTasks`: `Approximate number of top-level tasks Taskmaster should aim to generate from the document.` (CLI: `-n, --num-tasks <number>`)
    *   `force`: `Use this to allow Taskmaster to overwrite an existing 'tasks.json' without asking for confirmation.` (CLI: `-f, --force`)
*   **Usage:** Useful for bootstrapping a project from an existing requirements document.
*   **Notes:** Task Master will strictly adhere to any specific requirements mentioned in the PRD, such as libraries, database schemas, frameworks, tech stacks, etc., while filling in any gaps where the PRD isn't fully specified. Tasks are designed to provide the most direct implementation path while avoiding over-engineering.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress. If the user does not have a PRD, suggest discussing their idea and then use the example PRD in `.taskmaster/templates/example_prd.txt` as a template for creating the PRD based on their idea, for use with `parse-prd`.

---

## AI Model Configuration

### 2. Manage Models (`models`)
*   **MCP Tool:** `models`
*   **CLI Command:** `task-master models [options]`
*   **Description:** `View the current AI model configuration or set specific models for different roles (main, research, fallback). Allows setting custom model IDs for Ollama and OpenRouter.`
*   **Key MCP Parameters/Options:**
    *   `setMain <model_id>`: `Set the primary model ID for task generation/updates.` (CLI: `--set-main <model_id>`)
    *   `setResearch <model_id>`: `Set the model ID for research-backed operations.` (CLI: `--set-research <model_id>`)
    *   `setFallback <model_id>`: `Set the model ID to use if the primary fails.` (CLI: `--set-fallback <model_id>`)
    *   `ollama <boolean>`: `Indicates the set model ID is a custom Ollama model.` (CLI: `--ollama`)
    *   `openrouter <boolean>`: `Indicates the set model ID is a custom OpenRouter model.` (CLI: `--openrouter`)
    *   `listAvailableModels <boolean>`: `If true, lists available models not currently assigned to a role.` (CLI: No direct equivalent; CLI lists available automatically)
    *   `projectRoot <string>`: `Optional. Absolute path to the project root directory.` (CLI: Determined automatically)
*   **Key CLI Options:**
    *   `--set-main <model_id>`: `Set the primary model.`
    *   `--set-research <model_id>`: `Set the research model.`
    *   `--set-fallback <model_id>`: `Set the fallback model.`
    *   `--ollama`: `Specify that the provided model ID is for Ollama (use with --set-*).`
    *   `--openrouter`: `Specify that the provided model ID is for OpenRouter (use with --set-*). Validates against OpenRouter API.`
    *   `--setup`: `Run interactive setup to configure models, including custom Ollama/OpenRouter IDs.`
*   **Usage (MCP):** Call without set flags to get current config. Use `setMain`, `setResearch`, or `setFallback` with a valid model ID to update the configuration. Use `listAvailableModels: true` to get a list of unassigned models. To set a custom model, provide the model ID and set `ollama: true` or `openrouter: true`.
*   **Usage (CLI):** Run without flags to view current configuration and available models. Use set flags to update specific roles. Use `--setup` for guided configuration, including custom models. To set a custom model via flags, use `--set-<role>=<model_id>` along with either `--ollama` or `--openrouter`.
*   **Notes:** Configuration is stored in `.taskmaster/config.json` in the project root. This command/tool modifies that file. Use `listAvailableModels` or `task-master models` to see internally supported models. OpenRouter custom models are validated against their live API. Ollama custom models are not validated live.
*   **API note:** API keys for selected AI providers (based on their model) need to exist in the mcp.json file to be accessible in MCP context. The API keys must be present in the local .env file for the CLI to be able to read them.
*   **Model costs:** The costs in supported models are expressed in dollars. An input/output value of 3 is $3.00. A value of 0.8 is $0.80. 
*   **Warning:** DO NOT MANUALLY EDIT THE .taskmaster/config.json FILE. Use the included commands either in the MCP or CLI format as needed. Always prioritize MCP tools when available and use the CLI as a fallback.

---

## Task Listing & Viewing

### 3. Get Tasks (`get_tasks`)

*   **MCP Tool:** `get_tasks`
*   **CLI Command:** `task-master list [options]`
*   **Description:** `List your Taskmaster tasks, optionally filtering by status and showing subtasks.`
*   **Key Parameters/Options:**
    *   `status`: `Show only Taskmaster tasks matching this status, e.g., 'pending' or 'done'.` (CLI: `-s, --status <status>`)
    *   `withSubtasks`: `Include subtasks indented under their parent tasks in the list.` (CLI: `--with-subtasks`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Get an overview of the project status, often used at the start of a work session.

### 4. Get Next Task (`next_task`)

*   **MCP Tool:** `next_task`
*   **CLI Command:** `task-master next [options]`
*   **Description:** `Ask Taskmaster to show the next available task you can work on, based on status and completed dependencies.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Identify what to work on next according to the plan.

### 5. Get Task Details (`get_task`)

*   **MCP Tool:** `get_task`
*   **CLI Command:** `task-master show [id] [options]`
*   **Description:** `Display detailed information for a specific Taskmaster task or subtask by its ID.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to view.` (CLI: `[id]` positional or `-i, --id <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Understand the full details, implementation notes, and test strategy for a specific task before starting work.

---

## Task Creation & Modification

### 6. Add Task (`add_task`)

*   **MCP Tool:** `add_task`
*   **CLI Command:** `task-master add-task [options]`
*   **Description:** `Add a new task to Taskmaster by describing it; AI will structure it.`
*   **Key Parameters/Options:**
    *   `prompt`: `Required. Describe the new task you want Taskmaster to create, e.g., "Implement user authentication using JWT".` (CLI: `-p, --prompt <text>`)
    *   `dependencies`: `Specify the IDs of any Taskmaster tasks that must be completed before this new one can start, e.g., '12,14'.` (CLI: `-d, --dependencies <ids>`)
    *   `priority`: `Set the priority for the new task: 'high', 'medium', or 'low'. Default is 'medium'.` (CLI: `--priority <priority>`)
    *   `research`: `Enable Taskmaster to use the research role for potentially more informed task creation.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Quickly add newly identified tasks during development.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 7. Add Subtask (`add_subtask`)

*   **MCP Tool:** `add_subtask`
*   **CLI Command:** `task-master add-subtask [options]`
*   **Description:** `Add a new subtask to a Taskmaster parent task, or convert an existing task into a subtask.`
*   **Key Parameters/Options:**
    *   `id` / `parent`: `Required. The ID of the Taskmaster task that will be the parent.` (MCP: `id`, CLI: `-p, --parent <id>`)
    *   `taskId`: `Use this if you want to convert an existing top-level Taskmaster task into a subtask of the specified parent.` (CLI: `-i, --task-id <id>`)
    *   `title`: `Required if not using taskId. The title for the new subtask Taskmaster should create.` (CLI: `-t, --title <title>`)
    *   `description`: `A brief description for the new subtask.` (CLI: `-d, --description <text>`)
    *   `details`: `Provide implementation notes or details for the new subtask.` (CLI: `--details <text>`)
    *   `dependencies`: `Specify IDs of other tasks or subtasks, e.g., '15' or '16.1', that must be done before this new subtask.` (CLI: `--dependencies <ids>`)
    *   `status`: `Set the initial status for the new subtask. Default is 'pending'.` (CLI: `-s, --status <status>`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after adding the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Break down tasks manually or reorganize existing tasks.

### 8. Update Tasks (`update`)

*   **MCP Tool:** `update`
*   **CLI Command:** `task-master update [options]`
*   **Description:** `Update multiple upcoming tasks in Taskmaster based on new context or changes, starting from a specific task ID.`
*   **Key Parameters/Options:**
    *   `from`: `Required. The ID of the first task Taskmaster should update. All tasks with this ID or higher that are not 'done' will be considered.` (CLI: `--from <id>`)
    *   `prompt`: `Required. Explain the change or new context for Taskmaster to apply to the tasks, e.g., "We are now using React Query instead of Redux Toolkit for data fetching".` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Handle significant implementation changes or pivots that affect multiple future tasks. Example CLI: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 9. Update Task (`update_task`)

*   **MCP Tool:** `update_task`
*   **CLI Command:** `task-master update-task [options]`
*   **Description:** `Modify a specific Taskmaster task or subtask by its ID, incorporating new information or changes.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to update.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Explain the specific changes or provide the new information Taskmaster should incorporate into this task.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Refine a specific task based on new understanding or feedback. Example CLI: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 10. Update Subtask (`update_subtask`)

*   **MCP Tool:** `update_subtask`
*   **CLI Command:** `task-master update-subtask [options]`
*   **Description:** `Append timestamped notes or details to a specific Taskmaster subtask without overwriting existing content. Intended for iterative implementation logging.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster subtask, e.g., '15.2', you want to add information to.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Provide the information or notes Taskmaster should append to the subtask's details. Ensure this adds *new* information not already present.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Add implementation notes, code snippets, or clarifications to a subtask during development. Before calling, review the subtask's current details to append only fresh insights, helping to build a detailed log of the implementation journey and avoid redundancy. Example CLI: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 11. Set Task Status (`set_task_status`)

*   **MCP Tool:** `set_task_status`
*   **CLI Command:** `task-master set-status [options]`
*   **Description:** `Update the status of one or more Taskmaster tasks or subtasks, e.g., 'pending', 'in-progress', 'done'.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster task(s) or subtask(s), e.g., '15', '15.2', or '16,17.1', to update.` (CLI: `-i, --id <id>`)
    *   `status`: `Required. The new status to set, e.g., 'done', 'pending', 'in-progress', 'review', 'cancelled'.` (CLI: `-s, --status <status>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Mark progress as tasks move through the development cycle.

### 12. Remove Task (`remove_task`)

*   **MCP Tool:** `remove_task`
*   **CLI Command:** `task-master remove-task [options]`
*   **Description:** `Permanently remove a task or subtask from the Taskmaster tasks list.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '5', or subtask, e.g., '5.2', to permanently remove.` (CLI: `-i, --id <id>`)
    *   `yes`: `Skip the confirmation prompt and immediately delete the task.` (CLI: `-y, --yes`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Permanently delete tasks or subtasks that are no longer needed in the project.
*   **Notes:** Use with caution as this operation cannot be undone. Consider using 'blocked', 'cancelled', or 'deferred' status instead if you just want to exclude a task from active planning but keep it for reference. The command automatically cleans up dependency references in other tasks.

---

## Task Structure & Breakdown

### 13. Expand Task (`expand_task`)

*   **MCP Tool:** `expand_task`
*   **CLI Command:** `task-master expand [options]`
*   **Description:** `Use Taskmaster's AI to break down a complex task into smaller, manageable subtasks. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `id`: `The ID of the specific Taskmaster task you want to break down into subtasks.` (CLI: `-i, --id <id>`)
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create. Uses complexity analysis/defaults otherwise.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context or specific instructions to Taskmaster for generating the subtasks.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Generate a detailed implementation plan for a complex task before starting coding. Automatically uses complexity report recommendations if available and `num` is not specified.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 14. Expand All Tasks (`expand_all`)

*   **MCP Tool:** `expand_all`
*   **CLI Command:** `task-master expand --all [options]` (Note: CLI uses the `expand` command with the `--all` flag)
*   **Description:** `Tell Taskmaster to automatically expand all eligible pending/in-progress tasks based on complexity analysis or defaults. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create per task.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context for Taskmaster to apply generally during expansion.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones for each eligible task. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Useful after initial task generation or complexity analysis to break down multiple tasks at once.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 15. Clear Subtasks (`clear_subtasks`)

*   **MCP Tool:** `clear_subtasks`
*   **CLI Command:** `task-master clear-subtasks [options]`
*   **Description:** `Remove all subtasks from one or more specified Taskmaster parent tasks.`
*   **Key Parameters/Options:**
    *   `id`: `The ID(s) of the Taskmaster parent task(s) whose subtasks you want to remove, e.g., '15' or '16,18'. Required unless using `all`.) (CLI: `-i, --id <ids>`)
    *   `all`: `Tell Taskmaster to remove subtasks from all parent tasks.` (CLI: `--all`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before regenerating subtasks with `expand_task` if the previous breakdown needs replacement.

### 16. Remove Subtask (`remove_subtask`)

*   **MCP Tool:** `remove_subtask`
*   **CLI Command:** `task-master remove-subtask [options]`
*   **Description:** `Remove a subtask from its Taskmaster parent, optionally converting it into a standalone task.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster subtask(s) to remove, e.g., '15.2' or '16.1,16.3'.` (CLI: `-i, --id <id>`)
    *   `convert`: `If used, Taskmaster will turn the subtask into a regular top-level task instead of deleting it.` (CLI: `-c, --convert`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after removing the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Delete unnecessary subtasks or promote a subtask to a top-level task.

### 17. Move Task (`move_task`)

*   **MCP Tool:** `move_task`
*   **CLI Command:** `task-master move [options]`
*   **Description:** `Move a task or subtask to a new position within the task hierarchy.`
*   **Key Parameters/Options:**
    *   `from`: `Required. ID of the task/subtask to move (e.g., "5" or "5.2"). Can be comma-separated for multiple tasks.` (CLI: `--from <id>`)
    *   `to`: `Required. ID of the destination (e.g., "7" or "7.3"). Must match the number of source IDs if comma-separated.` (CLI: `--to <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Reorganize tasks by moving them within the hierarchy. Supports various scenarios like:
    *   Moving a task to become a subtask
    *   Moving a subtask to become a standalone task
    *   Moving a subtask to a different parent
    *   Reordering subtasks within the same parent
    *   Moving a task to a new, non-existent ID (automatically creates placeholders)
    *   Moving multiple tasks at once with comma-separated IDs
*   **Validation Features:**
    *   Allows moving tasks to non-existent destination IDs (creates placeholder tasks)
    *   Prevents moving to existing task IDs that already have content (to avoid overwriting)
    *   Validates that source tasks exist before attempting to move them
    *   Maintains proper parent-child relationships
*   **Example CLI:** `task-master move --from=5.2 --to=7.3` to move subtask 5.2 to become subtask 7.3.
*   **Example Multi-Move:** `task-master move --from=10,11,12 --to=16,17,18` to move multiple tasks to new positions.
*   **Common Use:** Resolving merge conflicts in tasks.json when multiple team members create tasks on different branches.

---

## Dependency Management

### 18. Add Dependency (`add_dependency`)

*   **MCP Tool:** `add_dependency`
*   **CLI Command:** `task-master add-dependency [options]`
*   **Description:** `Define a dependency in Taskmaster, making one task a prerequisite for another.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task that will depend on another.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that must be completed first, the prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <path>`)
*   **Usage:** Establish the correct order of execution between tasks.

### 19. Remove Dependency (`remove_dependency`)

*   **MCP Tool:** `remove_dependency`
*   **CLI Command:** `task-master remove-dependency [options]`
*   **Description:** `Remove a dependency relationship between two Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task you want to remove a prerequisite from.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that should no longer be a prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Update task relationships when the order of execution changes.

### 20. Validate Dependencies (`validate_dependencies`)

*   **MCP Tool:** `validate_dependencies`
*   **CLI Command:** `task-master validate-dependencies [options]`
*   **Description:** `Check your Taskmaster tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Audit the integrity of your task dependencies.

### 21. Fix Dependencies (`fix_dependencies`)

*   **MCP Tool:** `fix_dependencies`
*   **CLI Command:** `task-master fix-dependencies [options]`
*   **Description:** `Automatically fix dependency issues (like circular references or links to non-existent tasks) in your Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Clean up dependency errors automatically.

---

## Analysis & Reporting

### 22. Analyze Project Complexity (`analyze_project_complexity`)

*   **MCP Tool:** `analyze_project_complexity`
*   **CLI Command:** `task-master analyze-complexity [options]`
*   **Description:** `Have Taskmaster analyze your tasks to determine their complexity and suggest which ones need to be broken down further.`
*   **Key Parameters/Options:**
    *   `output`: `Where to save the complexity analysis report (default: '.taskmaster/reports/task-complexity-report.json').` (CLI: `-o, --output <file>`)
    *   `threshold`: `The minimum complexity score (1-10) that should trigger a recommendation to expand a task.` (CLI: `-t, --threshold <number>`)
    *   `research`: `Enable research role for more accurate complexity analysis. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before breaking down tasks to identify which ones need the most attention.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 23. View Complexity Report (`complexity_report`)

*   **MCP Tool:** `complexity_report`
*   **CLI Command:** `task-master complexity-report [options]`
*   **Description:** `Display the task complexity analysis report in a readable format.`
*   **Key Parameters/Options:**
    *   `file`: `Path to the complexity report (default: '.taskmaster/reports/task-complexity-report.json').` (CLI: `-f, --file <file>`)
*   **Usage:** Review and understand the complexity analysis results after running analyze-complexity.

---

## File Management

### 24. Generate Task Files (`generate`)

*   **MCP Tool:** `generate`
*   **CLI Command:** `task-master generate [options]`
*   **Description:** `Create or update individual Markdown files for each task based on your tasks.json.`
*   **Key Parameters/Options:**
    *   `output`: `The directory where Taskmaster should save the task files (default: in a 'tasks' directory).` (CLI: `-o, --output <directory>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Run this after making changes to tasks.json to keep individual task files up to date.

---

## Environment Variables Configuration (Updated)

Taskmaster primarily uses the **`.taskmaster/config.json`** file (in project root) for configuration (models, parameters, logging level, etc.), managed via `task-master models --setup`.

Environment variables are used **only** for sensitive API keys related to AI providers and specific overrides like the Ollama base URL:

*   **API Keys (Required for corresponding provider):**
    *   `ANTHROPIC_API_KEY`
    *   `PERPLEXITY_API_KEY`
    *   `OPENAI_API_KEY`
    *   `GOOGLE_API_KEY`
    *   `MISTRAL_API_KEY`
    *   `AZURE_OPENAI_API_KEY` (Requires `AZURE_OPENAI_ENDPOINT` too)
    *   `OPENROUTER_API_KEY`
    *   `XAI_API_KEY`
    *   `OLLANA_API_KEY` (Requires `OLLAMA_BASE_URL` too)
*   **Endpoints (Optional/Provider Specific inside .taskmaster/config.json):**
    *   `AZURE_OPENAI_ENDPOINT`
    *   `OLLAMA_BASE_URL` (Default: `http://localhost:11434/api`)

**Set API keys** in your **`.env`** file in the project root (for CLI use) or within the `env` section of your **`.cursor/mcp.json`** file (for MCP/Cursor integration). All other settings (model choice, max tokens, temperature, log level, custom endpoints) are managed in `.taskmaster/config.json` via `task-master models` command or `models` MCP tool.

---

For details on how these commands fit into the development process, see the [Development Workflow Guide](mdc:.cursor/rules/dev_workflow.mdc).

================
File: .env.example
================
# Next.js Environment Variables
NEXT_PUBLIC_APP_URL=http://builder.igpsedu.com

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key

# Database Configuration (optional - Supabase handles this)
# DATABASE_URL=your_supabase_database_url

# File Upload Configuration
NEXT_PUBLIC_MAX_FILE_SIZE=10485760 # 10MB
NEXT_PUBLIC_ALLOWED_FILE_TYPES=image/*,application/pdf

# Development
NODE_ENV=development

# Optional: Analytics
# NEXT_PUBLIC_GA_ID=your_google_analytics_id

================
File: .env.local
================
NEXT_PUBLIC_SUPABASE_URL=https://djvmoqharkefksvceetu.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRqdm1vcWhhcmtlZmtzdmNlZXR1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk0MDk2MDUsImV4cCI6MjA2NDk4NTYwNX0.3B6g4kgKW-TBCiwtpapuLuTzNdEhbAjP68_K9V2onJA
NEXT_PUBLIC_APP_URL=http://localhost:5001
#http://builder.igpsedu.com/
#http://localhost:5001

================
File: .eslintrc.json
================
{
  "extends": [
    "next/core-web-vitals"
  ],
  "rules": {
    "react/no-unescaped-entities": "warn",
    "react-hooks/exhaustive-deps": "warn",
    "@next/next/no-img-element": "warn"
  },
  "root": true
}

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
dev-debug.log

# Dependency directories
node_modules/

# Environment variables
.env

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS specific
.DS_Store

# Task files
tasks.json
/tasks/
# Build directories
package-lock.json

# next.js
/.next/
/out/

================
File: .prettierrc
================
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "plugins": ["prettier-plugin-tailwindcss"]
}

================
File: .roo/rules-architect/architect-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Architectural Design & Planning Role (Delegated Tasks):**

Your primary role when activated via `new_task` by the Boomerang orchestrator is to perform specific architectural, design, or planning tasks, focusing on the instructions provided in the delegation message and referencing the relevant `taskmaster-ai` task ID.

1.  **Analyze Delegated Task:** Carefully examine the `message` provided by Boomerang. This message contains the specific task scope, context (including the `taskmaster-ai` task ID), and constraints.
2.  **Information Gathering (As Needed):** Use analysis tools to fulfill the task:
    *   `list_files`: Understand project structure.
    *   `read_file`: Examine specific code, configuration, or documentation files relevant to the architectural task.
    *   `list_code_definition_names`: Analyze code structure and relationships.
    *   `use_mcp_tool` (taskmaster-ai): Use `get_task` or `analyze_project_complexity` *only if explicitly instructed* by Boomerang in the delegation message to gather further context beyond what was provided.
3.  **Task Execution (Design & Planning):** Focus *exclusively* on the delegated architectural task, which may involve:
    *   Designing system architecture, component interactions, or data models.
    *   Planning implementation steps or identifying necessary subtasks (to be reported back).
    *   Analyzing technical feasibility, complexity, or potential risks.
    *   Defining interfaces, APIs, or data contracts.
    *   Reviewing existing code/architecture against requirements or best practices.
4.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of design decisions, plans created, analysis performed, or subtasks identified.
    *   Any relevant artifacts produced (e.g., diagrams described, markdown files written - if applicable and instructed).
    *   Completion status (success, failure, needs review).
    *   Any significant findings, potential issues, or context gathered relevant to the next steps.
5.  **Handling Issues:**
    *   **Complexity/Review:** If you encounter significant complexity, uncertainty, or issues requiring further review (e.g., needing testing input, deeper debugging analysis), set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the task fails (e.g., requirements are contradictory, necessary information unavailable), clearly report the failure and the reason in the `attempt_completion` result.
6.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
7.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of architectural decisions, plans, analysis, identified subtasks, errors encountered, or new context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.

**Mode Collaboration & Triggers (Architect Perspective):**

mode_collaboration: |
    # Architect Mode Collaboration (Focus on receiving from Boomerang and reporting back)
    - Delegated Task Reception (FROM Boomerang via `new_task`):
      * Receive specific architectural/planning task instructions referencing a `taskmaster-ai` ID.
      * Analyze requirements, scope, and constraints provided by Boomerang.
    - Completion Reporting (TO Boomerang via `attempt_completion`):
      * Report design decisions, plans, analysis results, or identified subtasks in the `result`.
      * Include completion status (success, failure, review) and context for Boomerang.
      * Signal completion of the *specific delegated architectural task*.

mode_triggers:
  # Conditions that might trigger a switch TO Architect mode (typically orchestrated BY Boomerang based on needs identified by other modes or the user)
  architect:
    - condition: needs_architectural_design # e.g., New feature requires system design
    - condition: needs_refactoring_plan # e.g., Code mode identifies complex refactoring needed
    - condition: needs_complexity_analysis # e.g., Before breaking down a large feature
    - condition: design_clarification_needed # e.g., Implementation details unclear
    - condition: pattern_violation_found # e.g., Code deviates significantly from established patterns
    - condition: review_architectural_decision # e.g., Boomerang requests review based on 'review' status from another mode

================
File: .roo/rules-ask/ask-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Information Retrieval & Explanation Role (Delegated Tasks):**

Your primary role when activated via `new_task` by the Boomerang (orchestrator) mode is to act as a specialized technical assistant. Focus *exclusively* on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Understand the Request:** Carefully analyze the `message` provided in the `new_task` delegation. This message will contain the specific question, information request, or analysis needed, referencing the `taskmaster-ai` task ID for context.
2.  **Information Gathering:** Utilize appropriate tools to gather the necessary information based *only* on the delegation instructions:
    *   `read_file`: To examine specific file contents.
    *   `search_files`: To find patterns or specific text across the project.
    *   `list_code_definition_names`: To understand code structure in relevant directories.
    *   `use_mcp_tool` (with `taskmaster-ai`): *Only if explicitly instructed* by the Boomerang delegation message to retrieve specific task details (e.g., using `get_task`).
3.  **Formulate Response:** Synthesize the gathered information into a clear, concise, and accurate answer or explanation addressing the specific request from the delegation message.
4.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to process and potentially update `taskmaster-ai`. Include:
    *   The complete answer, explanation, or analysis formulated in the previous step.
    *   Completion status (success, failure - e.g., if information could not be found).
    *   Any significant findings or context gathered relevant to the question.
    *   Cited sources (e.g., file paths, specific task IDs if used) where appropriate.
5.  **Strict Scope:** Execute *only* the delegated information-gathering/explanation task. Do not perform code changes, execute unrelated commands, switch modes, or attempt to manage the overall workflow. Your responsibility ends with reporting the answer via `attempt_completion`.

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information (the answer/analysis) within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to potentially update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains the complete and accurate answer/analysis requested by Boomerang.
      - **Content:** Include the full answer, explanation, or analysis results. Cite sources if applicable. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs any necessary Taskmaster updates or decides the next workflow step.

**Taskmaster Interaction:**

*   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
*   **Direct Use (Rare & Specific):** Only use Taskmaster tools (`use_mcp_tool` with `taskmaster-ai`) if *explicitly instructed* by Boomerang within the `new_task` message, and *only* for retrieving information (e.g., `get_task`). Do not update Taskmaster status or content directly.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang), which is highly exceptional for Ask mode.
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously (extremely rare), first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context (again, very rare for Ask).
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous operations (likely just answering a direct question without workflow context).

**Mode Collaboration & Triggers:**

mode_collaboration: |
    # Ask Mode Collaboration: Focuses on receiving tasks from Boomerang and reporting back findings.
    - Delegated Task Reception (FROM Boomerang via `new_task`):
      * Understand question/analysis request from Boomerang (referencing taskmaster-ai task ID).
      * Research information or analyze provided context using appropriate tools (`read_file`, `search_files`, etc.) as instructed.
      * Formulate answers/explanations strictly within the subtask scope.
      * Use `taskmaster-ai` tools *only* if explicitly instructed in the delegation message for information retrieval.
    - Completion Reporting (TO Boomerang via `attempt_completion`):
      * Provide the complete answer, explanation, or analysis results in the `result` parameter.
      * Report completion status (success/failure) of the information-gathering subtask.
      * Cite sources or relevant context found.

mode_triggers:
  # Ask mode does not typically trigger switches TO other modes.
  # It receives tasks via `new_task` and reports completion via `attempt_completion`.
  # Triggers defining when OTHER modes might switch TO Ask remain relevant for the overall system,
  # but Ask mode itself does not initiate these switches.
  ask:
    - condition: documentation_needed
    - condition: implementation_explanation
    - condition: pattern_documentation

================
File: .roo/rules-boomerang/boomerang-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Workflow Orchestration Role:**

Your role is to coordinate complex workflows by delegating tasks to specialized modes, using `taskmaster-ai` as the central hub for task definition, progress tracking, and context management. As an orchestrator, you should always delegate tasks:

1.  **Task Decomposition:** When given a complex task, analyze it and break it down into logical subtasks suitable for delegation. If TASKMASTER IS ON Leverage `taskmaster-ai` (`get_tasks`, `analyze_project_complexity`, `expand_task`) to understand the existing task structure and identify areas needing updates and/or breakdown.
2.  **Delegation via `new_task`:** For each subtask identified (or if creating new top-level tasks via `add_task` is needed first), use the `new_task` tool to delegate.
    *   Choose the most appropriate mode for the subtask's specific goal.
    *   Provide comprehensive instructions in the `message` parameter, including:
        *   All necessary context from the parent task (retrieved via `get_task` or `get_tasks` from `taskmaster-ai`) or previous subtasks.
        *   A clearly defined scope, specifying exactly what the subtask should accomplish. Reference the relevant `taskmaster-ai` task/subtask ID.
        *   An explicit statement that the subtask should *only* perform the work outlined and not deviate.
        *   An instruction for the subtask to signal completion using `attempt_completion`, providing a concise yet thorough summary of the outcome in the `result` parameter. This summary is crucial for updating `taskmaster-ai`.
        *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.
3.  **Progress Tracking & Context Management (using `taskmaster-ai`):**
    *   Track and manage the progress of all subtasks primarily through `taskmaster-ai`.
    *   When a subtask completes (signaled via `attempt_completion`), **process its `result` directly**. Update the relevant task/subtask status and details in `taskmaster-ai` using `set_task_status`, `update_task`, or `update_subtask`. Handle failures explicitly (see Result Reception below).
    *   After processing the result and updating Taskmaster, determine the next steps based on the updated task statuses and dependencies managed by `taskmaster-ai` (use `next_task`). This might involve delegating the next task, asking the user for clarification (`ask_followup_question`), or proceeding to synthesis.
    *   Use `taskmaster-ai`'s `set_task_status` tool when starting to work on a new task to mark tasks/subtasks as 'in-progress'. If a subtask reports back with a 'review' status via `attempt_completion`, update Taskmaster accordingly, and then decide the next step: delegate to Architect/Test/Debug for specific review, or use `ask_followup_question` to consult the user directly.
4.  **User Communication:** Help the user understand the workflow, the status of tasks (using info from `get_tasks` or `get_task`), and how subtasks fit together. Provide clear reasoning for delegation choices.
5.  **Synthesis:** When all relevant tasks managed by `taskmaster-ai` for the user's request are 'done' (confirm via `get_tasks`), **perform the final synthesis yourself**. Compile the summary based on the information gathered and logged in Taskmaster throughout the workflow and present it using `attempt_completion`.
6.  **Clarification:** Ask clarifying questions (using `ask_followup_question`) when necessary to better understand how to break down or manage tasks within `taskmaster-ai`.

Use subtasks (`new_task`) to maintain clarity. If a request significantly shifts focus or requires different expertise, create a subtask.

**Taskmaster-AI Strategy:**

taskmaster_strategy:
  status_prefix: "Begin EVERY response with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]', indicating if the Task Master project structure (e.g., `tasks/tasks.json`) appears to be set up."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER:**
      - Plan: Use `list_files` to check if `tasks/tasks.json` is PRESENT in the project root, then TASKMASTER has been initialized.
      - if `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF
      </thinking>
      *Execute the plan described above.*
  if_uninitialized: |
      1. **Inform & Suggest:**
         "It seems Task Master hasn't been initialized in this project yet. TASKMASTER helps manage tasks and context effectively. Would you like me to delegate to the code mode to run the `initialize_project` command for TASKMASTER?"
      2. **Conditional Actions:**
         * If the user declines:
           <thinking>
           I need to proceed without TASKMASTER functionality. I will inform the user and set the status accordingly.
           </thinking>
           a. Inform the user: "Ok, I will proceed without initializing TASKMASTER."
           b. Set status to '[TASKMASTER: OFF]'.
           c. Attempt to handle the user's request directly if possible.
         * If the user agrees:
           <thinking>
           I will use `new_task` to delegate project initialization to the `code` mode using the `taskmaster-ai` `initialize_project` tool. I need to ensure the `projectRoot` argument is correctly set.
           </thinking>
           a. Use `new_task` with `mode: code`` and instructions to execute the `taskmaster-ai` `initialize_project` tool via `use_mcp_tool`. Provide necessary details like `projectRoot`. Instruct Code mode to report completion via `attempt_completion`.
  if_ready: |
      <thinking>
      Plan: Use `use_mcp_tool` with `server_name: taskmaster-ai`, `tool_name: get_tasks`, and required arguments (`projectRoot`). This verifies connectivity and loads initial task context.
      </thinking>
      1. **Verify & Load:** Attempt to fetch tasks using `taskmaster-ai`'s `get_tasks` tool.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Inform User:** "TASKMASTER is ready. I have loaded the current task list."
      4. **Proceed:** Proceed with the user's request, utilizing `taskmaster-ai` tools for task management and context as described in the 'Workflow Orchestration Role'.

**Mode Collaboration & Triggers:**

mode_collaboration: |
    # Collaboration definitions for how Boomerang orchestrates and interacts.
    # Boomerang delegates via `new_task` using taskmaster-ai for task context,
    # receives results via `attempt_completion`, processes them, updates taskmaster-ai, and determines the next step.

      1. Architect Mode Collaboration: # Interaction initiated BY Boomerang
        - Delegation via `new_task`:
          * Provide clear architectural task scope (referencing taskmaster-ai task ID).
          * Request design, structure, planning based on taskmaster context.
        - Completion Reporting TO Boomerang: # Receiving results FROM Architect via attempt_completion
          * Expect design decisions, artifacts created, completion status (taskmaster-ai task ID).
          * Expect context needed for subsequent implementation delegation.

    2. Test Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear testing scope (referencing taskmaster-ai task ID).
        * Request test plan development, execution, verification based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Test via attempt_completion
        * Expect summary of test results (pass/fail, coverage), completion status (taskmaster-ai task ID).
        * Expect details on bugs or validation issues.

    3. Debug Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear debugging scope (referencing taskmaster-ai task ID).
        * Request investigation, root cause analysis based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Debug via attempt_completion
        * Expect summary of findings (root cause, affected areas), completion status (taskmaster-ai task ID).
        * Expect recommended fixes or next diagnostic steps.

    4. Ask Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear question/analysis request (referencing taskmaster-ai task ID).
        * Request research, context analysis, explanation based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Ask via attempt_completion
        * Expect answers, explanations, analysis results, completion status (taskmaster-ai task ID).
        * Expect cited sources or relevant context found.

    5. Code Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear coding requirements (referencing taskmaster-ai task ID).
        * Request implementation, fixes, documentation, command execution based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Code via attempt_completion
        * Expect outcome of commands/tool usage, summary of code changes/operations, completion status (taskmaster-ai task ID).
        * Expect links to commits or relevant code sections if relevant.

    7. Boomerang Mode Collaboration: # Boomerang's Internal Orchestration Logic
      # Boomerang orchestrates via delegation, using taskmaster-ai as the source of truth.
      - Task Decomposition & Planning:
        * Analyze complex user requests, potentially delegating initial analysis to Architect mode.
        * Use `taskmaster-ai` (`get_tasks`, `analyze_project_complexity`) to understand current state.
        * Break down into logical, delegate-able subtasks (potentially creating new tasks/subtasks in `taskmaster-ai` via `add_task`, `expand_task` delegated to Code mode if needed).
        * Identify appropriate specialized mode for each subtask.
      - Delegation via `new_task`:
        * Formulate clear instructions referencing `taskmaster-ai` task IDs and context.
        * Use `new_task` tool to assign subtasks to chosen modes.
        * Track initiated subtasks (implicitly via `taskmaster-ai` status, e.g., setting to 'in-progress').
      - Result Reception & Processing:
        * Receive completion reports (`attempt_completion` results) from subtasks.
        * **Process the result:** Analyze success/failure and content.
        * **Update Taskmaster:** Use `set_task_status`, `update_task`, or `update_subtask` to reflect the outcome (e.g., 'done', 'failed', 'review') and log key details/context from the result.
        * **Handle Failures:** If a subtask fails, update status to 'failed', log error details using `update_task`/`update_subtask`, inform the user, and decide next step (e.g., delegate to Debug, ask user).
        * **Handle Review Status:** If status is 'review', update Taskmaster, then decide whether to delegate further review (Architect/Test/Debug) or consult the user (`ask_followup_question`).
      - Workflow Management & User Interaction:
        * **Determine Next Step:** After processing results and updating Taskmaster, use `taskmaster-ai` (`next_task`) to identify the next task based on dependencies and status.
        * Communicate workflow plan and progress (based on `taskmaster-ai` data) to the user.
        * Ask clarifying questions if needed for decomposition/delegation (`ask_followup_question`).
      - Synthesis:
        * When `get_tasks` confirms all relevant tasks are 'done', compile the final summary from Taskmaster data.
        * Present the overall result using `attempt_completion`.

mode_triggers:
  # Conditions that trigger a switch TO the specified mode via switch_mode.
  # Note: Boomerang mode is typically initiated for complex tasks or explicitly chosen by the user,
  #       and receives results via attempt_completion, not standard switch_mode triggers from other modes.
  # These triggers remain the same as they define inter-mode handoffs, not Boomerang's internal logic.

  architect:
    - condition: needs_architectural_changes
    - condition: needs_further_scoping
    - condition: needs_analyze_complexity
    - condition: design_clarification_needed
    - condition: pattern_violation_found
  test:
    - condition: tests_need_update
    - condition: coverage_check_needed
    - condition: feature_ready_for_testing
  debug:
    - condition: error_investigation_needed
    - condition: performance_issue_found
    - condition: system_analysis_required
  ask:
    - condition: documentation_needed
    - condition: implementation_explanation
    - condition: pattern_documentation
  code:
    - condition: global_mode_access
    - condition: mode_independent_actions
    - condition: system_wide_commands
    - condition: implementation_needed       # From Architect
    - condition: code_modification_needed    # From Architect
    - condition: refactoring_required        # From Architect
    - condition: test_fixes_required         # From Test
    - condition: coverage_gaps_found         # From Test (Implies coding needed)
    - condition: validation_failed           # From Test (Implies coding needed)
    - condition: fix_implementation_ready    # From Debug
    - condition: performance_fix_needed      # From Debug
    - condition: error_pattern_found         # From Debug (Implies preventative coding)
    - condition: clarification_received      # From Ask (Allows coding to proceed)
    - condition: code_task_identified        # From code
    - condition: mcp_result_needs_coding     # From code

================
File: .roo/rules-code/code-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute** tasks delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Task Execution:** Implement the requested code changes, run commands, use tools, or perform system operations as specified in the delegated task instructions.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Outcome of commands/tool usage.
    *   Summary of code changes made or system operations performed.
    *   Completion status (success, failure, needs review).
    *   Any significant findings, errors encountered, or context gathered.
    *   Links to commits or relevant code sections if applicable.
3.  **Handling Issues:**
    *   **Complexity/Review:** If you encounter significant complexity, uncertainty, or issues requiring review (architectural, testing, debugging), set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the task fails, clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of actions taken, results achieved, errors encountered, decisions made during execution (if relevant to the outcome), and any new context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.

================
File: .roo/rules-debug/debug-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute diagnostic tasks** delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Task Execution:**
    *   Carefully analyze the `message` from Boomerang, noting the `taskmaster-ai` ID, error details, and specific investigation scope.
    *   Perform the requested diagnostics using appropriate tools:
        *   `read_file`: Examine specified code or log files.
        *   `search_files`: Locate relevant code, errors, or patterns.
        *   `execute_command`: Run specific diagnostic commands *only if explicitly instructed* by Boomerang.
        *   `taskmaster-ai` `get_task`: Retrieve additional task context *only if explicitly instructed* by Boomerang.
    *   Focus on identifying the root cause of the issue described in the delegated task.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of diagnostic steps taken and findings (e.g., identified root cause, affected areas).
    *   Recommended next steps (e.g., specific code changes for Code mode, further tests for Test mode).
    *   Completion status (success, failure, needs review). Reference the original `taskmaster-ai` task ID.
    *   Any significant context gathered during the investigation.
    *   **Crucially:** Execute *only* the delegated diagnostic task. Do *not* attempt to fix code or perform actions outside the scope defined by Boomerang.
3.  **Handling Issues:**
    *   **Needs Review:** If the root cause is unclear, requires architectural input, or needs further specialized testing, set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the diagnostic task cannot be completed (e.g., required files missing, commands fail), clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive diagnostic findings within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask` and decide the next step (e.g., delegate fix to Code mode).
      - My role is to *report* diagnostic findings accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary diagnostic information for Boomerang to understand the issue, update Taskmaster, and plan the next action.
      - **Content:** Include summaries of diagnostic actions, root cause analysis, recommended next steps, errors encountered during diagnosis, and any relevant context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates and subsequent delegation.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.

================
File: .roo/rules-test/test-rules
================
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute** testing tasks delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID and its associated context (e.g., `testStrategy`).

1.  **Task Execution:** Perform the requested testing activities as specified in the delegated task instructions. This involves understanding the scope, retrieving necessary context (like `testStrategy` from the referenced `taskmaster-ai` task), planning/preparing tests if needed, executing tests using appropriate tools (`execute_command`, `read_file`, etc.), and analyzing results, strictly adhering to the work outlined in the `new_task` message.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of testing activities performed (e.g., tests planned, executed).
    *   Concise results/outcome (e.g., pass/fail counts, overall status, coverage information if applicable).
    *   Completion status (success, failure, needs review - e.g., if tests reveal significant issues needing broader attention).
    *   Any significant findings (e.g., details of bugs, errors, or validation issues found).
    *   Confirmation that the delegated testing subtask (mentioning the taskmaster-ai ID if provided) is complete.
3.  **Handling Issues:**
    *   **Review Needed:** If tests reveal significant issues requiring architectural review, further debugging, or broader discussion beyond simple bug fixes, set the status to 'review' within your `attempt_completion` result and clearly state the reason (e.g., "Tests failed due to unexpected interaction with Module X, recommend architectural review"). **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the testing task itself cannot be completed (e.g., unable to run tests due to environment issues), clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of actions taken (test execution), results achieved (pass/fail, bugs found), errors encountered during testing, decisions made (if any), and any new context discovered relevant to the testing task. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.

================
File: .roo/rules/dev_workflow.md
================
---
description: Guide for using Task Master to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
# Task Master Development Workflow

This guide outlines the typical process for using Task Master to manage software development projects.

## Primary Interaction: MCP Server vs. CLI

Task Master offers two primary ways to interact:

1.  **MCP Server (Recommended for Integrated Tools)**:
    - For AI agents and integrated development environments (like Roo Code), interacting via the **MCP server is the preferred method**.
    - The MCP server exposes Task Master functionality through a set of tools (e.g., `get_tasks`, `add_subtask`).
    - This method offers better performance, structured data exchange, and richer error handling compared to CLI parsing.
    - Refer to [`mcp.md`](mdc:.roo/rules/mcp.md) for details on the MCP architecture and available tools.
    - A comprehensive list and description of MCP tools and their corresponding CLI commands can be found in [`taskmaster.md`](mdc:.roo/rules/taskmaster.md).
    - **Restart the MCP server** if core logic in `scripts/modules` or MCP tool/direct function definitions change.

2.  **`task-master` CLI (For Users & Fallback)**:
    - The global `task-master` command provides a user-friendly interface for direct terminal interaction.
    - It can also serve as a fallback if the MCP server is inaccessible or a specific function isn't exposed via MCP.
    - Install globally with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.
    - The CLI commands often mirror the MCP tools (e.g., `task-master list` corresponds to `get_tasks`).
    - Refer to [`taskmaster.md`](mdc:.roo/rules/taskmaster.md) for a detailed command reference.

## Standard Development Workflow Process

-   Start new projects by running `initialize_project` tool / `task-master init` or `parse_prd` / `task-master parse-prd --input='<prd-file.txt>'` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to generate initial tasks.json
-   Begin coding sessions with `get_tasks` / `task-master list` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to see current tasks, status, and IDs
-   Determine the next task to work on using `next_task` / `task-master next` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Analyze task complexity with `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) before breaking down tasks
-   Review complexity report using `complexity_report` / `task-master complexity-report` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Select tasks based on dependencies (all marked 'done'), priority level, and ID order
-   Clarify tasks by checking task files in tasks/ directory or asking for user input
-   View specific task details using `get_task` / `task-master show <id>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to understand implementation requirements
-   Break down complex tasks using `expand_task` / `task-master expand --id=<id> --force --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) with appropriate flags like `--force` (to replace existing subtasks) and `--research`.
-   Clear existing subtasks if needed using `clear_subtasks` / `task-master clear-subtasks --id=<id>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) before regenerating
-   Implement code following task details, dependencies, and project standards
-   Verify tasks according to test strategies before marking as complete (See [`tests.md`](mdc:.roo/rules/tests.md))
-   Mark completed tasks with `set_task_status` / `task-master set-status --id=<id> --status=done` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md))
-   Update dependent tasks when implementation differs from original plan using `update` / `task-master update --from=<id> --prompt="..."` or `update_task` / `task-master update-task --id=<id> --prompt="..."` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md))
-   Add new tasks discovered during implementation using `add_task` / `task-master add-task --prompt="..." --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Add new subtasks as needed using `add_subtask` / `task-master add-subtask --parent=<id> --title="..."` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Append notes or details to subtasks using `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='Add implementation notes here...\nMore details...'` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Generate task files with `generate` / `task-master generate` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) after updating tasks.json
-   Maintain valid dependency structure with `add_dependency`/`remove_dependency` tools or `task-master add-dependency`/`remove-dependency` commands, `validate_dependencies` / `task-master validate-dependencies`, and `fix_dependencies` / `task-master fix-dependencies` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) when needed
-   Respect dependency chains and task priorities when selecting work
-   Report progress regularly using `get_tasks` / `task-master list`
-   Reorganize tasks as needed using `move_task` / `task-master move --from=<id> --to=<id>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to change task hierarchy or ordering

## Task Complexity Analysis

-   Run `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) for comprehensive analysis
-   Review complexity report via `complexity_report` / `task-master complexity-report` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) for a formatted, readable version.
-   Focus on tasks with highest complexity scores (8-10) for detailed breakdown
-   Use analysis results to determine appropriate subtask allocation
-   Note that reports are automatically used by the `expand_task` tool/command

## Task Breakdown Process

-   Use `expand_task` / `task-master expand --id=<id>`. It automatically uses the complexity report if found, otherwise generates default number of subtasks.
-   Use `--num=<number>` to specify an explicit number of subtasks, overriding defaults or complexity report recommendations.
-   Add `--research` flag to leverage Perplexity AI for research-backed expansion.
-   Add `--force` flag to clear existing subtasks before generating new ones (default is to append).
-   Use `--prompt="<context>"` to provide additional context when needed.
-   Review and adjust generated subtasks as necessary.
-   Use `expand_all` tool or `task-master expand --all` to expand multiple pending tasks at once, respecting flags like `--force` and `--research`.
-   If subtasks need complete replacement (regardless of the `--force` flag on `expand`), clear them first with `clear_subtasks` / `task-master clear-subtasks --id=<id>`.

## Implementation Drift Handling

-   When implementation differs significantly from planned approach
-   When future tasks need modification due to current implementation choices
-   When new dependencies or requirements emerge
-   Use `update` / `task-master update --from=<futureTaskId> --prompt='<explanation>\nUpdate context...' --research` to update multiple future tasks.
-   Use `update_task` / `task-master update-task --id=<taskId> --prompt='<explanation>\nUpdate context...' --research` to update a single specific task.

## Task Status Management

-   Use 'pending' for tasks ready to be worked on
-   Use 'done' for completed and verified tasks
-   Use 'deferred' for postponed tasks
-   Add custom status values as needed for project-specific workflows

## Task Structure Fields

- **id**: Unique identifier for the task (Example: `1`, `1.1`)
- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
- **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
- **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`) 
- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`) 
- **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`) 
- Refer to task structure details (previously linked to `tasks.md`).

## Configuration Management (Updated)

Taskmaster configuration is managed through two main mechanisms:

1.  **`.taskmaster/config.json` File (Primary):**
    *   Located in the project root directory.
    *   Stores most configuration settings: AI model selections (main, research, fallback), parameters (max tokens, temperature), logging level, default subtasks/priority, project name, etc.
    *   **Managed via `task-master models --setup` command.** Do not edit manually unless you know what you are doing.
    *   **View/Set specific models via `task-master models` command or `models` MCP tool.**
    *   Created automatically when you run `task-master models --setup` for the first time.

2.  **Environment Variables (`.env` / `mcp.json`):**
    *   Used **only** for sensitive API keys and specific endpoint URLs.
    *   Place API keys (one per provider) in a `.env` file in the project root for CLI usage.
    *   For MCP/Roo Code integration, configure these keys in the `env` section of `.roo/mcp.json`.
    *   Available keys/variables: See `assets/env.example` or the Configuration section in the command reference (previously linked to `taskmaster.md`).

**Important:** Non-API key settings (like model selections, `MAX_TOKENS`, `TASKMASTER_LOG_LEVEL`) are **no longer configured via environment variables**. Use the `task-master models` command (or `--setup` for interactive configuration) or the `models` MCP tool.
**If AI commands FAIL in MCP** verify that the API key for the selected provider is present in the `env` section of `.roo/mcp.json`.
**If AI commands FAIL in CLI** verify that the API key for the selected provider is present in the `.env` file in the root of the project.

## Determining the Next Task

- Run `next_task` / `task-master next` to show the next task to work on.
- The command identifies tasks with all dependencies satisfied
- Tasks are prioritized by priority level, dependency count, and ID
- The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
- Recommended before starting any new development work
- Respects your project's dependency structure
- Ensures tasks are completed in the appropriate sequence
- Provides ready-to-use commands for common task actions

## Viewing Specific Task Details

- Run `get_task` / `task-master show <id>` to view a specific task.
- Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
- Displays comprehensive information similar to the next command, but for a specific task
- For parent tasks, shows all subtasks and their current status
- For subtasks, shows parent task information and relationship
- Provides contextual suggested actions appropriate for the specific task
- Useful for examining task details before implementation or checking status

## Managing Task Dependencies

- Use `add_dependency` / `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency.
- Use `remove_dependency` / `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency.
- The system prevents circular dependencies and duplicate dependency entries
- Dependencies are checked for existence before being added or removed
- Task files are automatically regenerated after dependency changes
- Dependencies are visualized with status indicators in task listings and files

## Task Reorganization

- Use `move_task` / `task-master move --from=<id> --to=<id>` to move tasks or subtasks within the hierarchy
- This command supports several use cases:
  - Moving a standalone task to become a subtask (e.g., `--from=5 --to=7`)
  - Moving a subtask to become a standalone task (e.g., `--from=5.2 --to=7`) 
  - Moving a subtask to a different parent (e.g., `--from=5.2 --to=7.3`)
  - Reordering subtasks within the same parent (e.g., `--from=5.2 --to=5.4`)
  - Moving a task to a new, non-existent ID position (e.g., `--from=5 --to=25`)
  - Moving multiple tasks at once using comma-separated IDs (e.g., `--from=10,11,12 --to=16,17,18`)
- The system includes validation to prevent data loss:
  - Allows moving to non-existent IDs by creating placeholder tasks
  - Prevents moving to existing task IDs that have content (to avoid overwriting)
  - Validates source tasks exist before attempting to move them
- The system maintains proper parent-child relationships and dependency integrity
- Task files are automatically regenerated after the move operation
- This provides greater flexibility in organizing and refining your task structure as project understanding evolves
- This is especially useful when dealing with potential merge conflicts arising from teams creating tasks on separate branches. Solve these conflicts very easily by moving your tasks and keeping theirs.

## Iterative Subtask Implementation

Once a task has been broken down into subtasks using `expand_task` or similar methods, follow this iterative process for implementation:

1.  **Understand the Goal (Preparation):**
    *   Use `get_task` / `task-master show <subtaskId>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to thoroughly understand the specific goals and requirements of the subtask.

2.  **Initial Exploration & Planning (Iteration 1):**
    *   This is the first attempt at creating a concrete implementation plan.
    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
    *   Determine the intended code changes (diffs) and their locations.
    *   Gather *all* relevant details from this exploration phase.

3.  **Log the Plan:**
    *   Run `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<detailed plan>'`.
    *   Provide the *complete and detailed* findings from the exploration phase in the prompt. Include file paths, line numbers, proposed diffs, reasoning, and any potential challenges identified. Do not omit details. The goal is to create a rich, timestamped log within the subtask's `details`.

4.  **Verify the Plan:**
    *   Run `get_task` / `task-master show <subtaskId>` again to confirm that the detailed implementation plan has been successfully appended to the subtask's details.

5.  **Begin Implementation:**
    *   Set the subtask status using `set_task_status` / `task-master set-status --id=<subtaskId> --status=in-progress`.
    *   Start coding based on the logged plan.

6.  **Refine and Log Progress (Iteration 2+):**
    *   As implementation progresses, you will encounter challenges, discover nuances, or confirm successful approaches.
    *   **Before appending new information**: Briefly review the *existing* details logged in the subtask (using `get_task` or recalling from context) to ensure the update adds fresh insights and avoids redundancy.
    *   **Regularly** use `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<update details>\n- What worked...\n- What didn't work...'` to append new findings.
    *   **Crucially, log:**
        *   What worked ("fundamental truths" discovered).
        *   What didn't work and why (to avoid repeating mistakes).
        *   Specific code snippets or configurations that were successful.
        *   Decisions made, especially if confirmed with user input.
        *   Any deviations from the initial plan and the reasoning.
    *   The objective is to continuously enrich the subtask's details, creating a log of the implementation journey that helps the AI (and human developers) learn, adapt, and avoid repeating errors.

7.  **Review & Update Rules (Post-Implementation):**
    *   Once the implementation for the subtask is functionally complete, review all code changes and the relevant chat history.
    *   Identify any new or modified code patterns, conventions, or best practices established during the implementation.
    *   Create new or update existing rules following internal guidelines (previously linked to `cursor_rules.md` and `self_improve.md`).

8.  **Mark Task Complete:**
    *   After verifying the implementation and updating any necessary rules, mark the subtask as completed: `set_task_status` / `task-master set-status --id=<subtaskId> --status=done`.

9.  **Commit Changes (If using Git):**
    *   Stage the relevant code changes and any updated/new rule files (`git add .`).
    *   Craft a comprehensive Git commit message summarizing the work done for the subtask, including both code implementation and any rule adjustments.
    *   Execute the commit command directly in the terminal (e.g., `git commit -m 'feat(module): Implement feature X for subtask <subtaskId>\n\n- Details about changes...\n- Updated rule Y for pattern Z'`).
    *   Consider if a Changeset is needed according to internal versioning guidelines (previously linked to `changeset.md`). If so, run `npm run changeset`, stage the generated file, and amend the commit or create a new one.

10. **Proceed to Next Subtask:**
    *   Identify the next subtask (e.g., using `next_task` / `task-master next`).

## Code Analysis & Refactoring Techniques

- **Top-Level Function Search**:
    - Useful for understanding module structure or planning refactors.
    - Use grep/ripgrep to find exported functions/constants:
      `rg "export (async function|function|const) \w+"` or similar patterns.
    - Can help compare functions between files during migrations or identify potential naming conflicts.

---
*This workflow provides a general guideline. Adapt it based on your specific project needs and team practices.*

================
File: .roo/rules/roo_rules.md
================
---
description: Guidelines for creating and maintaining Roo Code rules to ensure consistency and effectiveness.
globs: .roo/rules/*.md
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.md](mdc:.roo/rules/prisma.md) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

================
File: .roo/rules/self_improve.md
================
---
description: Guidelines for continuously improving Roo Code rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.md](mdc:.roo/rules/prisma.md):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.md](mdc:.roo/rules/cursor_rules.md) for proper rule formatting and structure.

================
File: .roo/rules/taskmaster.md
================
---
description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
globs: **/*
alwaysApply: true
---
# Taskmaster Tool & Command Reference

This document provides a detailed reference for interacting with Taskmaster, covering both the recommended MCP tools, suitable for integrations like Roo Code, and the corresponding `task-master` CLI commands, designed for direct user interaction or fallback.

**Note:** For interacting with Taskmaster programmatically or via integrated tools, using the **MCP tools is strongly recommended** due to better performance, structured data, and error handling. The CLI commands serve as a user-friendly alternative and fallback. 

**Important:** Several MCP tools involve AI processing... The AI-powered tools include `parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, and `add_task`.

---

## Initialization & Setup

### 1. Initialize Project (`init`)

*   **MCP Tool:** `initialize_project`
*   **CLI Command:** `task-master init [options]`
*   **Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project.`
*   **Key CLI Options:**
    *   `--name <name>`: `Set the name for your project in Taskmaster's configuration.`
    *   `--description <text>`: `Provide a brief description for your project.`
    *   `--version <version>`: `Set the initial version for your project, e.g., '0.1.0'.`
    *   `-y, --yes`: `Initialize Taskmaster quickly using default settings without interactive prompts.`
*   **Usage:** Run this once at the beginning of a new project.
*   **MCP Variant Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project by running the 'task-master init' command.`
*   **Key MCP Parameters/Options:**
    *   `projectName`: `Set the name for your project.` (CLI: `--name <name>`)
    *   `projectDescription`: `Provide a brief description for your project.` (CLI: `--description <text>`)
    *   `projectVersion`: `Set the initial version for your project, e.g., '0.1.0'.` (CLI: `--version <version>`)
    *   `authorName`: `Author name.` (CLI: `--author <author>`)
    *   `skipInstall`: `Skip installing dependencies. Default is false.` (CLI: `--skip-install`)
    *   `addAliases`: `Add shell aliases tm and taskmaster. Default is false.` (CLI: `--aliases`)
    *   `yes`: `Skip prompts and use defaults/provided arguments. Default is false.` (CLI: `-y, --yes`)
*   **Usage:** Run this once at the beginning of a new project, typically via an integrated tool like Roo Code. Operates on the current working directory of the MCP server. 
*   **Important:** Once complete, you *MUST* parse a prd in order to generate tasks. There will be no tasks files until then. The next step after initializing should be to create a PRD using the example PRD in .taskmaster/templates/example_prd.txt. 

### 2. Parse PRD (`parse_prd`)

*   **MCP Tool:** `parse_prd`
*   **CLI Command:** `task-master parse-prd [file] [options]`
*   **Description:** `Parse a Product Requirements Document, PRD, or text file with Taskmaster to automatically generate an initial set of tasks in tasks.json.`
*   **Key Parameters/Options:**
    *   `input`: `Path to your PRD or requirements text file that Taskmaster should parse for tasks.` (CLI: `[file]` positional or `-i, --input <file>`)
    *   `output`: `Specify where Taskmaster should save the generated 'tasks.json' file. Defaults to '.taskmaster/tasks/tasks.json'.` (CLI: `-o, --output <file>`)
    *   `numTasks`: `Approximate number of top-level tasks Taskmaster should aim to generate from the document.` (CLI: `-n, --num-tasks <number>`)
    *   `force`: `Use this to allow Taskmaster to overwrite an existing 'tasks.json' without asking for confirmation.` (CLI: `-f, --force`)
*   **Usage:** Useful for bootstrapping a project from an existing requirements document.
*   **Notes:** Task Master will strictly adhere to any specific requirements mentioned in the PRD, such as libraries, database schemas, frameworks, tech stacks, etc., while filling in any gaps where the PRD isn't fully specified. Tasks are designed to provide the most direct implementation path while avoiding over-engineering.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress. If the user does not have a PRD, suggest discussing their idea and then use the example PRD in `.taskmaster/templates/example_prd.txt` as a template for creating the PRD based on their idea, for use with `parse-prd`.

---

## AI Model Configuration

### 2. Manage Models (`models`)
*   **MCP Tool:** `models`
*   **CLI Command:** `task-master models [options]`
*   **Description:** `View the current AI model configuration or set specific models for different roles (main, research, fallback). Allows setting custom model IDs for Ollama and OpenRouter.`
*   **Key MCP Parameters/Options:**
    *   `setMain <model_id>`: `Set the primary model ID for task generation/updates.` (CLI: `--set-main <model_id>`)
    *   `setResearch <model_id>`: `Set the model ID for research-backed operations.` (CLI: `--set-research <model_id>`)
    *   `setFallback <model_id>`: `Set the model ID to use if the primary fails.` (CLI: `--set-fallback <model_id>`)
    *   `ollama <boolean>`: `Indicates the set model ID is a custom Ollama model.` (CLI: `--ollama`)
    *   `openrouter <boolean>`: `Indicates the set model ID is a custom OpenRouter model.` (CLI: `--openrouter`)
    *   `listAvailableModels <boolean>`: `If true, lists available models not currently assigned to a role.` (CLI: No direct equivalent; CLI lists available automatically)
    *   `projectRoot <string>`: `Optional. Absolute path to the project root directory.` (CLI: Determined automatically)
*   **Key CLI Options:**
    *   `--set-main <model_id>`: `Set the primary model.`
    *   `--set-research <model_id>`: `Set the research model.`
    *   `--set-fallback <model_id>`: `Set the fallback model.`
    *   `--ollama`: `Specify that the provided model ID is for Ollama (use with --set-*).`
    *   `--openrouter`: `Specify that the provided model ID is for OpenRouter (use with --set-*). Validates against OpenRouter API.`
    *   `--setup`: `Run interactive setup to configure models, including custom Ollama/OpenRouter IDs.`
*   **Usage (MCP):** Call without set flags to get current config. Use `setMain`, `setResearch`, or `setFallback` with a valid model ID to update the configuration. Use `listAvailableModels: true` to get a list of unassigned models. To set a custom model, provide the model ID and set `ollama: true` or `openrouter: true`.
*   **Usage (CLI):** Run without flags to view current configuration and available models. Use set flags to update specific roles. Use `--setup` for guided configuration, including custom models. To set a custom model via flags, use `--set-<role>=<model_id>` along with either `--ollama` or `--openrouter`.
*   **Notes:** Configuration is stored in `.taskmaster/config.json` in the project root. This command/tool modifies that file. Use `listAvailableModels` or `task-master models` to see internally supported models. OpenRouter custom models are validated against their live API. Ollama custom models are not validated live.
*   **API note:** API keys for selected AI providers (based on their model) need to exist in the mcp.json file to be accessible in MCP context. The API keys must be present in the local .env file for the CLI to be able to read them.
*   **Model costs:** The costs in supported models are expressed in dollars. An input/output value of 3 is $3.00. A value of 0.8 is $0.80. 
*   **Warning:** DO NOT MANUALLY EDIT THE .taskmaster/config.json FILE. Use the included commands either in the MCP or CLI format as needed. Always prioritize MCP tools when available and use the CLI as a fallback.

---

## Task Listing & Viewing

### 3. Get Tasks (`get_tasks`)

*   **MCP Tool:** `get_tasks`
*   **CLI Command:** `task-master list [options]`
*   **Description:** `List your Taskmaster tasks, optionally filtering by status and showing subtasks.`
*   **Key Parameters/Options:**
    *   `status`: `Show only Taskmaster tasks matching this status, e.g., 'pending' or 'done'.` (CLI: `-s, --status <status>`)
    *   `withSubtasks`: `Include subtasks indented under their parent tasks in the list.` (CLI: `--with-subtasks`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Get an overview of the project status, often used at the start of a work session.

### 4. Get Next Task (`next_task`)

*   **MCP Tool:** `next_task`
*   **CLI Command:** `task-master next [options]`
*   **Description:** `Ask Taskmaster to show the next available task you can work on, based on status and completed dependencies.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Identify what to work on next according to the plan.

### 5. Get Task Details (`get_task`)

*   **MCP Tool:** `get_task`
*   **CLI Command:** `task-master show [id] [options]`
*   **Description:** `Display detailed information for a specific Taskmaster task or subtask by its ID.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to view.` (CLI: `[id]` positional or `-i, --id <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Understand the full details, implementation notes, and test strategy for a specific task before starting work.

---

## Task Creation & Modification

### 6. Add Task (`add_task`)

*   **MCP Tool:** `add_task`
*   **CLI Command:** `task-master add-task [options]`
*   **Description:** `Add a new task to Taskmaster by describing it; AI will structure it.`
*   **Key Parameters/Options:**
    *   `prompt`: `Required. Describe the new task you want Taskmaster to create, e.g., "Implement user authentication using JWT".` (CLI: `-p, --prompt <text>`)
    *   `dependencies`: `Specify the IDs of any Taskmaster tasks that must be completed before this new one can start, e.g., '12,14'.` (CLI: `-d, --dependencies <ids>`)
    *   `priority`: `Set the priority for the new task: 'high', 'medium', or 'low'. Default is 'medium'.` (CLI: `--priority <priority>`)
    *   `research`: `Enable Taskmaster to use the research role for potentially more informed task creation.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Quickly add newly identified tasks during development.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 7. Add Subtask (`add_subtask`)

*   **MCP Tool:** `add_subtask`
*   **CLI Command:** `task-master add-subtask [options]`
*   **Description:** `Add a new subtask to a Taskmaster parent task, or convert an existing task into a subtask.`
*   **Key Parameters/Options:**
    *   `id` / `parent`: `Required. The ID of the Taskmaster task that will be the parent.` (MCP: `id`, CLI: `-p, --parent <id>`)
    *   `taskId`: `Use this if you want to convert an existing top-level Taskmaster task into a subtask of the specified parent.` (CLI: `-i, --task-id <id>`)
    *   `title`: `Required if not using taskId. The title for the new subtask Taskmaster should create.` (CLI: `-t, --title <title>`)
    *   `description`: `A brief description for the new subtask.` (CLI: `-d, --description <text>`)
    *   `details`: `Provide implementation notes or details for the new subtask.` (CLI: `--details <text>`)
    *   `dependencies`: `Specify IDs of other tasks or subtasks, e.g., '15' or '16.1', that must be done before this new subtask.` (CLI: `--dependencies <ids>`)
    *   `status`: `Set the initial status for the new subtask. Default is 'pending'.` (CLI: `-s, --status <status>`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after adding the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Break down tasks manually or reorganize existing tasks.

### 8. Update Tasks (`update`)

*   **MCP Tool:** `update`
*   **CLI Command:** `task-master update [options]`
*   **Description:** `Update multiple upcoming tasks in Taskmaster based on new context or changes, starting from a specific task ID.`
*   **Key Parameters/Options:**
    *   `from`: `Required. The ID of the first task Taskmaster should update. All tasks with this ID or higher that are not 'done' will be considered.` (CLI: `--from <id>`)
    *   `prompt`: `Required. Explain the change or new context for Taskmaster to apply to the tasks, e.g., "We are now using React Query instead of Redux Toolkit for data fetching".` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Handle significant implementation changes or pivots that affect multiple future tasks. Example CLI: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 9. Update Task (`update_task`)

*   **MCP Tool:** `update_task`
*   **CLI Command:** `task-master update-task [options]`
*   **Description:** `Modify a specific Taskmaster task or subtask by its ID, incorporating new information or changes.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to update.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Explain the specific changes or provide the new information Taskmaster should incorporate into this task.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Refine a specific task based on new understanding or feedback. Example CLI: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 10. Update Subtask (`update_subtask`)

*   **MCP Tool:** `update_subtask`
*   **CLI Command:** `task-master update-subtask [options]`
*   **Description:** `Append timestamped notes or details to a specific Taskmaster subtask without overwriting existing content. Intended for iterative implementation logging.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster subtask, e.g., '15.2', you want to add information to.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Provide the information or notes Taskmaster should append to the subtask's details. Ensure this adds *new* information not already present.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Add implementation notes, code snippets, or clarifications to a subtask during development. Before calling, review the subtask's current details to append only fresh insights, helping to build a detailed log of the implementation journey and avoid redundancy. Example CLI: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 11. Set Task Status (`set_task_status`)

*   **MCP Tool:** `set_task_status`
*   **CLI Command:** `task-master set-status [options]`
*   **Description:** `Update the status of one or more Taskmaster tasks or subtasks, e.g., 'pending', 'in-progress', 'done'.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster task(s) or subtask(s), e.g., '15', '15.2', or '16,17.1', to update.` (CLI: `-i, --id <id>`)
    *   `status`: `Required. The new status to set, e.g., 'done', 'pending', 'in-progress', 'review', 'cancelled'.` (CLI: `-s, --status <status>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Mark progress as tasks move through the development cycle.

### 12. Remove Task (`remove_task`)

*   **MCP Tool:** `remove_task`
*   **CLI Command:** `task-master remove-task [options]`
*   **Description:** `Permanently remove a task or subtask from the Taskmaster tasks list.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '5', or subtask, e.g., '5.2', to permanently remove.` (CLI: `-i, --id <id>`)
    *   `yes`: `Skip the confirmation prompt and immediately delete the task.` (CLI: `-y, --yes`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Permanently delete tasks or subtasks that are no longer needed in the project.
*   **Notes:** Use with caution as this operation cannot be undone. Consider using 'blocked', 'cancelled', or 'deferred' status instead if you just want to exclude a task from active planning but keep it for reference. The command automatically cleans up dependency references in other tasks.

---

## Task Structure & Breakdown

### 13. Expand Task (`expand_task`)

*   **MCP Tool:** `expand_task`
*   **CLI Command:** `task-master expand [options]`
*   **Description:** `Use Taskmaster's AI to break down a complex task into smaller, manageable subtasks. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `id`: `The ID of the specific Taskmaster task you want to break down into subtasks.` (CLI: `-i, --id <id>`)
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create. Uses complexity analysis/defaults otherwise.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context or specific instructions to Taskmaster for generating the subtasks.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Generate a detailed implementation plan for a complex task before starting coding. Automatically uses complexity report recommendations if available and `num` is not specified.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 14. Expand All Tasks (`expand_all`)

*   **MCP Tool:** `expand_all`
*   **CLI Command:** `task-master expand --all [options]` (Note: CLI uses the `expand` command with the `--all` flag)
*   **Description:** `Tell Taskmaster to automatically expand all eligible pending/in-progress tasks based on complexity analysis or defaults. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create per task.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context for Taskmaster to apply generally during expansion.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones for each eligible task. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Useful after initial task generation or complexity analysis to break down multiple tasks at once.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 15. Clear Subtasks (`clear_subtasks`)

*   **MCP Tool:** `clear_subtasks`
*   **CLI Command:** `task-master clear-subtasks [options]`
*   **Description:** `Remove all subtasks from one or more specified Taskmaster parent tasks.`
*   **Key Parameters/Options:**
    *   `id`: `The ID(s) of the Taskmaster parent task(s) whose subtasks you want to remove, e.g., '15' or '16,18'. Required unless using `all`.) (CLI: `-i, --id <ids>`)
    *   `all`: `Tell Taskmaster to remove subtasks from all parent tasks.` (CLI: `--all`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before regenerating subtasks with `expand_task` if the previous breakdown needs replacement.

### 16. Remove Subtask (`remove_subtask`)

*   **MCP Tool:** `remove_subtask`
*   **CLI Command:** `task-master remove-subtask [options]`
*   **Description:** `Remove a subtask from its Taskmaster parent, optionally converting it into a standalone task.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster subtask(s) to remove, e.g., '15.2' or '16.1,16.3'.` (CLI: `-i, --id <id>`)
    *   `convert`: `If used, Taskmaster will turn the subtask into a regular top-level task instead of deleting it.` (CLI: `-c, --convert`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after removing the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Delete unnecessary subtasks or promote a subtask to a top-level task.

### 17. Move Task (`move_task`)

*   **MCP Tool:** `move_task`
*   **CLI Command:** `task-master move [options]`
*   **Description:** `Move a task or subtask to a new position within the task hierarchy.`
*   **Key Parameters/Options:**
    *   `from`: `Required. ID of the task/subtask to move (e.g., "5" or "5.2"). Can be comma-separated for multiple tasks.` (CLI: `--from <id>`)
    *   `to`: `Required. ID of the destination (e.g., "7" or "7.3"). Must match the number of source IDs if comma-separated.` (CLI: `--to <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Reorganize tasks by moving them within the hierarchy. Supports various scenarios like:
    *   Moving a task to become a subtask
    *   Moving a subtask to become a standalone task
    *   Moving a subtask to a different parent
    *   Reordering subtasks within the same parent
    *   Moving a task to a new, non-existent ID (automatically creates placeholders)
    *   Moving multiple tasks at once with comma-separated IDs
*   **Validation Features:**
    *   Allows moving tasks to non-existent destination IDs (creates placeholder tasks)
    *   Prevents moving to existing task IDs that already have content (to avoid overwriting)
    *   Validates that source tasks exist before attempting to move them
    *   Maintains proper parent-child relationships
*   **Example CLI:** `task-master move --from=5.2 --to=7.3` to move subtask 5.2 to become subtask 7.3.
*   **Example Multi-Move:** `task-master move --from=10,11,12 --to=16,17,18` to move multiple tasks to new positions.
*   **Common Use:** Resolving merge conflicts in tasks.json when multiple team members create tasks on different branches.

---

## Dependency Management

### 18. Add Dependency (`add_dependency`)

*   **MCP Tool:** `add_dependency`
*   **CLI Command:** `task-master add-dependency [options]`
*   **Description:** `Define a dependency in Taskmaster, making one task a prerequisite for another.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task that will depend on another.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that must be completed first, the prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <path>`)
*   **Usage:** Establish the correct order of execution between tasks.

### 19. Remove Dependency (`remove_dependency`)

*   **MCP Tool:** `remove_dependency`
*   **CLI Command:** `task-master remove-dependency [options]`
*   **Description:** `Remove a dependency relationship between two Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task you want to remove a prerequisite from.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that should no longer be a prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Update task relationships when the order of execution changes.

### 20. Validate Dependencies (`validate_dependencies`)

*   **MCP Tool:** `validate_dependencies`
*   **CLI Command:** `task-master validate-dependencies [options]`
*   **Description:** `Check your Taskmaster tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Audit the integrity of your task dependencies.

### 21. Fix Dependencies (`fix_dependencies`)

*   **MCP Tool:** `fix_dependencies`
*   **CLI Command:** `task-master fix-dependencies [options]`
*   **Description:** `Automatically fix dependency issues (like circular references or links to non-existent tasks) in your Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Clean up dependency errors automatically.

---

## Analysis & Reporting

### 22. Analyze Project Complexity (`analyze_project_complexity`)

*   **MCP Tool:** `analyze_project_complexity`
*   **CLI Command:** `task-master analyze-complexity [options]`
*   **Description:** `Have Taskmaster analyze your tasks to determine their complexity and suggest which ones need to be broken down further.`
*   **Key Parameters/Options:**
    *   `output`: `Where to save the complexity analysis report (default: '.taskmaster/reports/task-complexity-report.json').` (CLI: `-o, --output <file>`)
    *   `threshold`: `The minimum complexity score (1-10) that should trigger a recommendation to expand a task.` (CLI: `-t, --threshold <number>`)
    *   `research`: `Enable research role for more accurate complexity analysis. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before breaking down tasks to identify which ones need the most attention.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 23. View Complexity Report (`complexity_report`)

*   **MCP Tool:** `complexity_report`
*   **CLI Command:** `task-master complexity-report [options]`
*   **Description:** `Display the task complexity analysis report in a readable format.`
*   **Key Parameters/Options:**
    *   `file`: `Path to the complexity report (default: '.taskmaster/reports/task-complexity-report.json').` (CLI: `-f, --file <file>`)
*   **Usage:** Review and understand the complexity analysis results after running analyze-complexity.

---

## File Management

### 24. Generate Task Files (`generate`)

*   **MCP Tool:** `generate`
*   **CLI Command:** `task-master generate [options]`
*   **Description:** `Create or update individual Markdown files for each task based on your tasks.json.`
*   **Key Parameters/Options:**
    *   `output`: `The directory where Taskmaster should save the task files (default: in a 'tasks' directory).` (CLI: `-o, --output <directory>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Run this after making changes to tasks.json to keep individual task files up to date.

---

## Environment Variables Configuration (Updated)

Taskmaster primarily uses the **`.taskmaster/config.json`** file (in project root) for configuration (models, parameters, logging level, etc.), managed via `task-master models --setup`.

Environment variables are used **only** for sensitive API keys related to AI providers and specific overrides like the Ollama base URL:

*   **API Keys (Required for corresponding provider):**
    *   `ANTHROPIC_API_KEY`
    *   `PERPLEXITY_API_KEY`
    *   `OPENAI_API_KEY`
    *   `GOOGLE_API_KEY`
    *   `MISTRAL_API_KEY`
    *   `AZURE_OPENAI_API_KEY` (Requires `AZURE_OPENAI_ENDPOINT` too)
    *   `OPENROUTER_API_KEY`
    *   `XAI_API_KEY`
    *   `OLLANA_API_KEY` (Requires `OLLAMA_BASE_URL` too)
*   **Endpoints (Optional/Provider Specific inside .taskmaster/config.json):**
    *   `AZURE_OPENAI_ENDPOINT`
    *   `OLLAMA_BASE_URL` (Default: `http://localhost:11434/api`)

**Set API keys** in your **`.env`** file in the project root (for CLI use) or within the `env` section of your **`.roo/mcp.json`** file (for MCP/Roo Code integration). All other settings (model choice, max tokens, temperature, log level, custom endpoints) are managed in `.taskmaster/config.json` via `task-master models` command or `models` MCP tool.

---

For details on how these commands fit into the development process, see the [Development Workflow Guide](mdc:.roo/rules/dev_workflow.md).

================
File: .roomodes
================
{
  "customModes": [
    {
      "slug": "boomerang",
      "name": "Boomerang",
      "roleDefinition": "You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, also your own, and with the information given by the user and other modes in shared context you are enabled to effectively break down complex problems into discrete tasks that can be solved by different specialists using the `taskmaster-ai` system for task and context management.",
      "customInstructions": "Your role is to coordinate complex workflows by delegating tasks to specialized modes, using `taskmaster-ai` as the central hub for task definition, progress tracking, and context management. \nAs an orchestrator, you should:\nn1. When given a complex task, use contextual information (which gets updated frequently) to break it down into logical subtasks that can be delegated to appropriate specialized modes.\nn2. For each subtask, use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. \nThese instructions must include:\n*   All necessary context from the parent task or previous subtasks required to complete the work.\n*   A clearly defined scope, specifying exactly what the subtask should accomplish.\n*   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n*   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to further relay this information to other tasks and for you to keep track of what was completed on this project.\nn3. Track and manage the progress of all subtasks. When a subtask is completed, acknowledge its results and determine the next steps.\nn4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\nn5. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively. If it seems complex delegate to architect to accomplish that \nn6. Use subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one.",
      "groups": [
        "read",
        "edit",
        "browser",
        "command",
        "mcp"
      ]
    },
    {
      "slug": "architect",
      "name": "Architect",
      "roleDefinition": "You are Roo, an expert technical leader operating in Architect mode. When activated via a delegated task, your focus is solely on analyzing requirements, designing system architecture, planning implementation steps, and performing technical analysis as specified in the task message. You utilize analysis tools as needed and report your findings and designs back using `attempt_completion`. You do not deviate from the delegated task scope.",
      "customInstructions": "1. Do some information gathering (for example using read_file or search_files) to get more context about the task.\n\n2. You should also ask the user clarifying questions to get a better understanding of the task.\n\n3. Once you've gained more context about the user's request, you should create a detailed plan for how to accomplish the task. Include Mermaid diagrams if they help make your plan clearer.\n\n4. Ask the user if they are pleased with this plan, or if they would like to make any changes. Think of this as a brainstorming session where you can discuss the task and plan the best way to accomplish it.\n\n5. Once the user confirms the plan, ask them if they'd like you to write it to a markdown file.\n\n6. Use the switch_mode tool to request that the user switch to another mode to implement the solution.",
      "groups": [
        "read",
        ["edit", { "fileRegex": "\\.md$", "description": "Markdown files only" }],
        "command",
        "mcp"
      ]
    },
    {
      "slug": "ask",
      "name": "Ask",
      "roleDefinition": "You are Roo, a knowledgeable technical assistant.\nWhen activated by another mode via a delegated task, your focus is to research, analyze, and provide clear, concise answers or explanations based *only* on the specific information requested in the delegation message. Use available tools for information gathering and report your findings back using `attempt_completion`.",
      "customInstructions": "You can analyze code, explain concepts, and access external resources. Make sure to answer the user's questions and don't rush to switch to implementing code. Include Mermaid diagrams if they help make your response clearer.",
      "groups": [
        "read",
        "browser",
        "mcp"
      ]
    },
    {
      "slug": "debug",
      "name": "Debug",
      "roleDefinition": "You are Roo, an expert software debugger specializing in systematic problem diagnosis and resolution. When activated by another mode, your task is to meticulously analyze the provided debugging request (potentially referencing Taskmaster tasks, logs, or metrics), use diagnostic tools as instructed to investigate the issue, identify the root cause, and report your findings and recommended next steps back via `attempt_completion`. You focus solely on diagnostics within the scope defined by the delegated task.",
      "customInstructions": "Reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions. Explicitly ask the user to confirm the diagnosis before fixing the problem.",
      "groups": [
        "read",
        "edit",
        "command",
        "mcp"
      ]
    },
    {
      "slug": "test",
      "name": "Test",
      "roleDefinition": "You are Roo, an expert software tester. Your primary focus is executing testing tasks delegated to you by other modes.\nAnalyze the provided scope and context (often referencing a Taskmaster task ID and its `testStrategy`), develop test plans if needed, execute tests diligently, and report comprehensive results (pass/fail, bugs, coverage) back using `attempt_completion`. You operate strictly within the delegated task's boundaries.",
      "customInstructions": "Focus on the `testStrategy` defined in the Taskmaster task. Develop and execute test plans accordingly. Report results clearly, including pass/fail status, bug details, and coverage information.",
      "groups": [
        "read",
        "command",
        "mcp"
      ]
    }
  ]
}

================
File: .taskmaster/config.json
================
{
  "models": {
    "main": {
      "provider": "openai",
      "modelId": "gpt-4o-mini",
      "maxTokens": 120000,
      "temperature": 0.2
    },
    "research": {
      "provider": "perplexity",
      "modelId": "sonar-pro",
      "maxTokens": 8700,
      "temperature": 0.1
    },
    "fallback": {
      "provider": "anthropic",
      "modelId": "claude-3-5-sonnet-20240620",
      "maxTokens": 8192,
      "temperature": 0.1
    }
  },
  "global": {
    "logLevel": "info",
    "debug": false,
    "defaultSubtasks": 5,
    "defaultPriority": "medium",
    "projectName": "Taskmaster",
    "ollamaBaseURL": "http://localhost:11434/api",
    "bedrockBaseURL": "https://bedrock.us-east-1.amazonaws.com",
    "azureOpenaiBaseURL": "https://your-endpoint.openai.azure.com/",
    "userId": "1234567890"
  }
}

================
File: .taskmaster/docs/prd.txt
================
# Overview
模块化课程设计与管理平台 (Course Builder) 是一个高度灵活、可定制的在线课程构建工具。赋能教育者、培训师和内容创作者，让他们能够高效地设计、组合、管理和分享结构化、模块化的教学内容。

目标用户为系统管理员和课程组织者，专注于建立和管理教学内容，而非面向最终学习者。

# Core Features

## 1. Course Management
- 课程作为顶层容器，包含课程名称、分类、封面图、简介、目标学员、前置要求
- 灵活组合教材、教学计划、教学目标和教学方法构成完整课程
- 支持模板和CSV/Excel批量导入课程信息
- 卡片式布局展示，支持AJAX异步查询、搜索、筛选和分页

## 2. Book/Material Library
- 中心化教材库，包含书名、作者、分类、封面、描述、标签
- 支持批量导入书目信息
- 一本教材可关联多个词汇集
- 可复用于不同课程

## 3. Vocabulary Management
- 包含单词、词性、释义、等级(CEFR)等属性
- 支持批量导入(单词,词性,释义格式)
- 词汇集分组功能，一个词汇可属于多个词汇集
- 词汇集可关联多本教材

## 4. Schedule Design
- 教学计划包含总周数、每周课时数、单次课时长
- 提供预设模板(如"标准12周研讨课")
- 日历视图展示教学进度
- 每节课详细设计：学习目标、教学方法、任务作业、关联教材章节、关联词汇集
- 出勤记录功能

## 5. Objective Library
- 可复用的教学目标库
- 包含目标名称、描述、状态(规划中/进行中/已存档)
- 确保教学连贯性和一致性

## 6. Method Library
- 教学方法库(PBL、翻转课堂、小组讨论等)
- 包含方法名称和详细描述
- 供教师在设计课时活动时参考选用

## 7. Task/Activity Library
- 标准化任务库，包含测验、作业、阅读、写作等分类
- 任务名称、描述、分类属性
- 方便在教学计划中快速添加和复用

## 8. Platform Common Features
- 所有列表页采用卡片式布局
- AJAX异步查询，流畅的搜索筛选体验
- 批量修改功能
- 创建/编辑页面内即时创建新分类
- 所有核心对象可生成公开分享链接
- 供利益相关者查看分析数据

# User Experience
主要用户为系统管理员和课程组织者，需要：
- 直观的内容管理界面
- 高效的批量操作功能
- 灵活的模块化组合能力
- 清晰的数据展示和分析

用户工作流：
1. 建立教材库和词汇库
2. 创建教学目标和方法库
3. 设计教学计划模板
4. 组合各模块创建完整课程
5. 管理和分享课程内容

# Technical Architecture
- Frontend: Next.js, React, TypeScript, Tailwind CSS
- Backend/Database: Supabase (database, auth, storage, serverless functions)
- 简约页面风格设计
- 所有代码注释使用英文
- 数据设计遵循简单使用逻辑，避免过度复杂化

核心数据模型：
- Course (课程)
- Book (教材)
- Vocabulary & VocabularyGroup (词汇和词汇集)
- Schedule & Lesson (教学计划和课时)
- Objective (教学目标)
- Method (教学方法)
- Task (任务活动)
- Category (分类)

# Development Roadmap

## Phase 1: MVP Foundation
- 基础项目架构搭建(Next.js + Supabase)
- 用户认证系统
- 核心数据模型设计和数据库schema
- 基础UI组件库(卡片、表单、列表等)

## Phase 2: Core Content Management
- Course管理功能
- Book库管理功能
- Vocabulary管理功能
- 基础CRUD操作界面

## Phase 3: Advanced Features
- Schedule设计和日历视图
- Objective和Method库
- Task库管理
- 批量导入功能

## Phase 4: User Experience Enhancement
- 高级搜索和筛选
- 批量操作功能
- 公开分享链接
- 数据分析和报表

## Phase 5: Integration & Optimization
- 模块间关联功能完善
- 性能优化
- 用户体验细节优化
- 测试和部署

# Logical Dependency Chain
1. 项目基础架构 → 认证系统 → 数据库设计
2. 基础UI组件 → 核心CRUD功能
3. 独立模块(Course, Book, Vocabulary) → 关联功能
4. 高级功能(Schedule, 批量操作) → 用户体验优化
5. 集成测试 → 部署上线

快速到达可用前端的策略：
- 先实现Course管理的基础展示
- 快速构建卡片式列表界面
- 实现基本的增删改查功能
- 逐步添加高级特性

# Risks and Mitigations
- 技术风险：Supabase集成复杂度 → 从简单功能开始，逐步集成
- 数据设计风险：过度复杂化 → 遵循简单原则，避免过度设计
- 用户体验风险：功能过于复杂 → 分阶段发布，收集反馈
- 性能风险：大量数据加载 → 实现分页和异步加载

MVP关键要素：
- 能够创建和管理课程
- 基础的教材和词汇管理
- 简单直观的用户界面
- 稳定的数据存储

# Appendix
项目位置：D:\dev\cursor\course builder\
使用Supabase MCP功能进行数据库连接和管理
注重教学内容管理而非学习者交互
支持中英文内容但代码注释使用英文

================
File: .taskmaster/templates/example_prd.txt
================
<context>
# Overview  
[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]

# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>

================
File: .windsurfrules
================
Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

---
DEV_WORKFLOW
---
description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Global CLI Commands**
  - Task Master now provides a global CLI through the `task-master` command
  - All functionality from `scripts/dev.js` is available through this interface
  - Install globally with `npm install -g claude-task-master` or use locally via `npx`
  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
  - Examples:
    - `task-master list` instead of `node scripts/dev.js list`
    - `task-master next` instead of `node scripts/dev.js next`
    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
  - All commands accept the same options as their script equivalents
  - The CLI provides additional commands like `task-master init` for project setup

- **Development Workflow Process**
  - Start new projects by running `task-master init` or `node scripts/dev.js parse-prd --input=<prd-file.txt>` to generate initial tasks.json
  - Begin coding sessions with `task-master list` to see current tasks, status, and IDs
  - Analyze task complexity with `task-master analyze-complexity --research` before breaking down tasks
  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order
  - Clarify tasks by checking task files in tasks/ directory or asking for user input
  - View specific task details using `task-master show <id>` to understand implementation requirements
  - Break down complex tasks using `task-master expand --id=<id>` with appropriate flags
  - Clear existing subtasks if needed using `task-master clear-subtasks --id=<id>` before regenerating
  - Implement code following task details, dependencies, and project standards
  - Verify tasks according to test strategies before marking as complete
  - Mark completed tasks with `task-master set-status --id=<id> --status=done`
  - Update dependent tasks when implementation differs from original plan
  - Generate task files with `task-master generate` after updating tasks.json
  - Maintain valid dependency structure with `task-master fix-dependencies` when needed
  - Respect dependency chains and task priorities when selecting work
  - Report progress regularly using the list command

- **Task Complexity Analysis**
  - Run `node scripts/dev.js analyze-complexity --research` for comprehensive analysis
  - Review complexity report in scripts/task-complexity-report.json
  - Or use `node scripts/dev.js complexity-report` for a formatted, readable version of the report
  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown
  - Use analysis results to determine appropriate subtask allocation
  - Note that reports are automatically used by the expand command

- **Task Breakdown Process**
  - For tasks with complexity analysis, use `node scripts/dev.js expand --id=<id>`
  - Otherwise use `node scripts/dev.js expand --id=<id> --subtasks=<number>`
  - Add `--research` flag to leverage Perplexity AI for research-backed expansion
  - Use `--prompt="<context>"` to provide additional context when needed
  - Review and adjust generated subtasks as necessary
  - Use `--all` flag to expand multiple pending tasks at once
  - If subtasks need regeneration, clear them first with `clear-subtasks` command

- **Implementation Drift Handling**
  - When implementation differs significantly from planned approach
  - When future tasks need modification due to current implementation choices
  - When new dependencies or requirements emerge
  - Call `node scripts/dev.js update --from=<futureTaskId> --prompt="<explanation>"` to update tasks.json

- **Task Status Management**
  - Use 'pending' for tasks ready to be worked on
  - Use 'done' for completed and verified tasks
  - Use 'deferred' for postponed tasks
  - Add custom status values as needed for project-specific workflows

- **Task File Format Reference**
  ```
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  # Details:
  <detailed implementation notes>
  
  # Test Strategy:
  <verification approach>
  ```

- **Command Reference: parse-prd**
  - Legacy Syntax: `node scripts/dev.js parse-prd --input=<prd-file.txt>`
  - CLI Syntax: `task-master parse-prd --input=<prd-file.txt>`
  - Description: Parses a PRD document and generates a tasks.json file with structured tasks
  - Parameters: 
    - `--input=<file>`: Path to the PRD text file (default: sample-prd.txt)
  - Example: `task-master parse-prd --input=requirements.txt`
  - Notes: Will overwrite existing tasks.json file. Use with caution.

- **Command Reference: update**
  - Legacy Syntax: `node scripts/dev.js update --from=<id> --prompt="<prompt>"`
  - CLI Syntax: `task-master update --from=<id> --prompt="<prompt>"`
  - Description: Updates tasks with ID >= specified ID based on the provided prompt
  - Parameters:
    - `--from=<id>`: Task ID from which to start updating (required)
    - `--prompt="<text>"`: Explanation of changes or new context (required)
  - Example: `task-master update --from=4 --prompt="Now we are using Express instead of Fastify."`
  - Notes: Only updates tasks not marked as 'done'. Completed tasks remain unchanged.

- **Command Reference: generate**
  - Legacy Syntax: `node scripts/dev.js generate`
  - CLI Syntax: `task-master generate`
  - Description: Generates individual task files in tasks/ directory based on tasks.json
  - Parameters: 
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
    - `--output=<dir>, -o`: Output directory (default: 'tasks')
  - Example: `task-master generate`
  - Notes: Overwrites existing task files. Creates tasks/ directory if needed.

- **Command Reference: set-status**
  - Legacy Syntax: `node scripts/dev.js set-status --id=<id> --status=<status>`
  - CLI Syntax: `task-master set-status --id=<id> --status=<status>`
  - Description: Updates the status of a specific task in tasks.json
  - Parameters:
    - `--id=<id>`: ID of the task to update (required)
    - `--status=<status>`: New status value (required)
  - Example: `task-master set-status --id=3 --status=done`
  - Notes: Common values are 'done', 'pending', and 'deferred', but any string is accepted.

- **Command Reference: list**
  - Legacy Syntax: `node scripts/dev.js list`
  - CLI Syntax: `task-master list`
  - Description: Lists all tasks in tasks.json with IDs, titles, and status
  - Parameters: 
    - `--status=<status>, -s`: Filter by status
    - `--with-subtasks`: Show subtasks for each task
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master list`
  - Notes: Provides quick overview of project progress. Use at start of sessions.

- **Command Reference: expand**
  - Legacy Syntax: `node scripts/dev.js expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - CLI Syntax: `task-master expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - Description: Expands a task with subtasks for detailed implementation
  - Parameters:
    - `--id=<id>`: ID of task to expand (required unless using --all)
    - `--all`: Expand all pending tasks, prioritized by complexity
    - `--num=<number>`: Number of subtasks to generate (default: from complexity report)
    - `--research`: Use Perplexity AI for research-backed generation
    - `--prompt="<text>"`: Additional context for subtask generation
    - `--force`: Regenerate subtasks even for tasks that already have them
  - Example: `task-master expand --id=3 --num=5 --research --prompt="Focus on security aspects"`
  - Notes: Uses complexity report recommendations if available.

- **Command Reference: analyze-complexity**
  - Legacy Syntax: `node scripts/dev.js analyze-complexity [options]`
  - CLI Syntax: `task-master analyze-complexity [options]`
  - Description: Analyzes task complexity and generates expansion recommendations
  - Parameters:
    - `--output=<file>, -o`: Output file path (default: scripts/task-complexity-report.json)
    - `--model=<model>, -m`: Override LLM model to use
    - `--threshold=<number>, -t`: Minimum score for expansion recommendation (default: 5)
    - `--file=<path>, -f`: Use alternative tasks.json file
    - `--research, -r`: Use Perplexity AI for research-backed analysis
  - Example: `task-master analyze-complexity --research`
  - Notes: Report includes complexity scores, recommended subtasks, and tailored prompts.

- **Command Reference: clear-subtasks**
  - Legacy Syntax: `node scripts/dev.js clear-subtasks --id=<id>`
  - CLI Syntax: `task-master clear-subtasks --id=<id>`
  - Description: Removes subtasks from specified tasks to allow regeneration
  - Parameters:
    - `--id=<id>`: ID or comma-separated IDs of tasks to clear subtasks from
    - `--all`: Clear subtasks from all tasks
  - Examples:
    - `task-master clear-subtasks --id=3`
    - `task-master clear-subtasks --id=1,2,3`
    - `task-master clear-subtasks --all`
  - Notes: 
    - Task files are automatically regenerated after clearing subtasks
    - Can be combined with expand command to immediately generate new subtasks
    - Works with both parent tasks and individual subtasks

- **Task Structure Fields**
  - **id**: Unique identifier for the task (Example: `1`)
  - **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
  - **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
  - **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
  - **dependencies**: IDs of prerequisite tasks (Example: `[1, 2]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
  - **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
  - **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
  - **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
  - **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)

- **Environment Variables Configuration**
  - **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude (Example: `ANTHROPIC_API_KEY=sk-ant-api03-...`)
  - **MODEL** (Default: `"claude-3-7-sonnet-20250219"`): Claude model to use (Example: `MODEL=claude-3-opus-20240229`)
  - **MAX_TOKENS** (Default: `"4000"`): Maximum tokens for responses (Example: `MAX_TOKENS=8000`)
  - **TEMPERATURE** (Default: `"0.7"`): Temperature for model responses (Example: `TEMPERATURE=0.5`)
  - **DEBUG** (Default: `"false"`): Enable debug logging (Example: `DEBUG=true`)
  - **TASKMASTER_LOG_LEVEL** (Default: `"info"`): Console output level (Example: `TASKMASTER_LOG_LEVEL=debug`)
  - **DEFAULT_SUBTASKS** (Default: `"3"`): Default subtask count (Example: `DEFAULT_SUBTASKS=5`)
  - **DEFAULT_PRIORITY** (Default: `"medium"`): Default priority (Example: `DEFAULT_PRIORITY=high`)
  - **PROJECT_NAME** (Default: `"MCP SaaS MVP"`): Project name in metadata (Example: `PROJECT_NAME=My Awesome Project`)
  - **PROJECT_VERSION** (Default: `"1.0.0"`): Version in metadata (Example: `PROJECT_VERSION=2.1.0`)
  - **PERPLEXITY_API_KEY**: For research-backed features (Example: `PERPLEXITY_API_KEY=pplx-...`)
  - **PERPLEXITY_MODEL** (Default: `"sonar-medium-online"`): Perplexity model (Example: `PERPLEXITY_MODEL=sonar-large-online`)

- **Determining the Next Task**
  - Run `task-master next` to show the next task to work on
  - The next command identifies tasks with all dependencies satisfied
  - Tasks are prioritized by priority level, dependency count, and ID
  - The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
  - Recommended before starting any new development work
  - Respects your project's dependency structure
  - Ensures tasks are completed in the appropriate sequence
  - Provides ready-to-use commands for common task actions

- **Viewing Specific Task Details**
  - Run `task-master show <id>` or `task-master show --id=<id>` to view a specific task
  - Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
  - Displays comprehensive information similar to the next command, but for a specific task
  - For parent tasks, shows all subtasks and their current status
  - For subtasks, shows parent task information and relationship
  - Provides contextual suggested actions appropriate for the specific task
  - Useful for examining task details before implementation or checking status

- **Managing Task Dependencies**
  - Use `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency
  - Use `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency
  - The system prevents circular dependencies and duplicate dependency entries
  - Dependencies are checked for existence before being added or removed
  - Task files are automatically regenerated after dependency changes
  - Dependencies are visualized with status indicators in task listings and files

- **Command Reference: add-dependency**
  - Legacy Syntax: `node scripts/dev.js add-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master add-dependency --id=<id> --depends-on=<id>`
  - Description: Adds a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task that will depend on another task (required)
    - `--depends-on=<id>`: ID of task that will become a dependency (required)
  - Example: `task-master add-dependency --id=22 --depends-on=21`
  - Notes: Prevents circular dependencies and duplicates; updates task files automatically

- **Command Reference: remove-dependency**
  - Legacy Syntax: `node scripts/dev.js remove-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master remove-dependency --id=<id> --depends-on=<id>`
  - Description: Removes a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task to remove dependency from (required)
    - `--depends-on=<id>`: ID of task to remove as a dependency (required)
  - Example: `task-master remove-dependency --id=22 --depends-on=21`
  - Notes: Checks if dependency actually exists; updates task files automatically

- **Command Reference: validate-dependencies**
  - Legacy Syntax: `node scripts/dev.js validate-dependencies [options]`
  - CLI Syntax: `task-master validate-dependencies [options]`
  - Description: Checks for and identifies invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master validate-dependencies`
  - Notes: 
    - Reports all non-existent dependencies and self-dependencies without modifying files
    - Provides detailed statistics on task dependency state
    - Use before fix-dependencies to audit your task structure

- **Command Reference: fix-dependencies**
  - Legacy Syntax: `node scripts/dev.js fix-dependencies [options]`
  - CLI Syntax: `task-master fix-dependencies [options]`
  - Description: Finds and fixes all invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master fix-dependencies`
  - Notes: 
    - Removes references to non-existent tasks and subtasks
    - Eliminates self-dependencies (tasks depending on themselves)
    - Regenerates task files with corrected dependencies
    - Provides detailed report of all fixes made

- **Command Reference: complexity-report**
  - Legacy Syntax: `node scripts/dev.js complexity-report [options]`
  - CLI Syntax: `task-master complexity-report [options]`
  - Description: Displays the task complexity analysis report in a formatted, easy-to-read way
  - Parameters:
    - `--file=<path>, -f`: Path to the complexity report file (default: 'scripts/task-complexity-report.json')
  - Example: `task-master complexity-report`
  - Notes: 
    - Shows tasks organized by complexity score with recommended actions
    - Provides complexity distribution statistics
    - Displays ready-to-use expansion commands for complex tasks
    - If no report exists, offers to generate one interactively

- **Command Reference: add-task**
  - CLI Syntax: `task-master add-task [options]`
  - Description: Add a new task to tasks.json using AI
  - Parameters:
    - `--file=<path>, -f`: Path to the tasks file (default: 'tasks/tasks.json')
    - `--prompt=<text>, -p`: Description of the task to add (required)
    - `--dependencies=<ids>, -d`: Comma-separated list of task IDs this task depends on
    - `--priority=<priority>`: Task priority (high, medium, low) (default: 'medium')
  - Example: `task-master add-task --prompt="Create user authentication using Auth0"`
  - Notes: Uses AI to convert description into structured task with appropriate details

- **Command Reference: init**
  - CLI Syntax: `task-master init`
  - Description: Initialize a new project with Task Master structure
  - Parameters: None
  - Example: `task-master init`
  - Notes: 
    - Creates initial project structure with required files
    - Prompts for project settings if not provided
    - Merges with existing files when appropriate
    - Can be used to bootstrap a new Task Master project quickly

- **Code Analysis & Refactoring Techniques**
  - **Top-Level Function Search**
    - Use grep pattern matching to find all exported functions across the codebase
    - Command: `grep -E "export (function|const) \w+|function \w+\(|const \w+ = \(|module\.exports" --include="*.js" -r ./`
    - Benefits:
      - Quickly identify all public API functions without reading implementation details
      - Compare functions between files during refactoring (e.g., monolithic to modular structure)
      - Verify all expected functions exist in refactored modules
      - Identify duplicate functionality or naming conflicts
    - Usage examples:
      - When migrating from `scripts/dev.js` to modular structure: `grep -E "function \w+\(" scripts/dev.js`
      - Check function exports in a directory: `grep -E "export (function|const)" scripts/modules/`
      - Find potential naming conflicts: `grep -E "function (get|set|create|update)\w+\(" -r ./`
    - Variations:
      - Add `-n` flag to include line numbers
      - Add `--include="*.ts"` to filter by file extension
      - Use with `| sort` to alphabetize results
    - Integration with refactoring workflow:
      - Start by mapping all functions in the source file
      - Create target module files based on function grouping
      - Verify all functions were properly migrated
      - Check for any unintentional duplications or omissions

---
WINDSURF_RULES
---
description: Guidelines for creating and maintaining Windsurf rules to ensure consistency and effectiveness.
globs: .windsurfrules
filesToApplyRule: .windsurfrules
alwaysApply: true
---
The below describes how you should be structuring new rule sections in this document.
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **Section References:**
  - Use `ALL_CAPS_SECTION` to reference files
  - Example: `WINDSURF_RULES`

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

---
SELF_IMPROVE
---
description: Guidelines for continuously improving this rules document based on emerging code patterns and best practices.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding a PRISMA section in the .windsurfrules:
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

Follow WINDSURF_RULES for proper rule formatting and structure of windsurf rule sections.

# Added by Task Master - Development Workflow Rules

Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

---
DEV_WORKFLOW
---
description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Global CLI Commands**
  - Task Master now provides a global CLI through the `task-master` command
  - All functionality from `scripts/dev.js` is available through this interface
  - Install globally with `npm install -g claude-task-master` or use locally via `npx`
  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
  - Examples:
    - `task-master list` instead of `node scripts/dev.js list`
    - `task-master next` instead of `node scripts/dev.js next`
    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
  - All commands accept the same options as their script equivalents
  - The CLI provides additional commands like `task-master init` for project setup

- **Development Workflow Process**
  - Start new projects by running `task-master init` or `node scripts/dev.js parse-prd --input=<prd-file.txt>` to generate initial tasks.json
  - Begin coding sessions with `task-master list` to see current tasks, status, and IDs
  - Analyze task complexity with `task-master analyze-complexity --research` before breaking down tasks
  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order
  - Clarify tasks by checking task files in tasks/ directory or asking for user input
  - View specific task details using `task-master show <id>` to understand implementation requirements
  - Break down complex tasks using `task-master expand --id=<id>` with appropriate flags
  - Clear existing subtasks if needed using `task-master clear-subtasks --id=<id>` before regenerating
  - Implement code following task details, dependencies, and project standards
  - Verify tasks according to test strategies before marking as complete
  - Mark completed tasks with `task-master set-status --id=<id> --status=done`
  - Update dependent tasks when implementation differs from original plan
  - Generate task files with `task-master generate` after updating tasks.json
  - Maintain valid dependency structure with `task-master fix-dependencies` when needed
  - Respect dependency chains and task priorities when selecting work
  - Report progress regularly using the list command

- **Task Complexity Analysis**
  - Run `node scripts/dev.js analyze-complexity --research` for comprehensive analysis
  - Review complexity report in scripts/task-complexity-report.json
  - Or use `node scripts/dev.js complexity-report` for a formatted, readable version of the report
  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown
  - Use analysis results to determine appropriate subtask allocation
  - Note that reports are automatically used by the expand command

- **Task Breakdown Process**
  - For tasks with complexity analysis, use `node scripts/dev.js expand --id=<id>`
  - Otherwise use `node scripts/dev.js expand --id=<id> --subtasks=<number>`
  - Add `--research` flag to leverage Perplexity AI for research-backed expansion
  - Use `--prompt="<context>"` to provide additional context when needed
  - Review and adjust generated subtasks as necessary
  - Use `--all` flag to expand multiple pending tasks at once
  - If subtasks need regeneration, clear them first with `clear-subtasks` command

- **Implementation Drift Handling**
  - When implementation differs significantly from planned approach
  - When future tasks need modification due to current implementation choices
  - When new dependencies or requirements emerge
  - Call `node scripts/dev.js update --from=<futureTaskId> --prompt="<explanation>"` to update tasks.json

- **Task Status Management**
  - Use 'pending' for tasks ready to be worked on
  - Use 'done' for completed and verified tasks
  - Use 'deferred' for postponed tasks
  - Add custom status values as needed for project-specific workflows

- **Task File Format Reference**
  ```
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  # Details:
  <detailed implementation notes>
  
  # Test Strategy:
  <verification approach>
  ```

- **Command Reference: parse-prd**
  - Legacy Syntax: `node scripts/dev.js parse-prd --input=<prd-file.txt>`
  - CLI Syntax: `task-master parse-prd --input=<prd-file.txt>`
  - Description: Parses a PRD document and generates a tasks.json file with structured tasks
  - Parameters: 
    - `--input=<file>`: Path to the PRD text file (default: sample-prd.txt)
  - Example: `task-master parse-prd --input=requirements.txt`
  - Notes: Will overwrite existing tasks.json file. Use with caution.

- **Command Reference: update**
  - Legacy Syntax: `node scripts/dev.js update --from=<id> --prompt="<prompt>"`
  - CLI Syntax: `task-master update --from=<id> --prompt="<prompt>"`
  - Description: Updates tasks with ID >= specified ID based on the provided prompt
  - Parameters:
    - `--from=<id>`: Task ID from which to start updating (required)
    - `--prompt="<text>"`: Explanation of changes or new context (required)
  - Example: `task-master update --from=4 --prompt="Now we are using Express instead of Fastify."`
  - Notes: Only updates tasks not marked as 'done'. Completed tasks remain unchanged.

- **Command Reference: generate**
  - Legacy Syntax: `node scripts/dev.js generate`
  - CLI Syntax: `task-master generate`
  - Description: Generates individual task files in tasks/ directory based on tasks.json
  - Parameters: 
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
    - `--output=<dir>, -o`: Output directory (default: 'tasks')
  - Example: `task-master generate`
  - Notes: Overwrites existing task files. Creates tasks/ directory if needed.

- **Command Reference: set-status**
  - Legacy Syntax: `node scripts/dev.js set-status --id=<id> --status=<status>`
  - CLI Syntax: `task-master set-status --id=<id> --status=<status>`
  - Description: Updates the status of a specific task in tasks.json
  - Parameters:
    - `--id=<id>`: ID of the task to update (required)
    - `--status=<status>`: New status value (required)
  - Example: `task-master set-status --id=3 --status=done`
  - Notes: Common values are 'done', 'pending', and 'deferred', but any string is accepted.

- **Command Reference: list**
  - Legacy Syntax: `node scripts/dev.js list`
  - CLI Syntax: `task-master list`
  - Description: Lists all tasks in tasks.json with IDs, titles, and status
  - Parameters: 
    - `--status=<status>, -s`: Filter by status
    - `--with-subtasks`: Show subtasks for each task
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master list`
  - Notes: Provides quick overview of project progress. Use at start of sessions.

- **Command Reference: expand**
  - Legacy Syntax: `node scripts/dev.js expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - CLI Syntax: `task-master expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - Description: Expands a task with subtasks for detailed implementation
  - Parameters:
    - `--id=<id>`: ID of task to expand (required unless using --all)
    - `--all`: Expand all pending tasks, prioritized by complexity
    - `--num=<number>`: Number of subtasks to generate (default: from complexity report)
    - `--research`: Use Perplexity AI for research-backed generation
    - `--prompt="<text>"`: Additional context for subtask generation
    - `--force`: Regenerate subtasks even for tasks that already have them
  - Example: `task-master expand --id=3 --num=5 --research --prompt="Focus on security aspects"`
  - Notes: Uses complexity report recommendations if available.

- **Command Reference: analyze-complexity**
  - Legacy Syntax: `node scripts/dev.js analyze-complexity [options]`
  - CLI Syntax: `task-master analyze-complexity [options]`
  - Description: Analyzes task complexity and generates expansion recommendations
  - Parameters:
    - `--output=<file>, -o`: Output file path (default: scripts/task-complexity-report.json)
    - `--model=<model>, -m`: Override LLM model to use
    - `--threshold=<number>, -t`: Minimum score for expansion recommendation (default: 5)
    - `--file=<path>, -f`: Use alternative tasks.json file
    - `--research, -r`: Use Perplexity AI for research-backed analysis
  - Example: `task-master analyze-complexity --research`
  - Notes: Report includes complexity scores, recommended subtasks, and tailored prompts.

- **Command Reference: clear-subtasks**
  - Legacy Syntax: `node scripts/dev.js clear-subtasks --id=<id>`
  - CLI Syntax: `task-master clear-subtasks --id=<id>`
  - Description: Removes subtasks from specified tasks to allow regeneration
  - Parameters:
    - `--id=<id>`: ID or comma-separated IDs of tasks to clear subtasks from
    - `--all`: Clear subtasks from all tasks
  - Examples:
    - `task-master clear-subtasks --id=3`
    - `task-master clear-subtasks --id=1,2,3`
    - `task-master clear-subtasks --all`
  - Notes: 
    - Task files are automatically regenerated after clearing subtasks
    - Can be combined with expand command to immediately generate new subtasks
    - Works with both parent tasks and individual subtasks

- **Task Structure Fields**
  - **id**: Unique identifier for the task (Example: `1`)
  - **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
  - **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
  - **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
  - **dependencies**: IDs of prerequisite tasks (Example: `[1, 2]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
  - **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
  - **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
  - **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
  - **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)

- **Environment Variables Configuration**
  - **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude (Example: `ANTHROPIC_API_KEY=sk-ant-api03-...`)
  - **MODEL** (Default: `"claude-3-7-sonnet-20250219"`): Claude model to use (Example: `MODEL=claude-3-opus-20240229`)
  - **MAX_TOKENS** (Default: `"4000"`): Maximum tokens for responses (Example: `MAX_TOKENS=8000`)
  - **TEMPERATURE** (Default: `"0.7"`): Temperature for model responses (Example: `TEMPERATURE=0.5`)
  - **DEBUG** (Default: `"false"`): Enable debug logging (Example: `DEBUG=true`)
  - **TASKMASTER_LOG_LEVEL** (Default: `"info"`): Console output level (Example: `TASKMASTER_LOG_LEVEL=debug`)
  - **DEFAULT_SUBTASKS** (Default: `"3"`): Default subtask count (Example: `DEFAULT_SUBTASKS=5`)
  - **DEFAULT_PRIORITY** (Default: `"medium"`): Default priority (Example: `DEFAULT_PRIORITY=high`)
  - **PROJECT_NAME** (Default: `"MCP SaaS MVP"`): Project name in metadata (Example: `PROJECT_NAME=My Awesome Project`)
  - **PROJECT_VERSION** (Default: `"1.0.0"`): Version in metadata (Example: `PROJECT_VERSION=2.1.0`)
  - **PERPLEXITY_API_KEY**: For research-backed features (Example: `PERPLEXITY_API_KEY=pplx-...`)
  - **PERPLEXITY_MODEL** (Default: `"sonar-medium-online"`): Perplexity model (Example: `PERPLEXITY_MODEL=sonar-large-online`)

- **Determining the Next Task**
  - Run `task-master next` to show the next task to work on
  - The next command identifies tasks with all dependencies satisfied
  - Tasks are prioritized by priority level, dependency count, and ID
  - The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
  - Recommended before starting any new development work
  - Respects your project's dependency structure
  - Ensures tasks are completed in the appropriate sequence
  - Provides ready-to-use commands for common task actions

- **Viewing Specific Task Details**
  - Run `task-master show <id>` or `task-master show --id=<id>` to view a specific task
  - Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
  - Displays comprehensive information similar to the next command, but for a specific task
  - For parent tasks, shows all subtasks and their current status
  - For subtasks, shows parent task information and relationship
  - Provides contextual suggested actions appropriate for the specific task
  - Useful for examining task details before implementation or checking status

- **Managing Task Dependencies**
  - Use `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency
  - Use `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency
  - The system prevents circular dependencies and duplicate dependency entries
  - Dependencies are checked for existence before being added or removed
  - Task files are automatically regenerated after dependency changes
  - Dependencies are visualized with status indicators in task listings and files

- **Command Reference: add-dependency**
  - Legacy Syntax: `node scripts/dev.js add-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master add-dependency --id=<id> --depends-on=<id>`
  - Description: Adds a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task that will depend on another task (required)
    - `--depends-on=<id>`: ID of task that will become a dependency (required)
  - Example: `task-master add-dependency --id=22 --depends-on=21`
  - Notes: Prevents circular dependencies and duplicates; updates task files automatically

- **Command Reference: remove-dependency**
  - Legacy Syntax: `node scripts/dev.js remove-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master remove-dependency --id=<id> --depends-on=<id>`
  - Description: Removes a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task to remove dependency from (required)
    - `--depends-on=<id>`: ID of task to remove as a dependency (required)
  - Example: `task-master remove-dependency --id=22 --depends-on=21`
  - Notes: Checks if dependency actually exists; updates task files automatically

- **Command Reference: validate-dependencies**
  - Legacy Syntax: `node scripts/dev.js validate-dependencies [options]`
  - CLI Syntax: `task-master validate-dependencies [options]`
  - Description: Checks for and identifies invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master validate-dependencies`
  - Notes: 
    - Reports all non-existent dependencies and self-dependencies without modifying files
    - Provides detailed statistics on task dependency state
    - Use before fix-dependencies to audit your task structure

- **Command Reference: fix-dependencies**
  - Legacy Syntax: `node scripts/dev.js fix-dependencies [options]`
  - CLI Syntax: `task-master fix-dependencies [options]`
  - Description: Finds and fixes all invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master fix-dependencies`
  - Notes: 
    - Removes references to non-existent tasks and subtasks
    - Eliminates self-dependencies (tasks depending on themselves)
    - Regenerates task files with corrected dependencies
    - Provides detailed report of all fixes made

- **Command Reference: complexity-report**
  - Legacy Syntax: `node scripts/dev.js complexity-report [options]`
  - CLI Syntax: `task-master complexity-report [options]`
  - Description: Displays the task complexity analysis report in a formatted, easy-to-read way
  - Parameters:
    - `--file=<path>, -f`: Path to the complexity report file (default: 'scripts/task-complexity-report.json')
  - Example: `task-master complexity-report`
  - Notes: 
    - Shows tasks organized by complexity score with recommended actions
    - Provides complexity distribution statistics
    - Displays ready-to-use expansion commands for complex tasks
    - If no report exists, offers to generate one interactively

- **Command Reference: add-task**
  - CLI Syntax: `task-master add-task [options]`
  - Description: Add a new task to tasks.json using AI
  - Parameters:
    - `--file=<path>, -f`: Path to the tasks file (default: 'tasks/tasks.json')
    - `--prompt=<text>, -p`: Description of the task to add (required)
    - `--dependencies=<ids>, -d`: Comma-separated list of task IDs this task depends on
    - `--priority=<priority>`: Task priority (high, medium, low) (default: 'medium')
  - Example: `task-master add-task --prompt="Create user authentication using Auth0"`
  - Notes: Uses AI to convert description into structured task with appropriate details

- **Command Reference: init**
  - CLI Syntax: `task-master init`
  - Description: Initialize a new project with Task Master structure
  - Parameters: None
  - Example: `task-master init`
  - Notes: 
    - Creates initial project structure with required files
    - Prompts for project settings if not provided
    - Merges with existing files when appropriate
    - Can be used to bootstrap a new Task Master project quickly

- **Code Analysis & Refactoring Techniques**
  - **Top-Level Function Search**
    - Use grep pattern matching to find all exported functions across the codebase
    - Command: `grep -E "export (function|const) \w+|function \w+\(|const \w+ = \(|module\.exports" --include="*.js" -r ./`
    - Benefits:
      - Quickly identify all public API functions without reading implementation details
      - Compare functions between files during refactoring (e.g., monolithic to modular structure)
      - Verify all expected functions exist in refactored modules
      - Identify duplicate functionality or naming conflicts
    - Usage examples:
      - When migrating from `scripts/dev.js` to modular structure: `grep -E "function \w+\(" scripts/dev.js`
      - Check function exports in a directory: `grep -E "export (function|const)" scripts/modules/`
      - Find potential naming conflicts: `grep -E "function (get|set|create|update)\w+\(" -r ./`
    - Variations:
      - Add `-n` flag to include line numbers
      - Add `--include="*.ts"` to filter by file extension
      - Use with `| sort` to alphabetize results
    - Integration with refactoring workflow:
      - Start by mapping all functions in the source file
      - Create target module files based on function grouping
      - Verify all functions were properly migrated
      - Check for any unintentional duplications or omissions

---
WINDSURF_RULES
---
description: Guidelines for creating and maintaining Windsurf rules to ensure consistency and effectiveness.
globs: .windsurfrules
filesToApplyRule: .windsurfrules
alwaysApply: true
---
The below describes how you should be structuring new rule sections in this document.
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **Section References:**
  - Use `ALL_CAPS_SECTION` to reference files
  - Example: `WINDSURF_RULES`

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

---
SELF_IMPROVE
---
description: Guidelines for continuously improving this rules document based on emerging code patterns and best practices.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding a PRISMA section in the .windsurfrules:
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

Follow WINDSURF_RULES for proper rule formatting and structure of windsurf rule sections.

================
File: DATABASE_MIGRATION_INSTRUCTIONS.md
================
# Database Migration Instructions

## Issue: Course Detail Page Fallback

If you're experiencing issues with the course detail page immediately falling back to the courses list, it's likely because the `course_objectives` table doesn't exist in your database yet.

## Solution: Run the Course Objectives Migration

### Option 1: Manual SQL Execution
Execute the SQL file in your Supabase dashboard:

1. Go to your Supabase project dashboard
2. Navigate to **SQL Editor**
3. Copy and paste the contents of `migrations/create_course_objectives_table.sql`
4. Click **Run**

### Option 2: Using Supabase CLI (if available)
```bash
supabase db push
```

### Option 3: Direct SQL Query
Copy and paste this SQL into your Supabase SQL editor:

```sql
-- Create course_objectives table for managing course-objective relationships
CREATE TABLE IF NOT EXISTS course_objectives (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    course_id UUID NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
    objective_id UUID NOT NULL REFERENCES objectives(id) ON DELETE CASCADE,
    position INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure unique course-objective combinations
    UNIQUE(course_id, objective_id)
);

-- Create index for performance
CREATE INDEX IF NOT EXISTS idx_course_objectives_course_id ON course_objectives(course_id);
CREATE INDEX IF NOT EXISTS idx_course_objectives_objective_id ON course_objectives(objective_id);
CREATE INDEX IF NOT EXISTS idx_course_objectives_position ON course_objectives(course_id, position);

-- Add RLS (Row Level Security) policies
ALTER TABLE course_objectives ENABLE ROW LEVEL SECURITY;

-- Policy for SELECT (read)
CREATE POLICY "Allow read access to course_objectives" ON course_objectives
    FOR SELECT USING (true);

-- Policy for INSERT (create)
CREATE POLICY "Allow insert of course_objectives" ON course_objectives
    FOR INSERT WITH CHECK (true);

-- Policy for UPDATE (modify)
CREATE POLICY "Allow update of course_objectives" ON course_objectives
    FOR UPDATE USING (true);

-- Policy for DELETE (remove)
CREATE POLICY "Allow delete of course_objectives" ON course_objectives
    FOR DELETE USING (true);
```

## Verification

After running the migration:

1. Refresh your application
2. Try accessing a course detail page
3. The page should now load successfully
4. You can now add objectives to courses using the new ObjectiveSelector component

## Fallback Behavior

If the table still doesn't exist, the application will:
- Display course details without objectives (graceful degradation)
- Show a warning in the console
- Allow normal course functionality to continue

## Features Available After Migration

- ✅ Add/remove objectives to/from courses
- ✅ Reorder course objectives
- ✅ View rich objective details with Bloom's taxonomy
- ✅ Search and filter available objectives
- ✅ Template objective support

================
File: database/functions_and_views.sql
================
-- Course Builder Database Functions and Views
-- Useful helper functions and views for the application

-- Function to generate a unique public slug
CREATE OR REPLACE FUNCTION generate_unique_slug(base_text TEXT, table_name TEXT)
RETURNS TEXT AS $$
DECLARE
    slug TEXT;
    counter INTEGER := 0;
    exists_check BOOLEAN;
BEGIN
    -- Convert to lowercase and replace spaces/special chars with hyphens
    slug := lower(regexp_replace(base_text, '[^a-zA-Z0-9]+', '-', 'g'));
    slug := trim(both '-' from slug);
    
    -- Check if slug exists
    EXECUTE format('SELECT EXISTS(SELECT 1 FROM %I WHERE public_slug = $1)', table_name)
    INTO exists_check
    USING slug;
    
    -- If exists, append counter until unique
    WHILE exists_check LOOP
        counter := counter + 1;
        EXECUTE format('SELECT EXISTS(SELECT 1 FROM %I WHERE public_slug = $1)', table_name)
        INTO exists_check
        USING slug || '-' || counter;
    END LOOP;
    
    IF counter > 0 THEN
        slug := slug || '-' || counter;
    END IF;
    
    RETURN slug;
END;
$$ LANGUAGE plpgsql;

-- Function to calculate course progress
CREATE OR REPLACE FUNCTION calculate_course_progress(course_id_param UUID, user_id_param UUID)
RETURNS TABLE (
    total_lessons INTEGER,
    completed_lessons INTEGER,
    progress_percentage NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*)::INTEGER as total_lessons,
        COUNT(CASE WHEN l.status = 'completed' THEN 1 END)::INTEGER as completed_lessons,
        ROUND(
            CASE 
                WHEN COUNT(*) > 0 
                THEN (COUNT(CASE WHEN l.status = 'completed' THEN 1 END)::NUMERIC / COUNT(*)::NUMERIC) * 100
                ELSE 0
            END, 2
        ) as progress_percentage
    FROM schedules s
    JOIN lessons l ON l.schedule_id = s.id
    WHERE s.course_id = course_id_param
    AND s.user_id = user_id_param;
END;
$$ LANGUAGE plpgsql;

-- View for course overview with statistics
CREATE VIEW course_overview AS
SELECT 
    c.id,
    c.title,
    c.description,
    c.status,
    c.difficulty,
    c.user_id,
    c.created_at,
    c.updated_at,
    c.published_at,
    COUNT(DISTINCT cb.book_id) as book_count,
    COUNT(DISTINCT cvg.vocabulary_group_id) as vocabulary_group_count,
    COUNT(DISTINCT s.id) as schedule_count,
    CASE 
        WHEN c.is_public = true THEN c.public_slug 
        ELSE NULL 
    END as public_slug
FROM courses c
LEFT JOIN course_books cb ON cb.course_id = c.id
LEFT JOIN course_vocabulary_groups cvg ON cvg.course_id = c.id
LEFT JOIN schedules s ON s.course_id = c.id
GROUP BY c.id;

-- View for upcoming lessons
CREATE VIEW upcoming_lessons AS
SELECT 
    l.*,
    s.name as schedule_name,
    s.course_id,
    c.title as course_title,
    s.user_id
FROM lessons l
JOIN schedules s ON s.id = l.schedule_id
LEFT JOIN courses c ON c.id = s.course_id
WHERE l.date >= CURRENT_DATE
AND l.status IN ('draft', 'scheduled')
ORDER BY l.date, l.start_time;

-- Function to get vocabulary statistics
CREATE OR REPLACE FUNCTION get_vocabulary_stats(user_id_param UUID)
RETURNS TABLE (
    total_words INTEGER,
    total_groups INTEGER,
    words_by_difficulty JSONB,
    words_by_language JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(DISTINCT v.id)::INTEGER as total_words,
        COUNT(DISTINCT vg.id)::INTEGER as total_groups,
        jsonb_build_object(
            'beginner', COUNT(DISTINCT CASE WHEN v.difficulty = 'beginner' THEN v.id END),
            'intermediate', COUNT(DISTINCT CASE WHEN v.difficulty = 'intermediate' THEN v.id END),
            'advanced', COUNT(DISTINCT CASE WHEN v.difficulty = 'advanced' THEN v.id END),
            'expert', COUNT(DISTINCT CASE WHEN v.difficulty = 'expert' THEN v.id END)
        ) as words_by_difficulty,
        jsonb_object_agg(
            COALESCE(vg.language, 'unknown'),
            word_count
        ) as words_by_language
    FROM vocabulary v
    LEFT JOIN vocabulary_group_items vgi ON vgi.vocabulary_id = v.id
    LEFT JOIN vocabulary_groups vg ON vg.id = vgi.vocabulary_group_id
    LEFT JOIN (
        SELECT vg.language, COUNT(DISTINCT vgi.vocabulary_id) as word_count
        FROM vocabulary_groups vg
        JOIN vocabulary_group_items vgi ON vgi.vocabulary_group_id = vg.id
        WHERE vg.user_id = user_id_param
        GROUP BY vg.language
    ) lang_stats ON true
    WHERE v.user_id = user_id_param
    GROUP BY lang_stats.words_by_language;
END;
$$ LANGUAGE plpgsql;

-- Function to clone a template (objectives, methods, or tasks)
CREATE OR REPLACE FUNCTION clone_template(
    template_id UUID,
    template_type TEXT,
    new_user_id UUID
) RETURNS UUID AS $$
DECLARE
    new_id UUID;
BEGIN
    CASE template_type
        WHEN 'objective' THEN
            INSERT INTO objectives (title, description, category_id, bloom_level, measurable, tags, is_template, user_id, metadata)
            SELECT title, description, category_id, bloom_level, measurable, tags, false, new_user_id, metadata
            FROM objectives
            WHERE id = template_id AND is_template = true
            RETURNING id INTO new_id;
            
        WHEN 'method' THEN
            INSERT INTO methods (name, description, category_id, instructions, duration_minutes, group_size_min, group_size_max, materials_needed, tags, is_template, user_id, metadata)
            SELECT name, description, category_id, instructions, duration_minutes, group_size_min, group_size_max, materials_needed, tags, false, new_user_id, metadata
            FROM methods
            WHERE id = template_id AND is_template = true
            RETURNING id INTO new_id;
            
        WHEN 'task' THEN
            INSERT INTO tasks (title, description, category_id, instructions, duration_minutes, difficulty, materials_needed, assessment_criteria, tags, is_template, user_id, metadata)
            SELECT title, description, category_id, instructions, duration_minutes, difficulty, materials_needed, assessment_criteria, tags, false, new_user_id, metadata
            FROM tasks
            WHERE id = template_id AND is_template = true
            RETURNING id INTO new_id;
            
        ELSE
            RAISE EXCEPTION 'Invalid template type: %', template_type;
    END CASE;
    
    RETURN new_id;
END;
$$ LANGUAGE plpgsql;

-- Function to search across multiple entities
CREATE OR REPLACE FUNCTION search_all_entities(
    search_query TEXT,
    user_id_param UUID,
    entity_types TEXT[] DEFAULT ARRAY['course', 'book', 'vocabulary', 'objective', 'method', 'task']
) RETURNS TABLE (
    entity_type TEXT,
    entity_id UUID,
    title TEXT,
    description TEXT,
    match_rank REAL
) AS $$
BEGIN
    RETURN QUERY
    WITH search_results AS (
        -- Search courses
        SELECT 
            'course'::TEXT as entity_type,
            c.id as entity_id,
            c.title::TEXT,
            c.description::TEXT,
            ts_rank(to_tsvector('english', c.title || ' ' || COALESCE(c.description, '')), plainto_tsquery('english', search_query)) as match_rank
        FROM courses c
        WHERE c.user_id = user_id_param
        AND 'course' = ANY(entity_types)
        AND to_tsvector('english', c.title || ' ' || COALESCE(c.description, '')) @@ plainto_tsquery('english', search_query)
        
        UNION ALL
        
        -- Search books
        SELECT 
            'book'::TEXT,
            b.id,
            b.title::TEXT,
            b.description::TEXT,
            ts_rank(to_tsvector('english', b.title || ' ' || COALESCE(b.author, '') || ' ' || COALESCE(b.description, '')), plainto_tsquery('english', search_query))
        FROM books b
        WHERE b.user_id = user_id_param
        AND 'book' = ANY(entity_types)
        AND to_tsvector('english', b.title || ' ' || COALESCE(b.author, '') || ' ' || COALESCE(b.description, '')) @@ plainto_tsquery('english', search_query)
        
        UNION ALL
        
        -- Search vocabulary
        SELECT 
            'vocabulary'::TEXT,
            v.id,
            v.word::TEXT,
            v.definition::TEXT,
            ts_rank(to_tsvector('english', v.word || ' ' || COALESCE(v.translation, '') || ' ' || COALESCE(v.definition, '')), plainto_tsquery('english', search_query))
        FROM vocabulary v
        WHERE v.user_id = user_id_param
        AND 'vocabulary' = ANY(entity_types)
        AND to_tsvector('english', v.word || ' ' || COALESCE(v.translation, '') || ' ' || COALESCE(v.definition, '')) @@ plainto_tsquery('english', search_query)
        
        UNION ALL
        
        -- Search objectives
        SELECT 
            'objective'::TEXT,
            o.id,
            o.title::TEXT,
            o.description::TEXT,
            ts_rank(to_tsvector('english', o.title || ' ' || COALESCE(o.description, '')), plainto_tsquery('english', search_query))
        FROM objectives o
        WHERE (o.user_id = user_id_param OR o.is_template = true)
        AND 'objective' = ANY(entity_types)
        AND to_tsvector('english', o.title || ' ' || COALESCE(o.description, '')) @@ plainto_tsquery('english', search_query)
        
        UNION ALL
        
        -- Search methods
        SELECT 
            'method'::TEXT,
            m.id,
            m.name::TEXT,
            m.description::TEXT,
            ts_rank(to_tsvector('english', m.name || ' ' || COALESCE(m.description, '')), plainto_tsquery('english', search_query))
        FROM methods m
        WHERE (m.user_id = user_id_param OR m.is_template = true)
        AND 'method' = ANY(entity_types)
        AND to_tsvector('english', m.name || ' ' || COALESCE(m.description, '')) @@ plainto_tsquery('english', search_query)
        
        UNION ALL
        
        -- Search tasks
        SELECT 
            'task'::TEXT,
            t.id,
            t.title::TEXT,
            t.description::TEXT,
            ts_rank(to_tsvector('english', t.title || ' ' || COALESCE(t.description, '')), plainto_tsquery('english', search_query))
        FROM tasks t
        WHERE (t.user_id = user_id_param OR t.is_template = true)
        AND 'task' = ANY(entity_types)
        AND to_tsvector('english', t.title || ' ' || COALESCE(t.description, '')) @@ plainto_tsquery('english', search_query)
    )
    SELECT * FROM search_results
    ORDER BY match_rank DESC
    LIMIT 50;
END;
$$ LANGUAGE plpgsql;

================
File: database/migration_001_initial_schema.sql
================
-- Course Builder Database Migration
-- Migration: 001_initial_schema
-- Description: Create initial database schema for Course Builder application
-- Date: 2025-06-08

-- Include schema
\i schema.sql

-- Include RLS policies
\i rls_policies.sql

-- Create some initial template data for users
INSERT INTO objectives (title, description, bloom_level, is_template, user_id) VALUES
('Understand key concepts', 'Students will be able to understand and explain the key concepts', 'understand', true, auth.uid()),
('Apply knowledge', 'Students will be able to apply the learned concepts in practical scenarios', 'apply', true, auth.uid()),
('Analyze problems', 'Students will be able to analyze complex problems and break them down', 'analyze', true, auth.uid()),
('Create solutions', 'Students will be able to create innovative solutions to problems', 'create', true, auth.uid());

INSERT INTO methods (name, description, instructions, duration_minutes, is_template, user_id) VALUES
('Lecture', 'Traditional lecture format', 'Present information to students in a structured manner', 45, true, auth.uid()),
('Group Discussion', 'Interactive group discussion', 'Facilitate discussion among students on the topic', 30, true, auth.uid()),
('Hands-on Practice', 'Practical exercises', 'Guide students through practical exercises', 60, true, auth.uid()),
('Peer Review', 'Students review each other''s work', 'Organize peer review sessions for feedback', 30, true, auth.uid());

INSERT INTO tasks (title, description, instructions, duration_minutes, is_template, user_id) VALUES
('Reading Assignment', 'Assigned reading from textbook or materials', 'Read the specified chapters and take notes', 60, true, auth.uid()),
('Written Exercise', 'Writing assignment or essay', 'Complete the writing assignment following guidelines', 90, true, auth.uid()),
('Problem Set', 'Mathematical or logical problems to solve', 'Solve all problems showing your work', 45, true, auth.uid()),
('Project Work', 'Work on course project', 'Continue working on your project following the requirements', 120, true, auth.uid());

-- Add a comment to track migration
COMMENT ON SCHEMA public IS 'Course Builder initial schema v1.0.0';

================
File: database/migration_002_fix_lessons_schema.sql
================
-- Migration: 002_fix_lessons_schema
-- Description: Fix lessons table schema to include schedule_id and add missing types
-- Date: 2025-06-11

-- Create missing enum types if they don't exist
CREATE TYPE IF NOT EXISTS recurrence_type_enum AS ENUM ('none', 'daily', 'weekly', 'biweekly', 'monthly');
CREATE TYPE IF NOT EXISTS day_of_week_enum AS ENUM ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday');

-- Add schedule_id column to lessons table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lessons' AND column_name = 'schedule_id') THEN
        ALTER TABLE lessons ADD COLUMN schedule_id UUID REFERENCES schedules(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Add duration_minutes column to lessons table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lessons' AND column_name = 'duration_minutes') THEN
        ALTER TABLE lessons ADD COLUMN duration_minutes INTEGER;
    END IF;
END $$;

-- Add lesson_number column to lessons table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lessons' AND column_name = 'lesson_number') THEN
        ALTER TABLE lessons ADD COLUMN lesson_number INTEGER;
    END IF;
END $$;

-- Add tags column to lessons table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lessons' AND column_name = 'tags') THEN
        ALTER TABLE lessons ADD COLUMN tags TEXT[];
    END IF;
END $$;

-- Add user_id column to lessons table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'lessons' AND column_name = 'user_id') THEN
        ALTER TABLE lessons ADD COLUMN user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create attendance table if it doesn't exist
CREATE TABLE IF NOT EXISTS attendance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    student_name VARCHAR(255) NOT NULL,
    student_id VARCHAR(100),
    status VARCHAR(20) DEFAULT 'present', -- 'present', 'absent', 'late', 'excused'
    notes TEXT,
    marked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    marked_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    UNIQUE(lesson_id, student_name)
);

-- Create indexes for attendance if they don't exist
CREATE INDEX IF NOT EXISTS idx_attendance_lesson_id ON attendance(lesson_id);
CREATE INDEX IF NOT EXISTS idx_attendance_student_name ON attendance(student_name);
CREATE INDEX IF NOT EXISTS idx_attendance_status ON attendance(status);

-- Create vocabulary_books table if it doesn't exist
CREATE TABLE IF NOT EXISTS vocabulary_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vocabulary_id UUID REFERENCES vocabulary(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    page_number INTEGER,
    section VARCHAR(255),
    notes TEXT,
    UNIQUE(vocabulary_id, book_id)
);

-- Create vocabulary_group_books table if it doesn't exist
CREATE TABLE IF NOT EXISTS vocabulary_group_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vocabulary_group_id UUID REFERENCES vocabulary_groups(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    notes TEXT,
    position INTEGER DEFAULT 0,
    UNIQUE(vocabulary_group_id, book_id)
);

-- Create indexes for new tables and columns if they don't exist
CREATE INDEX IF NOT EXISTS idx_lessons_schedule_id ON lessons(schedule_id);
CREATE INDEX IF NOT EXISTS idx_lessons_user_id ON lessons(user_id);
CREATE INDEX IF NOT EXISTS idx_vocabulary_books_vocabulary_id ON vocabulary_books(vocabulary_id);
CREATE INDEX IF NOT EXISTS idx_vocabulary_books_book_id ON vocabulary_books(book_id);
CREATE INDEX IF NOT EXISTS idx_vocabulary_group_books_group_id ON vocabulary_group_books(vocabulary_group_id);
CREATE INDEX IF NOT EXISTS idx_vocabulary_group_books_book_id ON vocabulary_group_books(book_id);

-- Update any existing lessons to have a valid user_id if they don't have one
-- This assumes there's at least one user in the system
UPDATE lessons 
SET user_id = (SELECT id FROM auth.users LIMIT 1)
WHERE user_id IS NULL AND EXISTS (SELECT 1 FROM auth.users);

-- For any lessons that have a course_id but no schedule_id, we'll leave them as is
-- The application should handle creating proper schedules going forward

-- Add a comment to track migration
COMMENT ON SCHEMA public IS 'Course Builder schema v1.1.0 - Fixed lessons table and added vocabulary_books';

================
File: database/migrations/004_add_course_relationships.sql
================
-- Add course-objective and course-method relationship tables
-- This migration adds the missing relationship tables for objectives and methods to courses

-- Course-Objective associations
CREATE TABLE IF NOT EXISTS course_objectives (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
    objective_id UUID REFERENCES objectives(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(course_id, objective_id)
);

-- Course-Method associations  
CREATE TABLE IF NOT EXISTS course_methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
    method_id UUID REFERENCES methods(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(course_id, method_id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_course_objectives_course_id ON course_objectives(course_id);
CREATE INDEX IF NOT EXISTS idx_course_objectives_objective_id ON course_objectives(objective_id);
CREATE INDEX IF NOT EXISTS idx_course_methods_course_id ON course_methods(course_id);
CREATE INDEX IF NOT EXISTS idx_course_methods_method_id ON course_methods(method_id);

================
File: database/rls_policies.sql
================
-- Row Level Security Policies for Course Builder
-- Enable RLS on all tables

-- Categories RLS
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own categories" ON categories
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own categories" ON categories
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own categories" ON categories
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own categories" ON categories
    FOR DELETE USING (auth.uid() = user_id);

-- Courses RLS
ALTER TABLE courses ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own courses" ON courses
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view public courses" ON courses
    FOR SELECT USING (is_public = true);

CREATE POLICY "Users can insert their own courses" ON courses
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own courses" ON courses
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own courses" ON courses
    FOR DELETE USING (auth.uid() = user_id);

-- Books RLS
ALTER TABLE books ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own books" ON books
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view public books" ON books
    FOR SELECT USING (is_public = true);

CREATE POLICY "Users can insert their own books" ON books
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own books" ON books
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own books" ON books
    FOR DELETE USING (auth.uid() = user_id);

-- Vocabulary Groups RLS
ALTER TABLE vocabulary_groups ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own vocabulary groups" ON vocabulary_groups
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view public vocabulary groups" ON vocabulary_groups
    FOR SELECT USING (is_public = true);

CREATE POLICY "Users can insert their own vocabulary groups" ON vocabulary_groups
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own vocabulary groups" ON vocabulary_groups
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own vocabulary groups" ON vocabulary_groups
    FOR DELETE USING (auth.uid() = user_id);

-- Vocabulary RLS
ALTER TABLE vocabulary ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own vocabulary" ON vocabulary
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own vocabulary" ON vocabulary
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own vocabulary" ON vocabulary
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own vocabulary" ON vocabulary
    FOR DELETE USING (auth.uid() = user_id);

-- Vocabulary Group Items RLS
ALTER TABLE vocabulary_group_items ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view vocabulary group items they own" ON vocabulary_group_items
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM vocabulary_groups vg
            WHERE vg.id = vocabulary_group_items.vocabulary_group_id
            AND vg.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can insert vocabulary group items they own" ON vocabulary_group_items
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM vocabulary_groups vg
            WHERE vg.id = vocabulary_group_items.vocabulary_group_id
            AND vg.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can update vocabulary group items they own" ON vocabulary_group_items
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM vocabulary_groups vg
            WHERE vg.id = vocabulary_group_items.vocabulary_group_id
            AND vg.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can delete vocabulary group items they own" ON vocabulary_group_items
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM vocabulary_groups vg
            WHERE vg.id = vocabulary_group_items.vocabulary_group_id
            AND vg.user_id = auth.uid()
        )
    );

-- Objectives RLS
ALTER TABLE objectives ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own objectives" ON objectives
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view template objectives" ON objectives
    FOR SELECT USING (is_template = true);

CREATE POLICY "Users can insert their own objectives" ON objectives
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own objectives" ON objectives
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own objectives" ON objectives
    FOR DELETE USING (auth.uid() = user_id);

-- Methods RLS
ALTER TABLE methods ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own methods" ON methods
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view template methods" ON methods
    FOR SELECT USING (is_template = true);

CREATE POLICY "Users can insert their own methods" ON methods
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own methods" ON methods
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own methods" ON methods
    FOR DELETE USING (auth.uid() = user_id);

-- Tasks RLS
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own tasks" ON tasks
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can view template tasks" ON tasks
    FOR SELECT USING (is_template = true);

CREATE POLICY "Users can insert their own tasks" ON tasks
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own tasks" ON tasks
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tasks" ON tasks
    FOR DELETE USING (auth.uid() = user_id);

-- Schedules RLS
ALTER TABLE schedules ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own schedules" ON schedules
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own schedules" ON schedules
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own schedules" ON schedules
    FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own schedules" ON schedules
    FOR DELETE USING (auth.uid() = user_id);

-- Lessons RLS
ALTER TABLE lessons ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lessons from their schedules" ON lessons
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM schedules s
            WHERE s.id = lessons.schedule_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can insert lessons to their schedules" ON lessons
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM schedules s
            WHERE s.id = lessons.schedule_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can update lessons in their schedules" ON lessons
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM schedules s
            WHERE s.id = lessons.schedule_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can delete lessons from their schedules" ON lessons
    FOR DELETE USING (
        EXISTS (
            SELECT 1 FROM schedules s
            WHERE s.id = lessons.schedule_id
            AND s.user_id = auth.uid()
        )
    );

-- Course Books RLS
ALTER TABLE course_books ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view course books they own" ON course_books
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM courses c
            WHERE c.id = course_books.course_id
            AND c.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage course books they own" ON course_books
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM courses c
            WHERE c.id = course_books.course_id
            AND c.user_id = auth.uid()
        )
    );

-- Course Vocabulary Groups RLS
ALTER TABLE course_vocabulary_groups ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view course vocabulary groups they own" ON course_vocabulary_groups
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM courses c
            WHERE c.id = course_vocabulary_groups.course_id
            AND c.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage course vocabulary groups they own" ON course_vocabulary_groups
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM courses c
            WHERE c.id = course_vocabulary_groups.course_id
            AND c.user_id = auth.uid()
        )
    );

-- Lesson Objectives RLS
ALTER TABLE lesson_objectives ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lesson objectives they own" ON lesson_objectives
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_objectives.lesson_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage lesson objectives they own" ON lesson_objectives
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_objectives.lesson_id
            AND s.user_id = auth.uid()
        )
    );

-- Lesson Methods RLS
ALTER TABLE lesson_methods ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lesson methods they own" ON lesson_methods
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_methods.lesson_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage lesson methods they own" ON lesson_methods
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_methods.lesson_id
            AND s.user_id = auth.uid()
        )
    );

-- Lesson Tasks RLS
ALTER TABLE lesson_tasks ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lesson tasks they own" ON lesson_tasks
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_tasks.lesson_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage lesson tasks they own" ON lesson_tasks
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_tasks.lesson_id
            AND s.user_id = auth.uid()
        )
    );

-- Lesson Books RLS
ALTER TABLE lesson_books ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lesson books they own" ON lesson_books
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_books.lesson_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage lesson books they own" ON lesson_books
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_books.lesson_id
            AND s.user_id = auth.uid()
        )
    );

-- Lesson Vocabulary RLS
ALTER TABLE lesson_vocabulary ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view lesson vocabulary they own" ON lesson_vocabulary
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_vocabulary.lesson_id
            AND s.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can manage lesson vocabulary they own" ON lesson_vocabulary
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM lessons l
            JOIN schedules s ON s.id = l.schedule_id
            WHERE l.id = lesson_vocabulary.lesson_id
            AND s.user_id = auth.uid()
        )
    );

-- Public Links RLS
ALTER TABLE public_links ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Anyone can view active public links" ON public_links
    FOR SELECT USING (is_active = true AND (expires_at IS NULL OR expires_at > NOW()));

CREATE POLICY "Users can manage their own public links" ON public_links
    FOR ALL USING (
        CASE entity_type
            WHEN 'course' THEN EXISTS (SELECT 1 FROM courses WHERE id = entity_id AND user_id = auth.uid())
            WHEN 'book' THEN EXISTS (SELECT 1 FROM books WHERE id = entity_id AND user_id = auth.uid())
            WHEN 'vocabulary_group' THEN EXISTS (SELECT 1 FROM vocabulary_groups WHERE id = entity_id AND user_id = auth.uid())
            ELSE false
        END
    );

================
File: database/schema_documentation.md
================
# Course Builder Database Schema Documentation

## Overview
The Course Builder database schema has been successfully created with all required tables, relationships, indexes, and Row Level Security (RLS) policies.

## Tables Created

### Core Entity Tables
1. **categories** - Organize all entities (courses, books, vocabulary, etc.)
2. **courses** - Main course information
3. **books** - Learning materials library
4. **vocabulary_groups** - Groups of vocabulary items
5. **vocabulary** - Individual vocabulary items
6. **objectives** - Teaching objectives library
7. **methods** - Teaching methods library
8. **tasks** - Tasks/activities library
9. **schedules** - Teaching schedules
10. **lessons** - Individual lessons within schedules

### Relationship Tables (Many-to-Many)
1. **course_books** - Links courses to books
2. **course_vocabulary_groups** - Links courses to vocabulary groups
3. **vocabulary_group_items** - Links vocabulary items to groups
4. **lesson_objectives** - Links lessons to objectives
5. **lesson_methods** - Links lessons to methods
6. **lesson_tasks** - Links lessons to tasks
7. **lesson_books** - Links lessons to books
8. **lesson_vocabulary** - Links lessons to vocabulary items

### Additional Tables
1. **public_links** - For sharing entities publicly with secure tokens

## Custom Types Created
- **course_status**: 'draft', 'published', 'archived'
- **lesson_status**: 'draft', 'scheduled', 'completed', 'cancelled'
- **difficulty_level**: 'beginner', 'intermediate', 'advanced', 'expert'
- **content_type**: 'text', 'video', 'audio', 'pdf', 'image', 'interactive'

## Security Features

### Row Level Security (RLS)
All tables have RLS enabled with appropriate policies:
- Users can only view/edit their own data
- Public courses, books, and vocabulary groups are viewable by all
- Template objectives, methods, and tasks are viewable by all
- Proper cascading permissions for related data

### Indexes
Performance indexes created for:
- Foreign key relationships
- Frequently searched fields (user_id, status, tags)
- Full-text search on titles, descriptions, and content
- GIN indexes for array fields (tags)

## Database Functions Created

1. **generate_unique_slug(base_text, table_name)** - Generates unique public slugs
2. **calculate_course_progress(course_id, user_id)** - Calculates course completion percentage
3. **get_vocabulary_stats(user_id)** - Returns vocabulary statistics by difficulty and language
4. **clone_template(template_id, template_type, new_user_id)** - Clones template entities
5. **search_all_entities(search_query, user_id, entity_types[])** - Full-text search across all entities

## Views Created

1. **course_overview** - Provides course statistics including counts of books, vocabulary groups, and schedules
2. **upcoming_lessons** - Shows upcoming lessons with course information

## Triggers
- Automatic **updated_at** timestamp updates on all tables

## Key Features

### Multi-tenancy
- All data is isolated by user through RLS policies
- Users can only access their own data

### Public Sharing
- Courses, books, and vocabulary groups can be made public
- Public sharing links with optional expiration and password protection

### Templates
- Objectives, methods, and tasks can be marked as templates
- Templates are viewable by all users and can be cloned

### Flexible Relationships
- Many-to-many relationships allow maximum flexibility
- Lessons can use any combination of objectives, methods, tasks, books, and vocabulary
- Courses can include multiple books and vocabulary groups

### Search Capabilities
- Full-text search indexes on major entities
- Tag-based filtering
- Advanced search function across all entity types

### Metadata Support
- JSONB metadata fields on all major tables for extensibility
- Allows storing additional custom data without schema changes

## Next Steps

The database schema is now ready for use. Task 3 is complete. The next steps would be:
1. Create the UI components (Task 4)
2. Implement the course management module (Task 5)
3. Build the other management modules (Tasks 6-11)

================
File: database/schema.sql
================
-- Course Builder Database Schema
-- Version: 1.0
-- Description: Complete database schema for the course builder application

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm"; -- For text search

-- Create custom types
CREATE TYPE course_status AS ENUM ('draft', 'published', 'archived');
CREATE TYPE lesson_status AS ENUM ('draft', 'scheduled', 'completed', 'cancelled');
CREATE TYPE difficulty_level AS ENUM ('beginner', 'intermediate', 'advanced', 'expert');
CREATE TYPE content_type AS ENUM ('text', 'video', 'audio', 'pdf', 'image', 'interactive');
CREATE TYPE recurrence_type_enum AS ENUM ('none', 'daily', 'weekly', 'biweekly', 'monthly');
CREATE TYPE day_of_week_enum AS ENUM ('monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday');

-- Categories table (for organizing all entities)
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    description TEXT,
    type VARCHAR(50) NOT NULL, -- 'course', 'book', 'vocabulary', 'objective', 'method', 'task'
    parent_id UUID REFERENCES categories(id) ON DELETE CASCADE,
    color VARCHAR(7), -- Hex color code
    icon VARCHAR(50), -- Icon identifier
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(name, type, user_id)
);

-- Courses table
CREATE TABLE courses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    short_description VARCHAR(500),
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    status course_status DEFAULT 'draft',
    difficulty difficulty_level DEFAULT 'beginner',
    duration_hours INTEGER,
    objectives TEXT[], -- Array of learning objectives
    prerequisites TEXT[], -- Array of prerequisites
    tags TEXT[], -- Array of tags for searching
    thumbnail_url TEXT,
    is_public BOOLEAN DEFAULT false,
    public_slug VARCHAR(255) UNIQUE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    published_at TIMESTAMP WITH TIME ZONE,
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Books/Materials Library
CREATE TABLE books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255),
    isbn VARCHAR(20),
    publisher VARCHAR(255),
    publication_year INTEGER,
    description TEXT,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    content_type content_type DEFAULT 'text',
    file_url TEXT, -- URL to uploaded file
    cover_image_url TEXT,
    total_pages INTEGER,
    language VARCHAR(10) DEFAULT 'en',
    tags TEXT[],
    is_public BOOLEAN DEFAULT false,
    public_slug VARCHAR(255) UNIQUE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Vocabulary Groups
CREATE TABLE vocabulary_groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    language VARCHAR(10) DEFAULT 'en',
    target_language VARCHAR(10),
    difficulty difficulty_level DEFAULT 'beginner',
    tags TEXT[],
    is_public BOOLEAN DEFAULT false,
    public_slug VARCHAR(255) UNIQUE,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Vocabulary Items
CREATE TABLE vocabulary (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    word VARCHAR(255) NOT NULL,
    translation VARCHAR(255),
    pronunciation VARCHAR(255),
    part_of_speech VARCHAR(50), -- noun, verb, adjective, etc.
    definition TEXT,
    example_sentence TEXT,
    example_translation TEXT,
    notes TEXT,
    difficulty difficulty_level DEFAULT 'beginner',
    audio_url TEXT,
    image_url TEXT,
    tags TEXT[],
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Vocabulary to Groups mapping (many-to-many)
CREATE TABLE vocabulary_group_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vocabulary_group_id UUID REFERENCES vocabulary_groups(id) ON DELETE CASCADE NOT NULL,
    vocabulary_id UUID REFERENCES vocabulary(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(vocabulary_group_id, vocabulary_id)
);

-- Teaching Objectives Library
CREATE TABLE objectives (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    bloom_level VARCHAR(50), -- 'remember', 'understand', 'apply', 'analyze', 'evaluate', 'create'
    measurable BOOLEAN DEFAULT true,
    tags TEXT[],
    is_template BOOLEAN DEFAULT false,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Teaching Methods Library
CREATE TABLE methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    instructions TEXT,
    duration_minutes INTEGER,
    group_size_min INTEGER DEFAULT 1,
    group_size_max INTEGER,
    materials_needed TEXT[],
    tags TEXT[],
    is_template BOOLEAN DEFAULT false,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Tasks/Activities Library
CREATE TABLE tasks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    category_id UUID REFERENCES categories(id) ON DELETE SET NULL,
    instructions TEXT,
    duration_minutes INTEGER,
    difficulty difficulty_level DEFAULT 'beginner',
    materials_needed TEXT[],
    assessment_criteria TEXT,
    tags TEXT[],
    is_template BOOLEAN DEFAULT false,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Schedules (Teaching Schedules)
CREATE TABLE schedules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    timezone VARCHAR(50) DEFAULT 'UTC',
    recurrence_rule TEXT, -- iCal RRULE format
    tags TEXT[],
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb,

    default_start_time TIME,
    default_duration_minutes INTEGER,
    recurrence_type recurrence_type_enum,
    recurrence_days day_of_week_enum[],
    location VARCHAR(255),
    max_students INTEGER,
    is_active BOOLEAN DEFAULT true
);

-- Lessons (Individual lessons within a schedule)
CREATE TABLE lessons (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    schedule_id UUID REFERENCES schedules(id) ON DELETE CASCADE NOT NULL,
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    lesson_number INTEGER,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    duration_minutes INTEGER,
    location VARCHAR(255),
    status lesson_status DEFAULT 'draft',
    tags TEXT[],
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Attendance tracking for lessons
CREATE TABLE attendance (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    student_name VARCHAR(255) NOT NULL,
    student_id VARCHAR(100),
    status VARCHAR(20) DEFAULT 'present', -- 'present', 'absent', 'late', 'excused'
    notes TEXT,
    marked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    marked_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    UNIQUE(lesson_id, student_name)
);

-- Relationship Tables for Many-to-Many associations

-- Course-Book associations
CREATE TABLE course_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    is_required BOOLEAN DEFAULT false,
    notes TEXT,
    position INTEGER DEFAULT 0,
    UNIQUE(course_id, book_id)
);

-- Course-Vocabulary Group associations
CREATE TABLE course_vocabulary_groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID REFERENCES courses(id) ON DELETE CASCADE NOT NULL,
    vocabulary_group_id UUID REFERENCES vocabulary_groups(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    UNIQUE(course_id, vocabulary_group_id)
);

-- Lesson-Objective associations
CREATE TABLE lesson_objectives (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    objective_id UUID REFERENCES objectives(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    UNIQUE(lesson_id, objective_id)
);

-- Lesson-Method associations
CREATE TABLE lesson_methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    method_id UUID REFERENCES methods(id) ON DELETE CASCADE NOT NULL,
    duration_override INTEGER, -- Override default duration
    position INTEGER DEFAULT 0,
    notes TEXT,
    UNIQUE(lesson_id, method_id)
);

-- Lesson-Task associations
CREATE TABLE lesson_tasks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    task_id UUID REFERENCES tasks(id) ON DELETE CASCADE NOT NULL,
    duration_override INTEGER,
    position INTEGER DEFAULT 0,
    notes TEXT,
    is_homework BOOLEAN DEFAULT false,
    due_date DATE,
    UNIQUE(lesson_id, task_id)
);

-- Lesson-Book associations
CREATE TABLE lesson_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    pages_from INTEGER,
    pages_to INTEGER,
    notes TEXT,
    UNIQUE(lesson_id, book_id)
);

-- Lesson-Vocabulary associations
CREATE TABLE lesson_vocabulary (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE NOT NULL,
    vocabulary_id UUID REFERENCES vocabulary(id) ON DELETE CASCADE NOT NULL,
    position INTEGER DEFAULT 0,
    UNIQUE(lesson_id, vocabulary_id)
);

-- Vocabulary-Book associations (many-to-many)
CREATE TABLE vocabulary_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vocabulary_id UUID REFERENCES vocabulary(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    page_number INTEGER,
    section VARCHAR(255),
    notes TEXT,
    UNIQUE(vocabulary_id, book_id)
);

-- Vocabulary Group-Book associations (many-to-many)
CREATE TABLE vocabulary_group_books (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vocabulary_group_id UUID REFERENCES vocabulary_groups(id) ON DELETE CASCADE NOT NULL,
    book_id UUID REFERENCES books(id) ON DELETE CASCADE NOT NULL,
    notes TEXT,
    position INTEGER DEFAULT 0,
    UNIQUE(vocabulary_group_id, book_id)
);

-- Public sharing links
CREATE TABLE public_links (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    entity_type VARCHAR(50) NOT NULL, -- 'course', 'book', 'vocabulary_group', etc.
    entity_id UUID NOT NULL,
    token VARCHAR(255) UNIQUE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE,
    password_hash TEXT,
    max_views INTEGER,
    current_views INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}'::jsonb
);

-- Create indexes for better performance
CREATE INDEX idx_categories_type ON categories(type);
CREATE INDEX idx_categories_user_id ON categories(user_id);

CREATE INDEX idx_courses_user_id ON courses(user_id);
CREATE INDEX idx_courses_status ON courses(status);
CREATE INDEX idx_courses_public_slug ON courses(public_slug) WHERE public_slug IS NOT NULL;
CREATE INDEX idx_courses_tags ON courses USING GIN(tags);

CREATE INDEX idx_books_user_id ON books(user_id);
CREATE INDEX idx_books_isbn ON books(isbn) WHERE isbn IS NOT NULL;
CREATE INDEX idx_books_tags ON books USING GIN(tags);

CREATE INDEX idx_vocabulary_user_id ON vocabulary(user_id);
CREATE INDEX idx_vocabulary_word ON vocabulary(word);
CREATE INDEX idx_vocabulary_tags ON vocabulary USING GIN(tags);

CREATE INDEX idx_vocabulary_groups_user_id ON vocabulary_groups(user_id);
CREATE INDEX idx_vocabulary_group_items_group ON vocabulary_group_items(vocabulary_group_id);
CREATE INDEX idx_vocabulary_group_items_vocab ON vocabulary_group_items(vocabulary_id);

CREATE INDEX idx_objectives_user_id ON objectives(user_id);
CREATE INDEX idx_methods_user_id ON methods(user_id);
CREATE INDEX idx_tasks_user_id ON tasks(user_id);

CREATE INDEX idx_schedules_user_id ON schedules(user_id);
CREATE INDEX idx_schedules_course_id ON schedules(course_id);
CREATE INDEX idx_schedules_dates ON schedules(start_date, end_date);

CREATE INDEX idx_lessons_schedule_id ON lessons(schedule_id);
CREATE INDEX idx_lessons_course_id ON lessons(course_id);
CREATE INDEX idx_lessons_date ON lessons(date);
CREATE INDEX idx_lessons_status ON lessons(status);
CREATE INDEX idx_lessons_user_id ON lessons(user_id);

CREATE INDEX idx_attendance_lesson_id ON attendance(lesson_id);
CREATE INDEX idx_attendance_student_name ON attendance(student_name);
CREATE INDEX idx_attendance_status ON attendance(status);

CREATE INDEX idx_vocabulary_books_vocabulary_id ON vocabulary_books(vocabulary_id);
CREATE INDEX idx_vocabulary_books_book_id ON vocabulary_books(book_id);

CREATE INDEX idx_vocabulary_group_books_group_id ON vocabulary_group_books(vocabulary_group_id);
CREATE INDEX idx_vocabulary_group_books_book_id ON vocabulary_group_books(book_id);

CREATE INDEX idx_public_links_token ON public_links(token);
CREATE INDEX idx_public_links_entity ON public_links(entity_type, entity_id);

-- Full text search indexes
CREATE INDEX idx_courses_search ON courses USING GIN(to_tsvector('english', title || ' ' || COALESCE(description, '')));
CREATE INDEX idx_books_search ON books USING GIN(to_tsvector('english', title || ' ' || COALESCE(author, '') || ' ' || COALESCE(description, '')));
CREATE INDEX idx_vocabulary_search ON vocabulary USING GIN(to_tsvector('english', word || ' ' || COALESCE(translation, '') || ' ' || COALESCE(definition, '')));

-- Create update timestamp trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply update timestamp triggers to all tables with updated_at
CREATE TRIGGER update_categories_updated_at BEFORE UPDATE ON categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_courses_updated_at BEFORE UPDATE ON courses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_books_updated_at BEFORE UPDATE ON books FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_vocabulary_groups_updated_at BEFORE UPDATE ON vocabulary_groups FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_vocabulary_updated_at BEFORE UPDATE ON vocabulary FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_objectives_updated_at BEFORE UPDATE ON objectives FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_methods_updated_at BEFORE UPDATE ON methods FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON tasks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_schedules_updated_at BEFORE UPDATE ON schedules FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_lessons_updated_at BEFORE UPDATE ON lessons FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

================
File: database/shared_access_policies.sql
================
-- Shared Access RLS Policies for Course Builder
-- These policies allow shared access without authentication for users with permission

-- Drop existing restrictive policies and create shared access policies

-- Categories: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own categories" ON categories;
DROP POLICY IF EXISTS "Users can insert their own categories" ON categories;
DROP POLICY IF EXISTS "Users can update their own categories" ON categories;
DROP POLICY IF EXISTS "Users can delete their own categories" ON categories;

CREATE POLICY "Allow shared access to categories" ON categories FOR ALL USING (true);

-- Courses: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own courses" ON courses;
DROP POLICY IF EXISTS "Users can view public courses" ON courses;
DROP POLICY IF EXISTS "Users can insert their own courses" ON courses;
DROP POLICY IF EXISTS "Users can update their own courses" ON courses;
DROP POLICY IF EXISTS "Users can delete their own courses" ON courses;

CREATE POLICY "Allow shared access to courses" ON courses FOR ALL USING (true);

-- Books: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own books" ON books;
DROP POLICY IF EXISTS "Users can view public books" ON books;
DROP POLICY IF EXISTS "Users can insert their own books" ON books;
DROP POLICY IF EXISTS "Users can update their own books" ON books;
DROP POLICY IF EXISTS "Users can delete their own books" ON books;

CREATE POLICY "Allow shared access to books" ON books FOR ALL USING (true);

-- Vocabulary Groups: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own vocabulary groups" ON vocabulary_groups;
DROP POLICY IF EXISTS "Users can view public vocabulary groups" ON vocabulary_groups;
DROP POLICY IF EXISTS "Users can insert their own vocabulary groups" ON vocabulary_groups;
DROP POLICY IF EXISTS "Users can update their own vocabulary groups" ON vocabulary_groups;
DROP POLICY IF EXISTS "Users can delete their own vocabulary groups" ON vocabulary_groups;

CREATE POLICY "Allow shared access to vocabulary groups" ON vocabulary_groups FOR ALL USING (true);

-- Vocabulary: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own vocabulary" ON vocabulary;
DROP POLICY IF EXISTS "Users can insert their own vocabulary" ON vocabulary;
DROP POLICY IF EXISTS "Users can update their own vocabulary" ON vocabulary;
DROP POLICY IF EXISTS "Users can delete their own vocabulary" ON vocabulary;

CREATE POLICY "Allow shared access to vocabulary" ON vocabulary FOR ALL USING (true);

-- Vocabulary Group Items: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view vocabulary group items they own" ON vocabulary_group_items;
DROP POLICY IF EXISTS "Users can insert vocabulary group items they own" ON vocabulary_group_items;
DROP POLICY IF EXISTS "Users can update vocabulary group items they own" ON vocabulary_group_items;
DROP POLICY IF EXISTS "Users can delete vocabulary group items they own" ON vocabulary_group_items;

CREATE POLICY "Allow shared access to vocabulary group items" ON vocabulary_group_items FOR ALL USING (true);

-- Objectives: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own objectives" ON objectives;
DROP POLICY IF EXISTS "Users can view template objectives" ON objectives;
DROP POLICY IF EXISTS "Users can insert their own objectives" ON objectives;
DROP POLICY IF EXISTS "Users can update their own objectives" ON objectives;
DROP POLICY IF EXISTS "Users can delete their own objectives" ON objectives;

CREATE POLICY "Allow shared access to objectives" ON objectives FOR ALL USING (true);

-- Methods: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own methods" ON methods;
DROP POLICY IF EXISTS "Users can view template methods" ON methods;
DROP POLICY IF EXISTS "Users can insert their own methods" ON methods;
DROP POLICY IF EXISTS "Users can update their own methods" ON methods;
DROP POLICY IF EXISTS "Users can delete their own methods" ON methods;

CREATE POLICY "Allow shared access to methods" ON methods FOR ALL USING (true);

-- Tasks: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own tasks" ON tasks;
DROP POLICY IF EXISTS "Users can view template tasks" ON tasks;
DROP POLICY IF EXISTS "Users can insert their own tasks" ON tasks;
DROP POLICY IF EXISTS "Users can update their own tasks" ON tasks;
DROP POLICY IF EXISTS "Users can delete their own tasks" ON tasks;

CREATE POLICY "Allow shared access to tasks" ON tasks FOR ALL USING (true);

-- Schedules: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view their own schedules" ON schedules;
DROP POLICY IF EXISTS "Users can insert their own schedules" ON schedules;
DROP POLICY IF EXISTS "Users can update their own schedules" ON schedules;
DROP POLICY IF EXISTS "Users can delete their own schedules" ON schedules;

CREATE POLICY "Allow shared access to schedules" ON schedules FOR ALL USING (true);

-- Lessons: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lessons from their schedules" ON lessons;
DROP POLICY IF EXISTS "Users can insert lessons to their schedules" ON lessons;
DROP POLICY IF EXISTS "Users can update lessons in their schedules" ON lessons;
DROP POLICY IF EXISTS "Users can delete lessons from their schedules" ON lessons;

CREATE POLICY "Allow shared access to lessons" ON lessons FOR ALL USING (true);

-- Course Books: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view course books they own" ON course_books;
DROP POLICY IF EXISTS "Users can manage course books they own" ON course_books;

CREATE POLICY "Allow shared access to course books" ON course_books FOR ALL USING (true);

-- Course Vocabulary Groups: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view course vocabulary groups they own" ON course_vocabulary_groups;
DROP POLICY IF EXISTS "Users can manage course vocabulary groups they own" ON course_vocabulary_groups;

CREATE POLICY "Allow shared access to course vocabulary groups" ON course_vocabulary_groups FOR ALL USING (true);

-- Lesson Objectives: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lesson objectives they own" ON lesson_objectives;
DROP POLICY IF EXISTS "Users can manage lesson objectives they own" ON lesson_objectives;

CREATE POLICY "Allow shared access to lesson objectives" ON lesson_objectives FOR ALL USING (true);

-- Lesson Methods: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lesson methods they own" ON lesson_methods;
DROP POLICY IF EXISTS "Users can manage lesson methods they own" ON lesson_methods;

CREATE POLICY "Allow shared access to lesson methods" ON lesson_methods FOR ALL USING (true);

-- Lesson Tasks: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lesson tasks they own" ON lesson_tasks;
DROP POLICY IF EXISTS "Users can manage lesson tasks they own" ON lesson_tasks;

CREATE POLICY "Allow shared access to lesson tasks" ON lesson_tasks FOR ALL USING (true);

-- Lesson Books: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lesson books they own" ON lesson_books;
DROP POLICY IF EXISTS "Users can manage lesson books they own" ON lesson_books;

CREATE POLICY "Allow shared access to lesson books" ON lesson_books FOR ALL USING (true);

-- Lesson Vocabulary: Allow all operations for shared access
DROP POLICY IF EXISTS "Users can view lesson vocabulary they own" ON lesson_vocabulary;
DROP POLICY IF EXISTS "Users can manage lesson vocabulary they own" ON lesson_vocabulary;

CREATE POLICY "Allow shared access to lesson vocabulary" ON lesson_vocabulary FOR ALL USING (true);

-- Public Links: Keep existing policies as they are appropriate for public access
-- (No changes needed for public_links table)

================
File: migrations/create_course_objectives_table.sql
================
-- Create course_objectives table for managing course-objective relationships
CREATE TABLE IF NOT EXISTS course_objectives (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    course_id UUID NOT NULL REFERENCES courses(id) ON DELETE CASCADE,
    objective_id UUID NOT NULL REFERENCES objectives(id) ON DELETE CASCADE,
    position INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Ensure unique course-objective combinations
    UNIQUE(course_id, objective_id)
);

-- Create index for performance
CREATE INDEX IF NOT EXISTS idx_course_objectives_course_id ON course_objectives(course_id);
CREATE INDEX IF NOT EXISTS idx_course_objectives_objective_id ON course_objectives(objective_id);
CREATE INDEX IF NOT EXISTS idx_course_objectives_position ON course_objectives(course_id, position);

-- Add RLS (Row Level Security) policies
ALTER TABLE course_objectives ENABLE ROW LEVEL SECURITY;

-- Policy for SELECT (read)
CREATE POLICY "Allow read access to course_objectives" ON course_objectives
    FOR SELECT USING (true);

-- Policy for INSERT (create)
CREATE POLICY "Allow insert of course_objectives" ON course_objectives
    FOR INSERT WITH CHECK (true);

-- Policy for UPDATE (modify)
CREATE POLICY "Allow update of course_objectives" ON course_objectives
    FOR UPDATE USING (true);

-- Policy for DELETE (remove)
CREATE POLICY "Allow delete of course_objectives" ON course_objectives
    FOR DELETE USING (true);

-- Add helpful comments
COMMENT ON TABLE course_objectives IS 'Junction table for course-objective many-to-many relationships';
COMMENT ON COLUMN course_objectives.position IS 'Order of objectives within the course';
COMMENT ON COLUMN course_objectives.course_id IS 'Reference to the course';
COMMENT ON COLUMN course_objectives.objective_id IS 'Reference to the learning objective';

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    // typedRoutes: true,
  },
  images: {
    domains: ['localhost'],
    unoptimized: process.env.NODE_ENV === 'development',
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
        ],
      },
    ]
  },
}

module.exports = nextConfig

================
File: package.json
================
{
  "name": "course-builder",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -p 5001",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "@headlessui/react": "^2.1.2",
    "@heroicons/react": "^2.1.4",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/supabase-js": "^2.43.4",
    "@tailwindcss/forms": "^0.5.7",
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.19",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "lucide-react": "^0.513.0",
    "next": "14.2.5",
    "postcss": "^8.4.39",
    "react": "^18.3.1",
    "react-big-calendar": "^1.19.2",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.5.3"
  },
  "devDependencies": {
    "@types/react-big-calendar": "^1.16.2",
    "@typescript-eslint/eslint-plugin": "^7.16.0",
    "@typescript-eslint/parser": "^7.16.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.5",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Course Builder - Modular Course Design & Management Platform

A highly flexible, customizable online course construction tool that empowers educators, trainers, and content creators to efficiently design, combine, manage, and share structured, modular educational content.

## 🚀 Features

- **Course Management**: Create and manage courses by combining books, schedules, objectives, and methods
- **Book Library**: Centralized library of reusable educational materials
- **Vocabulary System**: Organize vocabulary with CEFR levels and part of speech categorization
- **Schedule Design**: Flexible teaching schedules with calendar views and lesson planning
- **Learning Objectives**: Reusable teaching objectives for consistency across courses
- **Teaching Methods**: Manage various teaching strategies (PBL, flipped classroom, etc.)
- **Bulk Operations**: Import/export functionality for efficient content management
- **Public Sharing**: Generate shareable links for stakeholders
- **Analytics Dashboard**: Comprehensive reporting and analytics

## 🛠️ Tech Stack

- **Frontend**: Next.js 14, TypeScript, Tailwind CSS
- **Backend**: Supabase (Database, Authentication, Storage)
- **UI Components**: Custom components with Headless UI
- **Styling**: Tailwind CSS with custom design system
- **Development**: ESLint, Prettier, TypeScript

## 📋 Prerequisites

- Node.js 18.17 or later
- npm or yarn package manager
- Git

## 🏗️ Installation

1. Clone the repository:
```bash
git clone <repository-url>
cd course-builder
```

2. Install dependencies:
```bash
npm install
```

3. Set up environment variables:
```bash
cp .env.example .env.local
```
Edit `.env.local` with your configuration values.

4. Run the development server:
```bash
npm run dev
```

5. Open [http://localhost:5001](http://localhost:5001) in your browser.

## 📁 Project Structure

```
src/
├── app/                 # Next.js App Router pages
├── components/          # Reusable UI components
│   └── ui/             # Base UI components
├── lib/                # Utility functions and configurations
├── types/              # TypeScript type definitions
├── utils/              # Helper functions
├── hooks/              # Custom React hooks
└── stores/             # State management
```

## 🔧 Available Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript type checking

## 🎯 Development Phases

### Phase 1: Foundation (Current)
- ✅ Project Setup and Architecture
- 🔄 Supabase Integration and Authentication
- ⏳ Database Schema Design
- ⏳ UI Component Library

### Phase 2: Core Modules
- Course Management Module
- Book Library Management
- Vocabulary Management System
- Schedule Design System

### Phase 3: Advanced Features
- Entity Relationships & Associations
- Bulk Import/Export Functionality
- Advanced Search & Filtering
- Public Sharing Links

### Phase 4: Polish & Deploy
- UI/UX Polish & Responsive Design
- Performance Optimization
- Security & Data Validation
- Testing Suite Implementation

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 📞 Support

For support, email support@coursebuilder.com or join our community discussions.

---

Built with ❤️ for educators and content creators.

================
File: src/app/auth/page.tsx
================
'use client';

import { useState } from 'react';
import { LoginForm } from '@/components/auth/LoginForm';
import { AuthGuard } from '@/components/auth/AuthGuard';

export default function AuthPage() {
  const [isSignUp, setIsSignUp] = useState(false);

  return (
    <AuthGuard requireAuth={false}>
      <div className="min-h-screen bg-gradient-to-br from-primary-50 to-gray-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-primary-600 mb-2">
              Course Builder
            </h1>
            <p className="text-gray-600">
              Modular Course Design & Management Platform
            </p>
          </div>
          
          <LoginForm 
            isSignUp={isSignUp}
            onToggleMode={() => setIsSignUp(!isSignUp)}
          />
          
          <div className="text-center text-sm text-gray-500">
            <p>
              By continuing, you agree to our{' '}
              <a href="/terms" className="text-primary-600 hover:text-primary-700">
                Terms of Service
              </a>{' '}
              and{' '}
              <a href="/privacy" className="text-primary-600 hover:text-primary-700">
                Privacy Policy
              </a>
            </p>
          </div>
        </div>
      </div>
    </AuthGuard>
  );
}

================
File: src/app/books/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { BookForm } from '@/components/books/BookForm';
import { bookService } from '@/lib/supabase/books';
import { Spinner } from '@/components/ui';
import { Book } from '@/types/database';

export default function EditBookPage() {
  const router = useRouter();
  const params = useParams();
  const bookId = params.id as string;
  const [book, setBook] = useState<Book | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (bookId) {
      loadBook();
    }
  }, [bookId]);

  const loadBook = async () => {
    try {
      setLoading(true);
      const data = await bookService.getBook(bookId);
      setBook(data);
    } catch (error) {
      console.error('Failed to load book:', error);
      router.push('/books');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!book) {
    return null;
  }

  return <BookForm initialData={book} />;
}

================
File: src/app/books/[id]/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ArrowLeft, Edit, Trash2, Globe, Lock, BookOpen, Users } from 'lucide-react';
import { Book, VocabularyGroup } from '@/types/database';
import { bookService } from '@/lib/supabase/books';
import { Button, Card, Badge, Modal, Spinner } from '@/components/ui';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function BookDetailPage() {
  const router = useRouter();
  const params = useParams();
  const supabase = createClientComponentClient();
  const bookId = params.id as string;
  const [book, setBook] = useState<Book | null>(null);
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [vocabGroups, setVocabGroups] = useState<VocabularyGroup[]>([]);
  const [vocabGroupsLoading, setVocabGroupsLoading] = useState(false);

  useEffect(() => {
    if (bookId) {
      loadBook();
      loadVocabGroups();
    }
  }, [bookId]);

  const loadBook = async () => {
    setLoading(true);
    try {
      const data = await bookService.getBook(bookId);
      setBook(data);
    } catch (error) {
      console.error('Failed to load book:', error);
      router.push('/books');
    } finally {
      setLoading(false);
    }
  };

  const loadVocabGroups = async () => {
    setVocabGroupsLoading(true);
    try {
      const { data, error } = await supabase
        .from('vocabulary_group_books')
        .select(`
          vocabulary_group:vocabulary_groups(
            id,
            name,
            description,
            difficulty,
            language,
            target_language
          )
        `)
        .eq('book_id', bookId);

      if (error) throw error;
      
      const groups = data
        ?.map((item: any) => item.vocabulary_group)
        .filter(Boolean) as VocabularyGroup[] || [];
      
      setVocabGroups(groups);
    } catch (error) {
      console.error('Failed to load vocabulary groups:', error);
    } finally {
      setVocabGroupsLoading(false);
    }
  };

  const handleDelete = async () => {
    setDeleting(true);
    try {
      await bookService.deleteBook(bookId);
      router.push('/books');
      router.refresh();
    } catch (error) {
      console.error('Failed to delete book:', error);
    } finally {
      setDeleting(false);
      setShowDeleteModal(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!book) return null;

  return (
    <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => router.push('/books')}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back to Books
        </Button>
        
        <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-6">
          <div className="flex items-start gap-6">
            {book.cover_image_url ? (
              <img src={book.cover_image_url} alt={book.title} className="w-40 h-56 rounded-lg object-cover shadow-lg" />
            ) : (
              <div className="w-40 h-56 rounded-lg bg-gray-200 flex items-center justify-center">
                <BookOpen className="w-16 h-16 text-gray-400" />
              </div>
            )}
            <div className="flex-1">
              <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">{book.title}</h1>
              {book.author && <p className="text-lg text-gray-600 mt-1">by {book.author}</p>}
              <div className="flex items-center gap-3 mt-4">
                <Badge variant={book.is_public ? 'success' : 'secondary'}>
                  {book.is_public ? <Globe className="h-4 w-4 mr-1.5" /> : <Lock className="h-4 w-4 mr-1.5" />}
                  {book.is_public ? 'Public' : 'Private'}
                </Badge>
                {book.category && (
                  <Badge style={{ backgroundColor: `${book.category.color}20`, color: book.category.color }}>
                    {book.category.name}
                  </Badge>
                )}
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-2 flex-shrink-0">
            <Button
              variant="outline"
              onClick={() => router.push(`/books/${bookId}/edit`)}
              leftIcon={<Edit className="h-4 w-4" />}
            >
              Edit
            </Button>
            <Button
              variant="danger"
              onClick={() => setShowDeleteModal(true)}
              leftIcon={<Trash2 className="h-4 w-4" />}
              className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
            >
              Delete
            </Button>
          </div>
        </div>
      </div>

      <div className="space-y-6">
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Description</h2></Card.Header>
          <Card.Content>
            <div className="prose prose-sm max-w-none dark:prose-invert">
              {book.description || <p className="text-gray-500 italic">No description provided.</p>}
            </div>
          </Card.Content>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <Card.Header><h2 className="text-lg font-semibold">Details</h2></Card.Header>
              <Card.Content>
                <dl className="space-y-3 text-sm">
                    {book.publisher && <div><dt className="font-medium text-gray-500">Publisher</dt><dd>{book.publisher}</dd></div>}
                    {book.publication_year && <div><dt className="font-medium text-gray-500">Year</dt><dd>{book.publication_year}</dd></div>}
                    {book.language && <div><dt className="font-medium text-gray-500">Language</dt><dd className="uppercase">{book.language}</dd></div>}
                    {book.content_type && <div><dt className="font-medium text-gray-500">Content Type</dt><dd className="capitalize">{book.content_type}</dd></div>}
                </dl>
              </Card.Content>
            </Card>
            {book.tags && book.tags.length > 0 && (
                 <Card>
                   <Card.Header><h2 className="text-lg font-semibold">Tags</h2></Card.Header>
                   <Card.Content>
                     <div className="flex flex-wrap gap-2">
                       {book.tags.map((tag) => <Badge key={tag}>{tag}</Badge>)}
                     </div>
                   </Card.Content>
                 </Card>
            )}
        </div>

        <Card>
          <Card.Header>
            <div className="flex items-center gap-2">
              <Users className="h-5 w-5" />
              <h2 className="text-lg font-semibold">Related Vocabulary Groups</h2>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Vocabulary groups that contain words from this book
            </p>
          </Card.Header>
          <Card.Content>
            {vocabGroupsLoading ? (
              <div className="flex justify-center py-8">
                <Spinner size="md" />
              </div>
            ) : vocabGroups.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">No vocabulary groups are associated with this book.</p>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push(`/books/${bookId}/edit`)}
                  className="mt-3"
                >
                  Add Vocabulary Groups
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3">
                {vocabGroups.map((group) => (
                  <div
                    key={group.id}
                    className="border rounded-lg p-3 hover:shadow-md transition-shadow cursor-pointer"
                    onClick={() => router.push(`/vocabulary/groups/${group.id}`)}
                  >
                    <div className="space-y-2">
                      <div className="flex items-start justify-between">
                        <h4 className="font-medium text-sm line-clamp-2 flex-1" title={group.name}>
                          {group.name}
                        </h4>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="secondary" className="text-xs">
                          {group.difficulty}
                        </Badge>
                        {group.language && group.target_language && (
                          <Badge variant="outline" className="text-xs">
                            {group.language} → {group.target_language}
                          </Badge>
                        )}
                      </div>
                      {group.description && (
                        <p className="text-xs text-gray-600 dark:text-gray-400 line-clamp-2" title={group.description}>
                          {group.description}
                        </p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </Card.Content>
        </Card>
      </div>
      
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Delete Book"
        className="max-w-md"
      >
        <p className="text-gray-600 dark:text-gray-400">
          Are you sure you want to delete &quot;{book.title}&quot;? This action cannot be undone.
        </p>
        <div className="flex justify-end gap-3 mt-6">
          <Button variant="outline" onClick={() => setShowDeleteModal(false)}>Cancel</Button>
          <Button variant="danger" onClick={handleDelete} loading={deleting}>Delete Book</Button>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/app/books/layout.tsx
================
'use client';

import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { AuthGuard } from '@/components/auth/AuthGuard';

export default function BooksLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthGuard>
      <DashboardLayout>{children}</DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/books/new/page.tsx
================
'use client';

import { BookForm } from '@/components/books/BookForm';

export default function NewBookPage() {
  return <BookForm />;
}

================
File: src/app/books/page.tsx
================
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { 
  Plus, Search, Filter, BookOpen, FileText, Video, 
  Headphones, Image as ImageIcon, Gamepad2, Grid, List, Upload 
} from 'lucide-react';
import { Book, ContentType } from '@/types/database';
import { bookService, BookFilters } from '@/lib/supabase/books';
import { categoryService } from '@/lib/supabase/categories';
import { 
  Button, Card, Badge, SearchBox, FilterPanel, Spinner, Select 
} from '@/components/ui';
import { BookImportModal } from '@/components/books/BookImportModal';
import { cn } from '@/lib/utils';

const contentTypeIcons: Record<ContentType, React.ReactNode> = {
  text: <FileText className="h-4 w-4" />,
  pdf: <FileText className="h-4 w-4" />,
  video: <Video className="h-4 w-4" />,
  audio: <Headphones className="h-4 w-4" />,
  image: <ImageIcon className="h-4 w-4" />,
  interactive: <Gamepad2 className="h-4 w-4" />,
};

const contentTypeColors: Record<ContentType, string> = {
  text: 'default',
  pdf: 'danger',
  video: 'primary',
  audio: 'warning',
  image: 'success',
  interactive: 'info',
};

export default function BooksPage() {
  const router = useRouter();
  const [books, setBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState<BookFilters>({});
  const [stats, setStats] = useState({
    total: 0,
    text: 0,
    video: 0,
    audio: 0,
    pdf: 0,
    other: 0,
  });
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [authors, setAuthors] = useState<string[]>([]);
  const [languages, setLanguages] = useState<string[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  
  // State to control the visibility of the filter panel
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);

  useEffect(() => {
    loadInitialData();
  }, []);

  const loadBooks = useCallback(async () => {
    try {
      setLoading(true);
      const data = await bookService.getBooks(filters);
      setBooks(data);
    } catch (error) {
      console.error('Failed to load books:', error);
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    loadBooks();
  }, [loadBooks]);

  const loadInitialData = async () => {
    try {
      const [authorsData, languagesData, categoriesData, statsData] = await Promise.all([
        bookService.getAuthors(),
        bookService.getLanguages(),
        categoryService.getCategories({ type: 'book' }),
        bookService.getBookStats(),
      ]);
      
      setAuthors(authorsData);
      setLanguages(languagesData);
      setCategories(categoriesData);
      setStats(statsData);
    } catch (error) {
      console.error('Failed to load initial data:', error);
    }
  };


  const handleSearch = (search: string) => {
    setFilters({ ...filters, search });
  };

  const handleFilterChange = (filterId: string, value: any) => {
    setFilters({ ...filters, [filterId]: value });
  };

  const handleImportComplete = () => {
    loadBooks();
    loadInitialData();
  };

  const contentTypes = bookService.getContentTypes();

  const filterGroups = [
    {
      id: 'contentType',
      label: 'Content Type',
      type: 'checkbox' as const,
      options: contentTypes.map(type => ({
        value: type.value,
        label: type.label,
        icon: contentTypeIcons[type.value],
      })),
    },
    {
      id: 'author',
      label: 'Author',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Authors' },
        ...authors.map(author => ({ value: author, label: author })),
      ],
    },
    {
      id: 'language',
      label: 'Language',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Languages' },
        ...languages.map(lang => ({ value: lang, label: lang.toUpperCase() })),
      ],
    },
    {
      id: 'categoryId',
      label: 'Category',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Categories' },
        ...categories.map(cat => ({ value: cat.id, label: cat.name })),
      ],
    },
  ];

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Book Library</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Manage your books and learning materials
          </p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded",
                viewMode === 'grid'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <Grid className="h-4 w-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded",
                viewMode === 'list'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <List className="h-4 w-4" />
            </button>
          </div>
          <Button
            variant="outline"
            onClick={() => setShowImportModal(true)}
            leftIcon={<Upload className="h-4 w-4" />}
          >
            Import
          </Button>
          <Button
            onClick={() => router.push('/books/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Book
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {stats.total}
              </p>
            </div>
            <BookOpen className="h-8 w-8 text-gray-400" />
          </div>
        </Card>
        {Object.entries(contentTypeIcons).slice(0, 5).map(([type, icon]) => (
          <Card key={type} className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400 capitalize">
                  {type}
                </p>
                <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                  {stats[type as keyof typeof stats] || 0}
                </p>
              </div>
              <div className="text-gray-400">{icon}</div>
            </div>
          </Card>
        ))}
      </div>

      {/* Search and Filters */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <SearchBox
              placeholder="Search by title, author, or description..."
              onSearch={handleSearch}
              fullWidth
            />
          </div>
          <Button
            variant="outline"
            onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
            leftIcon={<Filter className="h-4 w-4" />}
          >
            Filters
          </Button>
        </div>

        {isFilterPanelOpen && (
          <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
              <FilterPanel
                  filters={filterGroups}
                  values={filters}
                  onChange={handleFilterChange}
                  onReset={() => setFilters({})}
                  collapsible={false}
              />
          </div>
        )}
      </div>


      {/* Books Display */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : books.length === 0 ? (
        <Card className="p-12 text-center">
          <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No books found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Start building your library by adding your first book.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/books/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Book
          </Button>
        </Card>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4">
          {books.map((book) => {
            const vocabGroups = book.vocabulary_group_books?.map(vgb => vgb.vocabulary_group).filter(Boolean) || [];
            return (
              <Card
                key={book.id}
                className="hover:shadow-md transition-shadow cursor-pointer overflow-hidden"
                onClick={() => router.push(`/books/${book.id}`)}
              >
                {book.cover_image_url ? (
                  <div className="h-32 overflow-hidden bg-gray-100">
                    <img
                      src={book.cover_image_url}
                      alt={book.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                ) : (
                  <div className="h-32 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800 flex items-center justify-center">
                    <BookOpen className="h-10 w-10 text-gray-400" />
                  </div>
                )}
                <Card.Content className="p-3">
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="text-sm font-semibold text-gray-900 dark:text-gray-100 line-clamp-2 flex-1">
                      {book.title}
                    </h3>
                    <Badge
                      variant={contentTypeColors[book.content_type] as any}
                      size="sm"
                      className="ml-1 text-xs"
                    >
                      {contentTypeIcons[book.content_type]}
                    </Badge>
                  </div>
                  
                  {book.author && (
                    <p className="text-xs text-gray-600 dark:text-gray-400 mb-2 line-clamp-1">
                      by {book.author}
                    </p>
                  )}
                  
                  <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
                    {book.publication_year && (
                      <span>{book.publication_year}</span>
                    )}
                    {book.language && (
                      <span className="uppercase">{book.language}</span>
                    )}
                  </div>
                  
                  {vocabGroups.length > 0 && (
                    <div className="mb-2">
                      <p className="text-xs text-gray-500 mb-1">Vocabulary Groups ({vocabGroups.length})</p>
                      <div className="flex flex-wrap gap-1">
                        {vocabGroups.slice(0, 2).map((group) => group && (
                          <Badge
                            key={group.id}
                            variant="outline"
                            className="text-xs px-1 py-0.5"
                            title={group.name}
                          >
                            {group.name.length > 12 ? `${group.name.substring(0, 12)}...` : group.name}
                          </Badge>
                        ))}
                        {vocabGroups.length > 2 && (
                          <Badge variant="outline" className="text-xs px-1 py-0.5">
                            +{vocabGroups.length - 2}
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {book.category && (
                    <div className="mt-2">
                      <span
                        className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium"
                        style={{
                          backgroundColor: book.category.color ? `${book.category.color}20` : undefined,
                          color: book.category.color || undefined,
                        }}
                      >
                        {book.category.name}
                      </span>
                    </div>
                  )}
                </Card.Content>
              </Card>
            );
          })}
        </div>
      ) : (
        <div className="space-y-4">
          {books.map((book) => {
            const vocabGroups = book.vocabulary_group_books?.map(vgb => vgb.vocabulary_group).filter(Boolean) || [];
            return (
              <Card
                key={book.id}
                className="hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => router.push(`/books/${book.id}`)}
              >
                <Card.Content className="p-4">
                  <div className="flex items-start gap-4">
                    {book.cover_image_url ? (
                      <img
                        src={book.cover_image_url}
                        alt={book.title}
                        className="w-20 h-28 object-cover rounded"
                      />
                    ) : (
                      <div className="w-20 h-28 bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center">
                        <BookOpen className="h-8 w-8 text-gray-400" />
                      </div>
                    )}
                    <div className="flex-1">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                            {book.title}
                          </h3>
                          {book.author && (
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              by {book.author}
                            </p>
                          )}
                        </div>
                        <Badge
                          variant={contentTypeColors[book.content_type] as any}
                          size="sm"
                        >
                          {book.content_type}
                        </Badge>
                      </div>
                      
                      {book.description && (
                        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                          {book.description}
                        </p>
                      )}
                      
                      <div className="mt-3 flex items-center gap-4 text-sm text-gray-500">
                        {book.publisher && <span>Publisher: {book.publisher}</span>}
                        {book.publication_year && <span>{book.publication_year}</span>}
                        {book.total_pages && <span>{book.total_pages} pages</span>}
                        {book.language && <span className="uppercase">{book.language}</span>}
                      </div>
                      
                      {vocabGroups.length > 0 && (
                        <div className="mt-3">
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                            Vocabulary Groups ({vocabGroups.length})
                          </p>
                          <div className="flex flex-wrap gap-1">
                            {vocabGroups.slice(0, 4).map((group) => group && (
                              <Badge
                                key={group.id}
                                variant="outline"
                                className="text-xs"
                                title={group.name}
                              >
                                {group.name}
                              </Badge>
                            ))}
                            {vocabGroups.length > 4 && (
                              <Badge variant="outline" className="text-xs">
                                +{vocabGroups.length - 4} more
                              </Badge>
                            )}
                          </div>
                        </div>
                      )}
                      
                      <div className="mt-3 flex items-center gap-2">
                        {book.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: book.category.color ? `${book.category.color}20` : undefined,
                              color: book.category.color || undefined,
                            }}
                          >
                            {book.category.name}
                          </span>
                        )}
                        {book.tags && book.tags.length > 0 && (
                          <>
                            {book.tags.slice(0, 3).map((tag) => (
                              <span
                                key={tag}
                                className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                              >
                                {tag}
                              </span>
                            ))}
                            {book.tags.length > 3 && (
                              <span className="text-xs text-gray-500">
                                +{book.tags.length - 3}
                              </span>
                            )}
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </Card.Content>
              </Card>
            );
          })}
        </div>
      )}

      <BookImportModal
        isOpen={showImportModal}
        onClose={() => setShowImportModal(false)}
        onImportComplete={handleImportComplete}
      />
    </div>
  );
}

================
File: src/app/courses/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { CourseForm } from '@/components/courses/CourseForm';
import { courseService } from '@/lib/supabase/courses';
import { Spinner } from '@/components/ui';
import { Course } from '@/types/database';

export default function EditCoursePage() {
  const router = useRouter();
  const params = useParams();
  const courseId = params.id as string;
  
  const [course, setCourse] = useState<Course | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (courseId) {
      loadCourse();
    }
  }, [courseId]);

  const loadCourse = async () => {
    try {
      setLoading(true);
      const data = await courseService.getCourse(courseId);
      setCourse(data);
    } catch (error) {
      console.error('Failed to load course:', error);
      router.push('/courses');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!course) {
    return null;
  }

  return <CourseForm initialData={course} />;
}

================
File: src/app/courses/[id]/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams, useSearchParams } from 'next/navigation';
import { 
  ArrowLeft, Edit, Trash2, Archive, Globe, Lock, 
  Book, Bookmark, Calendar, Clock, Target, AlertCircle,
  MoreVertical, Share2, Copy, CheckCircle, Settings, FileText
} from 'lucide-react';
import { Course } from '@/types/database';
import { courseService } from '@/lib/supabase/courses';
import { Button, Card, Badge, Modal, Spinner, Tabs, TabsList, TabsTrigger } from '@/components/ui';
import { 
  CourseBookManager, 
  CourseVocabularyManager, 
  CourseScheduleList,
  CourseLessonsWithSchedules,
  CourseObjectiveManager,
  CourseMethodManager,
  CourseTaskManager
} from '@/components/relationships';
import { cn } from '@/lib/utils';

const statusColors = {
  draft: 'default',
  published: 'success',
  archived: 'secondary',
} as const;

const difficultyColors = {
  beginner: 'info',
  intermediate: 'warning',
  advanced: 'danger',
  expert: 'primary',
} as const;

export default function CourseDetailPage() {
  const router = useRouter();
  const params = useParams();
  const searchParams = useSearchParams();
  const courseId = params.id as string;
  
  const [course, setCourse] = useState<Course | null>(null);
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [activeTab, setActiveTab] = useState(searchParams.get('tab') || 'overview');
  const [copied, setCopied] = useState(false);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);

  useEffect(() => {
    if (courseId) {
      loadCourse();
    }
  }, [courseId]);

  useEffect(() => {
    const attachedCount = searchParams.get('attached');
    if (attachedCount && parseInt(attachedCount) > 0) {
      setShowSuccessMessage(true);
      setTimeout(() => setShowSuccessMessage(false), 5000);
    }
  }, [searchParams]);

  const loadCourse = async () => {
    try {
      setLoading(true);
      const data = await courseService.getCourse(courseId);
      setCourse(data);
    } catch (error) {
      console.error('Failed to load course:', error);
      router.push('/courses');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    try {
      setDeleting(true);
      await courseService.deleteCourse(courseId);
      router.push('/courses');
    } catch (error) {
      console.error('Failed to delete course:', error);
    } finally {
      setDeleting(false);
      setShowDeleteModal(false);
    }
  };

  const handleArchive = async () => {
    try {
      await courseService.archiveCourse(courseId);
      await loadCourse();
    } catch (error) {
      console.error('Failed to archive course:', error);
    }
  };

  const handlePublish = async () => {
    try {
      await courseService.publishCourse(courseId);
      await loadCourse();
    } catch (error) {
      console.error('Failed to publish course:', error);
    }
  };

  const handleCopyPublicLink = () => {
    if (course?.public_slug) {
      const publicUrl = `${window.location.origin}/public/courses/${course.public_slug}`;
      navigator.clipboard.writeText(publicUrl);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!course) {
    return null;
  }

  const tabs = [
    { id: 'overview', label: 'Overview', icon: <Book className="h-4 w-4" /> },
    { id: 'materials', label: 'Materials', icon: <Bookmark className="h-4 w-4" /> },
    { id: 'schedule', label: 'Schedule', icon: <Calendar className="h-4 w-4" /> },
    { id: 'lessons', label: 'Lessons', icon: <Clock className="h-4 w-4" /> },
    { id: 'objectives', label: 'Objectives', icon: <Target className="h-4 w-4" /> },
    { id: 'methods', label: 'Methods', icon: <Settings className="h-4 w-4" /> },
    { id: 'tasks', label: 'Tasks', icon: <FileText className="h-4 w-4" /> },
  ];

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => router.push('/courses')}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back to Courses
        </Button>
        
        <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
          <div className="flex-1">
            <div className="flex items-start gap-4">
              {course.thumbnail_url && (
                <img
                  src={course.thumbnail_url}
                  alt={course.title}
                  className="w-24 h-24 rounded-lg object-cover"
                />
              )}
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">
                    {course.title}
                  </h1>
                  <Badge variant={statusColors[course.status]}>
                    {course.status}
                  </Badge>
                  {course.is_public ? (
                    <Globe className="h-5 w-5 text-green-500" />
                  ) : (
                    <Lock className="h-5 w-5 text-gray-400" />
                  )}
                </div>
                
                {course.short_description && (
                  <p className="text-lg text-gray-600 dark:text-gray-400 mb-4">
                    {course.short_description}
                  </p>
                )}
                
                <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
                  <Badge variant={difficultyColors[course.difficulty]} size="sm">
                    {course.difficulty}
                  </Badge>
                  
                  {course.duration_hours && (
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      <span>{course.duration_hours} hours</span>
                    </div>
                  )}
                  
                  {course.category && (
                    <span
                      className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                      style={{
                        backgroundColor: course.category.color ? `${course.category.color}20` : undefined,
                        color: course.category.color || undefined,
                      }}
                    >
                      {course.category.name}
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Actions */}
          <div className="flex items-center gap-2">
            {course.status === 'draft' && (
              <Button
                variant="primary"
                onClick={handlePublish}
                leftIcon={<CheckCircle className="h-4 w-4" />}
              >
                Publish
              </Button>
            )}
            
            {course.status === 'published' && course.public_slug && (
              <Button
                variant="outline"
                onClick={handleCopyPublicLink}
                leftIcon={copied ? <CheckCircle className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
              >
                {copied ? 'Copied!' : 'Copy Link'}
              </Button>
            )}
            
            <Button
              variant="outline"
              onClick={() => router.push(`/courses/${courseId}/edit`)}
              leftIcon={<Edit className="h-4 w-4" />}
            >
              Edit
            </Button>
            
            {course.status !== 'archived' && (
              <Button
                variant="outline"
                onClick={handleArchive}
                leftIcon={<Archive className="h-4 w-4" />}
              >
                Archive
              </Button>
            )}
            
            <Button
              variant="outline"
              onClick={() => setShowDeleteModal(true)}
              leftIcon={<Trash2 className="h-4 w-4" />}
              className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
            >
              Delete
            </Button>
          </div>
        </div>
      </div>

      {/* Success Message */}
      {showSuccessMessage && (
        <div className="mb-6 p-4 bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400 rounded-lg border border-green-200 dark:border-green-800">
          <div className="flex items-center gap-2">
            <CheckCircle className="h-4 w-4" />
            <span className="font-medium">
              Successfully attached {searchParams.get('attached')} schedule{parseInt(searchParams.get('attached') || '0') !== 1 ? 's' : ''} to this course!
            </span>
          </div>
        </div>
      )}

      {/* Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-6">
        <TabsList>
          {tabs.map((tab) => (
            <TabsTrigger key={tab.id} value={tab.id}>
              {tab.icon}
              <span className="ml-2">{tab.label}</span>
            </TabsTrigger>
          ))}
        </TabsList>
      </Tabs>

      {/* Tab Content */}
      {activeTab === 'overview' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            {/* Description */}
            <Card>
              <Card.Header>
                <h2 className="text-lg font-semibold">Description</h2>
              </Card.Header>
              <Card.Content>
                <div className="prose prose-sm max-w-none dark:prose-invert">
                  {course.description || (
                    <p className="text-gray-500 italic">No description provided</p>
                  )}
                </div>
              </Card.Content>
            </Card>

            {/* Learning Objectives */}
            {course.course_objectives && course.course_objectives.length > 0 && (
              <Card>
                <Card.Header>
                  <h2 className="text-lg font-semibold flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    Learning Objectives
                  </h2>
                </Card.Header>
                <Card.Content>
                  <ul className="space-y-3">
                    {course.course_objectives
                      .sort((a, b) => a.position - b.position)
                      .map((courseObjective) => (
                        <li key={courseObjective.id} className="flex items-start gap-3">
                          <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                          <div className="flex-1">
                            <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100">
                              {courseObjective.objective?.title}
                            </h4>
                            {courseObjective.objective?.description && (
                              <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">
                                {courseObjective.objective.description}
                              </p>
                            )}
                            <div className="flex items-center gap-2 mt-2">
                              {courseObjective.objective?.bloom_level && (
                                <Badge variant="secondary" size="sm">
                                  {courseObjective.objective.bloom_level}
                                </Badge>
                              )}
                              {courseObjective.objective?.measurable && (
                                <Badge variant="outline" size="sm">
                                  Measurable
                                </Badge>
                              )}
                            </div>
                          </div>
                        </li>
                      ))}
                  </ul>
                </Card.Content>
              </Card>
            )}

            {/* Prerequisites */}
            {course.prerequisites && course.prerequisites.length > 0 && (
              <Card>
                <Card.Header>
                  <h2 className="text-lg font-semibold flex items-center gap-2">
                    <AlertCircle className="h-5 w-5" />
                    Prerequisites
                  </h2>
                </Card.Header>
                <Card.Content>
                  <ul className="space-y-2">
                    {course.prerequisites.map((prerequisite, index) => (
                      <li key={index} className="flex items-start gap-2">
                        <span className="text-gray-400">•</span>
                        <span className="text-sm">{prerequisite}</span>
                      </li>
                    ))}
                  </ul>
                </Card.Content>
              </Card>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Tags */}
            {course.tags && course.tags.length > 0 && (
              <Card>
                <Card.Header>
                  <h3 className="text-sm font-semibold">Tags</h3>
                </Card.Header>
                <Card.Content>
                  <div className="flex flex-wrap gap-2">
                    {course.tags.map((tag) => (
                      <span
                        key={tag}
                        className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </Card.Content>
              </Card>
            )}

            {/* Metadata */}
            <Card>
              <Card.Header>
                <h3 className="text-sm font-semibold">Course Information</h3>
              </Card.Header>
              <Card.Content>
                <dl className="space-y-3 text-sm">
                  <div>
                    <dt className="text-gray-500 dark:text-gray-400">Created</dt>
                    <dd className="font-medium">
                      {new Date(course.created_at).toLocaleDateString()}
                    </dd>
                  </div>
                  <div>
                    <dt className="text-gray-500 dark:text-gray-400">Last Updated</dt>
                    <dd className="font-medium">
                      {new Date(course.updated_at).toLocaleDateString()}
                    </dd>
                  </div>
                  {course.published_at && (
                    <div>
                      <dt className="text-gray-500 dark:text-gray-400">Published</dt>
                      <dd className="font-medium">
                        {new Date(course.published_at).toLocaleDateString()}
                      </dd>
                    </div>
                  )}
                  <div>
                    <dt className="text-gray-500 dark:text-gray-400">Course ID</dt>
                    <dd className="font-mono text-xs">{course.id}</dd>
                  </div>
                </dl>
              </Card.Content>
            </Card>
          </div>
        </div>
      )}

      {activeTab === 'materials' && (
        <div className="space-y-6">
          {/* Books */}
          <Card>
            <Card.Header>
              <h2 className="text-lg font-semibold">Course Materials</h2>
            </Card.Header>
            <Card.Content className="space-y-8">
              <CourseBookManager courseId={courseId} onUpdate={loadCourse} />
              <div className="border-t pt-8">
                <CourseVocabularyManager courseId={courseId} onUpdate={loadCourse} />
              </div>
            </Card.Content>
          </Card>
        </div>
      )}

      {activeTab === 'schedule' && (
        <Card>
          <Card.Content>
            <CourseScheduleList courseId={courseId} />
          </Card.Content>
        </Card>
      )}

      {activeTab === 'lessons' && (
        <Card>
          <Card.Header>
            <h2 className="text-lg font-semibold">Course Lessons</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Select a schedule to view and manage its lessons. Lessons are automatically created from course schedules.
            </p>
          </Card.Header>
          <Card.Content>
            <CourseLessonsWithSchedules courseId={courseId} />
          </Card.Content>
        </Card>
      )}

      {activeTab === 'objectives' && (
        <Card>
          <Card.Content>
            <CourseObjectiveManager courseId={courseId} onUpdate={loadCourse} />
          </Card.Content>
        </Card>
      )}

      {activeTab === 'methods' && (
        <Card>
          <Card.Content>
            <CourseMethodManager courseId={courseId} onUpdate={loadCourse} />
          </Card.Content>
        </Card>
      )}

      {activeTab === 'tasks' && (
        <Card>
          <Card.Content>
            <CourseTaskManager courseId={courseId} onUpdate={loadCourse} />
          </Card.Content>
        </Card>
      )}

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Delete Course"
        className="max-w-md"
      >
        <p className="text-gray-600 dark:text-gray-400">
          Are you sure you want to delete &quot;{course.title}&quot;? This action cannot be undone.
        </p>
        <div className="flex justify-end gap-3 mt-6">
          <Button
            variant="outline"
            onClick={() => setShowDeleteModal(false)}
          >
            Cancel
          </Button>
          <Button
            variant="danger"
            onClick={handleDelete}
            loading={deleting}
          >
            Delete Course
          </Button>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/app/courses/layout.tsx
================
'use client';

import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { AuthGuard } from '@/components/auth/AuthGuard';

export default function CoursesLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthGuard>
      <DashboardLayout>{children}</DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/courses/new/page.tsx
================
'use client';

import { CourseForm } from '@/components/courses/CourseForm';

export default function NewCoursePage() {
  return <CourseForm />;
}

================
File: src/app/courses/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Search, Filter, BookOpen, Clock, BarChart3 } from 'lucide-react';
import { Course, CourseStatus, DifficultyLevel } from '@/types/database';
import { courseService, CourseFilters } from '@/lib/supabase/courses';
import { Button, Card, Badge, SearchBox, FilterPanel, Spinner } from '@/components/ui';
import { cn } from '@/lib/utils';

const statusColors: Record<CourseStatus, string> = {
  draft: 'default',
  published: 'success',
  archived: 'secondary',
};

const difficultyColors: Record<DifficultyLevel, string> = {
  beginner: 'info',
  intermediate: 'warning',
  advanced: 'danger',
  expert: 'primary',
};

export default function CoursesPage() {
  const router = useRouter();
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState<CourseFilters>({});
  const [stats, setStats] = useState({
    total: 0,
    draft: 0,
    published: 0,
    archived: 0,
  });
  // State to control the visibility of the filter panel
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false);

  useEffect(() => {
    loadCourses();
    loadStats();
  }, [filters]);

  const loadCourses = async () => {
    try {
      setLoading(true);
      const data = await courseService.getCourses(filters);
      setCourses(data);
    } catch (error) {
      console.error('Failed to load courses:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    try {
      const data = await courseService.getCourseStats();
      setStats(data);
    } catch (error) {
      console.error('Failed to load stats:', error);
    }
  };

  const handleSearch = (search: string) => {
    setFilters({ ...filters, search });
  };

  const handleFilterChange = (filterId: string, value: any) => {
    setFilters({ ...filters, [filterId]: value });
  };

  const filterGroups = [
    {
      id: 'status',
      label: 'Status',
      type: 'checkbox' as const,
      options: [
        { value: 'draft', label: 'Draft', count: stats.draft },
        { value: 'published', label: 'Published', count: stats.published },
        { value: 'archived', label: 'Archived', count: stats.archived },
      ],
    },
    {
      id: 'difficulty',
      label: 'Difficulty',
      type: 'radio' as const,
      options: [
        { value: 'beginner', label: 'Beginner' },
        { value: 'intermediate', label: 'Intermediate' },
        { value: 'advanced', label: 'Advanced' },
        { value: 'expert', label: 'Expert' },
      ],
    },
  ];

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Courses</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Manage your courses and learning materials
          </p>
        </div>
        <Button
          onClick={() => router.push('/courses/new')}
          leftIcon={<Plus className="h-4 w-4" />}
        >
          Create Course
        </Button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Courses</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {stats.total}
              </p>
            </div>
            <BookOpen className="h-8 w-8 text-gray-400" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Draft</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {stats.draft}
              </p>
            </div>
            <Clock className="h-8 w-8 text-gray-400" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Published</p>
              <p className="mt-1 text-2xl font-semibold text-green-600 dark:text-green-400">
                {stats.published}
              </p>
            </div>
            <BarChart3 className="h-8 w-8 text-green-400" />
          </div>
        </Card>
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Archived</p>
              <p className="mt-1 text-2xl font-semibold text-gray-500 dark:text-gray-400">
                {stats.archived}
              </p>
            </div>
            <Filter className="h-8 w-8 text-gray-400" />
          </div>
        </Card>
      </div>

      {/* Search and Filters */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
                <SearchBox
                    placeholder="Search courses..."
                    onSearch={handleSearch}
                    fullWidth
                />
            </div>
            <Button
                variant="outline"
                onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
                leftIcon={<Filter className="h-4 w-4" />}
            >
                Filters
            </Button>
        </div>
        {isFilterPanelOpen && (
            <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
                <FilterPanel
                    filters={filterGroups}
                    values={filters}
                    onChange={handleFilterChange}
                    onReset={() => setFilters({})}
                    collapsible={false}
                />
            </div>
        )}
      </div>


      {/* Course Grid */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : courses.length === 0 ? (
        <Card className="p-12 text-center">
          <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No courses found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Get started by creating your first course.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/courses/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create Course
          </Button>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {courses.map((course) => (
            <Card
              key={course.id}
              className="hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => router.push(`/courses/${course.id}`)}
            >
              {course.thumbnail_url && (
                <div className="h-48 overflow-hidden rounded-t-lg">
                  <img
                    src={course.thumbnail_url}
                    alt={course.title}
                    className="w-full h-full object-cover"
                  />
                </div>
              )}
              <Card.Content className="p-6">
                <div className="flex items-start justify-between mb-2">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 line-clamp-1">
                    {course.title}
                  </h3>
                  <Badge
                    variant={statusColors[course.status] as any}
                    size="sm"
                  >
                    {course.status}
                  </Badge>
                </div>
                
                {course.short_description && (
                  <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-4">
                    {course.short_description}
                  </p>
                )}
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Badge
                      variant={difficultyColors[course.difficulty] as any}
                      size="sm"
                    >
                      {course.difficulty}
                    </Badge>
                    {course.duration_hours && (
                      <span className="text-sm text-gray-500">
                        {course.duration_hours}h
                      </span>
                    )}
                  </div>
                  
                  {course.category && (
                    <span
                      className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                      style={{
                        backgroundColor: course.category.color ? `${course.category.color}20` : undefined,
                        color: course.category.color || undefined,
                      }}
                    >
                      {course.category.name}
                    </span>
                  )}
                </div>
                
                {course.tags && course.tags.length > 0 && (
                  <div className="mt-3 flex flex-wrap gap-1">
                    {course.tags.slice(0, 3).map((tag) => (
                      <span
                        key={tag}
                        className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                      >
                        {tag}
                      </span>
                    ))}
                    {course.tags.length > 3 && (
                      <span className="text-xs text-gray-500">
                        +{course.tags.length - 3}
                      </span>
                    )}
                  </div>
                )}
              </Card.Content>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/app/dashboard/components/page.tsx
================
'use client';

import React, { useState } from 'react';
import {
  Button,
  Card,
  Input,
  Textarea,
  Modal,
  Select,
  Table,
  SearchBox,
  FilterPanel,
  Badge,
  Spinner,
  Pagination,
  Tabs,
  TabsList,
  TabsTrigger,
  TabsContent,
} from '@/components/ui';
import { Home, Settings, Users, FileText } from 'lucide-react';

export default function ComponentsPage() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [selectValue, setSelectValue] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [activeTab, setActiveTab] = useState('overview');
  const [filterValues, setFilterValues] = useState<Record<string, any>>({});

  const selectOptions = [
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' },
    { value: 'option3', label: 'Option 3', disabled: true },
  ];

  const tableData = [
    { id: 1, name: 'John Doe', email: 'john@example.com', status: 'active' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'inactive' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', status: 'active' },
  ];
  
  const tableColumns = [
    { key: 'id', label: 'ID' },
    { key: 'name', label: 'Name' },
    { key: 'email', label: 'Email' },
    {
      key: 'status',
      label: 'Status',
      render: (row: { status: string }) => (
        <Badge variant={row.status === 'active' ? 'success' : 'default'} size="sm">
          {row.status}
        </Badge>
      ),
    },
    {
      key: 'actions',
      label: 'Actions',
      render: () => (
        <Button variant="ghost" size="sm">
          Edit
        </Button>
      ),
    },
  ];
  
  const emptyTableColumns = [
    { key: 'id', label: 'ID' },
    { key: 'name', label: 'Name' },
    { key: 'email', label: 'Email' },
  ];


  const filters = [
    {
      id: 'status',
      label: 'Status',
      type: 'checkbox' as const,
      options: [
        { value: 'active', label: 'Active', count: 12 },
        { value: 'inactive', label: 'Inactive', count: 5 },
        { value: 'pending', label: 'Pending', count: 3 },
      ],
    },
    {
      id: 'difficulty',
      label: 'Difficulty',
      type: 'radio' as const,
      options: [
        { value: 'beginner', label: 'Beginner' },
        { value: 'intermediate', label: 'Intermediate' },
        { value: 'advanced', label: 'Advanced' },
      ],
    },
    {
      id: 'price',
      label: 'Price Range',
      type: 'range' as const,
      min: 0,
      max: 1000,
      step: 10,
    },
  ];

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl font-bold">UI Components</h1>
        <p className="text-gray-600 dark:text-gray-400 mt-1">
          A showcase of all available UI components
        </p>
      </div>

      {/* Tabs */}
      <Card>
        <Card.Header>
          <Card.Title>Tabs Component</Card.Title>
        </Card.Header>
        <Card.Content>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
              <TabsTrigger value="reports">Reports</TabsTrigger>
              <TabsTrigger value="settings" disabled>Settings</TabsTrigger>
            </TabsList>
            <TabsContent value="overview">
              <p>This is the overview tab content.</p>
            </TabsContent>
            <TabsContent value="analytics">
              <p>This is the analytics tab content.</p>
            </TabsContent>
            <TabsContent value="reports">
              <p>This is the reports tab content.</p>
            </TabsContent>
          </Tabs>
        </Card.Content>
      </Card>

      {/* Buttons */}
      <Card>
        <Card.Header>
          <Card.Title>Buttons</Card.Title>
        </Card.Header>
        <Card.Content className="space-y-4">
          <div className="flex flex-wrap gap-2">
            <Button variant="primary">Primary</Button>
            <Button variant="secondary">Secondary</Button>
            <Button variant="danger">Danger</Button>
            <Button variant="ghost">Ghost</Button>
          </div>
          <div className="flex flex-wrap gap-2">
            <Button size="sm">Small</Button>
            <Button size="md">Medium</Button>
            <Button size="lg">Large</Button>
            <Button disabled>Disabled</Button>
            <Button loading>Loading</Button>
          </div>
          <div className="flex flex-wrap gap-2">
            <Button leftIcon={<Home className="h-4 w-4" />}>With Icon</Button>
            <Button rightIcon={<Settings className="h-4 w-4" />}>With Icon</Button>
            <Button fullWidth>Full Width</Button>
          </div>
        </Card.Content>
      </Card>

      {/* Form Elements */}
      <Card>
        <Card.Header>
          <Card.Title>Form Elements</Card.Title>
        </Card.Header>
        <Card.Content className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Input
              label="Text Input"
              placeholder="Enter text..."
              helperText="This is helper text"
            />
            <Input
              label="Email Input"
              type="email"
              placeholder="email@example.com"
              required
            />
            <Input
              label="Password Input"
              type="password"
              placeholder="Enter password..."
            />
            <Input
              label="With Error"
              error="This field is required"
              placeholder="Enter text..."
            />
          </div>

          <Select
            label="Select Input"
            options={selectOptions}
            value={selectValue}
            onChange={(e) => setSelectValue(e.target.value)}
            placeholder="Choose an option..."
          />

          <Textarea
            label="Textarea"
            placeholder="Enter long text..."
            rows={4}
            helperText="Max 500 characters"
          />

          <SearchBox
            placeholder="Search..."
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
            onSearch={(value) => console.log('Search:', value)}
            fullWidth
          />
        </Card.Content>
      </Card>

      {/* Badges */}
      <Card>
        <Card.Header>
          <Card.Title>Badges</Card.Title>
        </Card.Header>
        <Card.Content className="space-y-4">
          <div className="flex flex-wrap gap-2">
            <Badge>Default</Badge>
            <Badge variant="primary">Primary</Badge>
            <Badge variant="secondary">Secondary</Badge>
            <Badge variant="success">Success</Badge>
            <Badge variant="warning">Warning</Badge>
            <Badge variant="danger">Danger</Badge>
            <Badge variant="info">Info</Badge>
          </div>
          <div className="flex flex-wrap gap-2">
            <Badge size="sm">Small</Badge>
            <Badge size="md">Medium</Badge>
            <Badge size="lg">Large</Badge>
            <Badge rounded>Rounded</Badge>
            <Badge dot>With Dot</Badge>
          </div>
        </Card.Content>
      </Card>

      {/* Table */}
      <Card>
        <Card.Header>
          <Card.Title>Table</Card.Title>
        </Card.Header>
        <Card.Content>
            <Table 
                variant="striped"
                columns={tableColumns}
                data={tableData}
            />
        </Card.Content>
      </Card>

      {/* Empty Table */}
      <Card>
        <Card.Header>
          <Card.Title>Empty Table</Card.Title>
        </Card.Header>
        <Card.Content>
            <Table 
                columns={emptyTableColumns}
                data={[]}
            />
        </Card.Content>
      </Card>

      {/* Modal */}
      <Card>
        <Card.Header>
          <Card.Title>Modal</Card.Title>
        </Card.Header>
        <Card.Content>
          <Button onClick={() => setIsModalOpen(true)}>Open Modal</Button>
          <Modal
            isOpen={isModalOpen}
            onClose={() => setIsModalOpen(false)}
            title="Example Modal"
            size="md"
          >
            <p>This is the modal content. You can put any content here.</p>
            <div className="mt-4 flex justify-end space-x-2">
              <Button variant="ghost" onClick={() => setIsModalOpen(false)}>
                Cancel
              </Button>
              <Button onClick={() => setIsModalOpen(false)}>Confirm</Button>
            </div>
          </Modal>
        </Card.Content>
      </Card>

      {/* Filter Panel */}
      <Card>
        <Card.Header>
          <Card.Title>Filter Panel</Card.Title>
        </Card.Header>
        <Card.Content>
          <div className="max-w-xs">
            <FilterPanel
              filters={filters}
              values={filterValues}
              onChange={(filterId, value) => {
                setFilterValues({ ...filterValues, [filterId]: value });
              }}
              onReset={() => setFilterValues({})}
            />
          </div>
        </Card.Content>
      </Card>

      {/* Pagination */}
      <Card>
        <Card.Header>
          <Card.Title>Pagination</Card.Title>
        </Card.Header>
        <Card.Content>
          <Pagination
            currentPage={currentPage}
            totalPages={10}
            onPageChange={setCurrentPage}
          />
        </Card.Content>
      </Card>

      {/* Loading States */}
      <Card>
        <Card.Header>
          <Card.Title>Loading States</Card.Title>
        </Card.Header>
        <Card.Content>
          <div className="flex items-center space-x-4">
            <Spinner size="sm" />
            <Spinner size="md" />
            <Spinner size="lg" />
            <Spinner size="xl" />
            <Spinner variant="secondary" />
            <div className="bg-blue-600 p-4 rounded">
              <Spinner variant="white" />
            </div>
          </div>
        </Card.Content>
      </Card>
    </div>
  );
}

================
File: src/app/dashboard/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { 
  AcademicCapIcon, BookOpenIcon, CalendarIcon, ClockIcon, 
  CheckCircleIcon, DocumentTextIcon, CogIcon, LanguageIcon, 
  KeyIcon, UsersIcon
} from '@heroicons/react/24/outline';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Card, Spinner } from '@/components/ui';

// Import all the services
import { courseService } from '@/lib/supabase/courses';
import { bookService } from '@/lib/supabase/books';
import { scheduleService } from '@/lib/supabase/schedules';
import { lessonService } from '@/lib/supabase/lessons';
import { taskService } from '@/lib/supabase/tasks';
import { vocabularyService } from '@/lib/supabase/vocabulary';

// Import additional services
import { objectiveService } from '@/lib/supabase/objectives';
import { methodService } from '@/lib/supabase/methods';
// import { decoderService } from '@/lib/supabase/decoders'; // This might not exist yet

interface DashboardStats {
  courses: number;
  schedules: number;
  lessons: number;
  tasks: number;
  books: number;
  vocabulary: number;
  vocabularyGroups: number;
  objectives: number;
  methods: number;
  decoders: number;
}

const colorClasses = {
  blue: {
    bg: 'bg-blue-100 dark:bg-blue-900/20',
    text: 'text-blue-600 dark:text-blue-400'
  },
  purple: {
    bg: 'bg-purple-100 dark:bg-purple-900/20',
    text: 'text-purple-600 dark:text-purple-400'
  },
  green: {
    bg: 'bg-green-100 dark:bg-green-900/20',
    text: 'text-green-600 dark:text-green-400'
  },
  orange: {
    bg: 'bg-orange-100 dark:bg-orange-900/20',
    text: 'text-orange-600 dark:text-orange-400'
  },
  indigo: {
    bg: 'bg-indigo-100 dark:bg-indigo-900/20',
    text: 'text-indigo-600 dark:text-indigo-400'
  },
  pink: {
    bg: 'bg-pink-100 dark:bg-pink-900/20',
    text: 'text-pink-600 dark:text-pink-400'
  },
  teal: {
    bg: 'bg-teal-100 dark:bg-teal-900/20',
    text: 'text-teal-600 dark:text-teal-400'
  },
  yellow: {
    bg: 'bg-yellow-100 dark:bg-yellow-900/20',
    text: 'text-yellow-600 dark:text-yellow-400'
  },
  red: {
    bg: 'bg-red-100 dark:bg-red-900/20',
    text: 'text-red-600 dark:text-red-400'
  },
  gray: {
    bg: 'bg-gray-100 dark:bg-gray-900/20',
    text: 'text-gray-600 dark:text-gray-400'
  }
} as const;

export default function DashboardPage() {
  const [stats, setStats] = useState<DashboardStats>({
    courses: 0,
    schedules: 0,
    lessons: 0,
    tasks: 0,
    books: 0,
    vocabulary: 0,
    vocabularyGroups: 0,
    objectives: 0,
    methods: 0,
    decoders: 0,
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadDashboardStats();
  }, []);

  const loadDashboardStats = async () => {
    try {
      setLoading(true);
      
      // Load statistics with error handling for each service
      const [
        courses,
        books,
        schedules,
        lessons,
        tasks,
        vocabularyStats,
      ] = await Promise.all([
        courseService.getCourses({}).then(data => data.length).catch(() => 0),
        bookService.getBooks({}).then(data => data.length).catch(() => 0),
        scheduleService.getSchedules({}).then(data => data.length).catch(() => 0),
        lessonService.getLessons({}).then(data => data.length).catch(() => 0),
        taskService.getTasks({}).then(data => data.length).catch(() => 0),
        vocabularyService.getVocabularyStats().catch(() => ({
          vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
          groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
        })),
      ]);

      // Load objectives and methods separately with fallbacks
      let objectives = 0;
      let methods = 0;
      
      try {
        objectives = await objectiveService.getObjectives({}).then(data => data.length);
      } catch (error) {
        console.warn('Failed to load objectives:', error);
      }
      
      try {
        methods = await methodService.getMethods({}).then(data => data.length);
      } catch (error) {
        console.warn('Failed to load methods:', error);
      }

      setStats({
        courses,
        schedules,
        lessons,
        tasks,
        objectives,
        methods,
        books,
        vocabulary: vocabularyStats.vocabulary.total,
        vocabularyGroups: vocabularyStats.groups.total,
        decoders: 3,  // Placeholder - using mock data count from decoders page
      });
    } catch (error) {
      console.error('Failed to load dashboard stats:', error);
      // Set default stats if everything fails
      setStats({
        courses: 0,
        schedules: 0,
        lessons: 0,
        tasks: 0,
        objectives: 0,
        methods: 0,
        books: 0,
        vocabulary: 0,
        vocabularyGroups: 0,
        decoders: 0,
      });
    } finally {
      setLoading(false);
    }
  };

  const statCards = [
    {
      title: 'Courses',
      value: stats.courses,
      icon: AcademicCapIcon,
      color: 'blue' as keyof typeof colorClasses,
      href: '/courses'
    },
    {
      title: 'Schedules', 
      value: stats.schedules,
      icon: CalendarIcon,
      color: 'purple' as keyof typeof colorClasses,
      href: '/schedules'
    },
    {
      title: 'Lessons',
      value: stats.lessons,
      icon: ClockIcon,
      color: 'green' as keyof typeof colorClasses,
      href: '/lessons'
    },
    {
      title: 'Tasks',
      value: stats.tasks,
      icon: CheckCircleIcon,
      color: 'orange' as keyof typeof colorClasses,
      href: '/tasks'
    },
    {
      title: 'Books',
      value: stats.books,
      icon: BookOpenIcon,
      color: 'indigo' as keyof typeof colorClasses,
      href: '/books'
    },
    {
      title: 'Vocabulary',
      value: stats.vocabulary,
      icon: LanguageIcon,
      color: 'pink' as keyof typeof colorClasses,
      href: '/vocabulary'
    },
    {
      title: 'Vocab Groups',
      value: stats.vocabularyGroups,
      icon: UsersIcon,
      color: 'teal' as keyof typeof colorClasses,
      href: '/vocabulary/groups'
    },
    {
      title: 'Objectives',
      value: stats.objectives,
      icon: DocumentTextIcon,
      color: 'yellow' as keyof typeof colorClasses,
      href: '/objectives'
    },
    {
      title: 'Methods',
      value: stats.methods,
      icon: CogIcon,
      color: 'red' as keyof typeof colorClasses,
      href: '/methods'
    },
    {
      title: 'Decoders',
      value: stats.decoders,
      icon: KeyIcon,
      color: 'gray' as keyof typeof colorClasses,
      href: '/decoders'
    }
  ];

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 space-y-8">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Dashboard</h1>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Welcome to Course Builder. Manage your courses, books, and educational content.
            </p>
          </div>

          {/* Comprehensive Stats Grid */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
            {statCards.map((card) => {
              const IconComponent = card.icon;
              const colors = colorClasses[card.color];
              return (
                <Card key={card.title} className="hover:shadow-md transition-shadow cursor-pointer">
                  <Card.Content className="p-4">
                    <div className="flex items-center">
                      <div className={`flex-shrink-0 p-2 ${colors.bg} rounded-lg`}>
                        <IconComponent className={`h-6 w-6 ${colors.text}`} />
                      </div>
                      <div className="ml-3 flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-500 dark:text-gray-400 truncate">
                          {card.title}
                        </p>
                        <p className="text-xl font-semibold text-gray-900 dark:text-gray-100">
                          {loading ? <Spinner size="sm" /> : card.value.toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </Card.Content>
                </Card>
              );
            })}
          </div>

          {/* Recent Activity */}
          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium text-gray-900 dark:text-gray-100">Recent Activity</h2>
            </Card.Header>
            <Card.Content>
              <div className="text-center py-12">
                <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-gray-400 text-xl">📊</span>
                </div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-1">No activity yet</h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Start by creating your first course or importing educational materials.
                </p>
              </div>
            </Card.Content>
          </Card>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/decoders/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useParams } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { DecoderForm } from '@/components/decoders/DecoderForm';
import { Decoder, decoderService } from '@/lib/supabase/decoders';
import { Spinner } from '@/components/ui';

export default function EditDecoderPage() {
  const params = useParams();
  const decoderId = params.id as string;
  const [decoder, setDecoder] = useState<Decoder | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadDecoder = useCallback(async () => {
    try {
      const data = await decoderService.getDecoder(decoderId);
      setDecoder(data);
    } catch (error) {
      console.error('Failed to load decoder:', error);
      setError('Failed to load decoder');
    } finally {
      setLoading(false);
    }
  }, [decoderId]);

  useEffect(() => {
    if (decoderId) {
      loadDecoder();
    }
  }, [decoderId, loadDecoder]);

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  if (error) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <div className="text-center">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                Error Loading Decoder
              </h2>
              <p className="text-gray-600 dark:text-gray-400">{error}</p>
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  if (!decoder) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <div className="text-center">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                Decoder Not Found
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                The decoder you're looking for doesn't exist.
              </p>
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <DecoderForm initialData={decoder} />
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/decoders/[id]/page.tsx
================
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Decoder, decoderService } from '@/lib/supabase/decoders';
import { Button, Card, Badge, Spinner, RichTextDisplay, RichTextTruncate } from '@/components/ui';
import { ArrowLeft, Edit, Key, BookOpen, Calendar, User } from 'lucide-react';

export default function DecoderDetailPage() {
  const params = useParams();
  const router = useRouter();
  const decoderId = params.id as string;
  const [decoder, setDecoder] = useState<Decoder | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadDecoder = useCallback(async () => {
    try {
      const data = await decoderService.getDecoder(decoderId);
      setDecoder(data);
    } catch (error) {
      console.error('Failed to load decoder:', error);
      setError('Failed to load decoder');
    } finally {
      setLoading(false);
    }
  }, [decoderId]);

  useEffect(() => {
    if (decoderId) {
      loadDecoder();
    }
  }, [decoderId, loadDecoder]);

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  if (error) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <div className="text-center">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                Error Loading Decoder
              </h2>
              <p className="text-gray-600 dark:text-gray-400">{error}</p>
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  if (!decoder) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <div className="text-center">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                Decoder Not Found
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                The decoder you're looking for doesn't exist.
              </p>
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="mb-8">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
              className="mb-4"
            >
              Back
            </Button>
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                    {decoder.name}
                  </h1>
                  {decoder.is_public && (
                    <Badge variant="outline" size="lg">
                      Public
                    </Badge>
                  )}
                </div>
                {decoder.description && (
                  <RichTextTruncate
                    content={decoder.description}
                    maxLength={200}
                    maxLines={2}
                    className="mt-2 text-lg"
                    showReadMore={false}
                  />
                )}
              </div>
              <Button
                onClick={() => router.push(`/decoders/${decoder.id}/edit`)}
                leftIcon={<Edit className="h-4 w-4" />}
              >
                Edit
              </Button>
            </div>
          </div>

          <div className="space-y-6">
            {/* Main Content */}
            <div className="space-y-6">
              {/* Decoder Description/Content */}
              {decoder.description && (
                <Card>
                  <Card.Header>
                    <div className="flex items-center gap-2">
                      <Key className="h-5 w-5" />
                      <h2 className="text-lg font-semibold">Decoder Content</h2>
                    </div>
                  </Card.Header>
                  <Card.Content>
                    <RichTextDisplay
                      content={decoder.description}
                      size="md"
                    />
                  </Card.Content>
                </Card>
              )}

              {/* Bottom Section - Book and Details */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Associated Book */}
                {decoder.book && (
                  <Card>
                    <Card.Header>
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-5 w-5" />
                        <h2 className="text-lg font-semibold">Associated Book</h2>
                      </div>
                    </Card.Header>
                    <Card.Content>
                      <div className="space-y-3">
                        <div>
                          <h3 className="font-semibold text-lg">{decoder.book.title}</h3>
                          {decoder.book.author && (
                            <p className="text-gray-600 dark:text-gray-400 mt-1">
                              by {decoder.book.author}
                            </p>
                          )}
                        </div>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            {decoder.book.content_type && (
                              <Badge variant="outline" className="text-xs">
                                {decoder.book.content_type}
                              </Badge>
                            )}
                          </div>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => router.push(`/books/${decoder.book?.id}`)}
                          >
                            View Book
                          </Button>
                        </div>
                      </div>
                    </Card.Content>
                  </Card>
                )}

                {/* Details */}
                <Card>
                  <Card.Header>
                    <h2 className="text-lg font-semibold">Details</h2>
                  </Card.Header>
                  <Card.Content className="space-y-4">
                    {decoder.category_data && (
                      <div className="flex items-center gap-3">
                        <div 
                          className="h-4 w-4 rounded" 
                          style={{ backgroundColor: decoder.category_data.color || '#6b7280' }}
                        />
                        <div>
                          <p className="text-sm text-gray-500">Category</p>
                          <p className="font-medium">{decoder.category_data.name}</p>
                        </div>
                      </div>
                    )}

                    <div className="flex items-center gap-3">
                      <div className="h-4 w-4 rounded bg-blue-500" />
                      <div>
                        <p className="text-sm text-gray-500">Visibility</p>
                        <p className="font-medium">{decoder.is_public ? 'Public' : 'Private'}</p>
                      </div>
                    </div>

                    <div className="flex items-center gap-3">
                      <Calendar className="h-4 w-4 text-gray-500" />
                      <div>
                        <p className="text-sm text-gray-500">Created</p>
                        <p className="font-medium">
                          {new Date(decoder.created_at).toLocaleDateString()}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center gap-3">
                      <Calendar className="h-4 w-4 text-gray-500" />
                      <div>
                        <p className="text-sm text-gray-500">Updated</p>
                        <p className="font-medium">
                          {new Date(decoder.updated_at).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                  </Card.Content>
                </Card>
              </div>

              {/* Tags */}
              {decoder.tags && decoder.tags.length > 0 && (
                <Card>
                  <Card.Header>
                    <h2 className="text-lg font-semibold">Tags</h2>
                  </Card.Header>
                  <Card.Content>
                    <div className="flex flex-wrap gap-2">
                      {decoder.tags.map((tag) => (
                        <Badge key={tag} variant="secondary">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </Card.Content>
                </Card>
              )}
            </div>
          </div>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/decoders/new/page.tsx
================
'use client';

import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { DecoderForm } from '@/components/decoders/DecoderForm';

export default function NewDecoderPage() {
  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <DecoderForm />
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/decoders/page.tsx
================
'use client';

import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { Key, Plus, Search, Globe, Shield, BookOpen } from 'lucide-react';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Badge, Input, Spinner, RichTextTruncate } from '@/components/ui';
import { cn } from '@/lib/utils';
import { Decoder, decoderService } from '@/lib/supabase/decoders';

export default function DecodersPage() {
  const router = useRouter();
  const [decoders, setDecoders] = useState<Decoder[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');

  const loadDecoders = useCallback(async () => {
    try {
      const data = await decoderService.getDecoders();
      setDecoders(data);
    } catch (error) {
      console.error('Failed to load decoders:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    loadDecoders();
  }, [loadDecoders]);

  const filteredDecoders = decoders.filter(decoder =>
    decoder.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (decoder.description && decoder.description.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 space-y-6">
          {/* Header */}
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Content Decoders
              </h1>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Analyze and decode educational content patterns and complexity
              </p>
            </div>
            <Button
              onClick={() => router.push('/decoders/new')}
              leftIcon={<Plus className="h-4 w-4" />}
            >
              New Decoder
            </Button>
          </div>

          {/* Search */}
          <Card>
            <Card.Content className="p-4">
              <div className="relative max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search decoders..."
                  className="pl-10"
                />
              </div>
            </Card.Content>
          </Card>

          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Key className="h-8 w-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{decoders.length}</p>
                    <p className="text-sm text-gray-600">Total Decoders</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Globe className="h-8 w-8 text-green-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {decoders.filter(decoder => decoder.is_public).length}
                    </p>
                    <p className="text-sm text-gray-600">Public</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Shield className="h-8 w-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {decoders.filter(decoder => !decoder.is_public).length}
                    </p>
                    <p className="text-sm text-gray-600">Private</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Key className="h-8 w-8 text-purple-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {new Set(decoders.map(d => d.category_data?.name).filter(Boolean)).size}
                    </p>
                    <p className="text-sm text-gray-600">Categories</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
          </div>

          {/* Decoders Grid */}
          {filteredDecoders.length === 0 ? (
            <Card>
              <Card.Content className="p-12 text-center">
                <Key className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                  No decoders found
                </h3>
                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  {searchQuery ? 
                    'Try adjusting your search terms.' : 
                    'Get started by creating your first content decoder.'
                  }
                </p>
                {!searchQuery && (
                  <Button
                    onClick={() => router.push('/decoders/new')}
                    leftIcon={<Plus className="h-4 w-4" />}
                  >
                    Create First Decoder
                  </Button>
                )}
              </Card.Content>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredDecoders.map((decoder) => (
                <Card key={decoder.id} className="hover:shadow-md transition-shadow">
                  <Card.Content className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="font-semibold text-lg">
                            {decoder.name}
                          </h3>
                          {decoder.is_public && (
                            <Badge variant="outline" size="sm">
                              Public
                            </Badge>
                          )}
                        </div>
                        {decoder.description && (
                          <div className="mb-3">
                            <RichTextTruncate
                              content={decoder.description}
                              maxLength={120}
                              maxLines={2}
                              showReadMore={false}
                            />
                          </div>
                        )}
                      </div>
                    </div>

                    <div className="space-y-3">
                      {decoder.category_data && (
                        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                          <div 
                            className="h-3 w-3 rounded-full mr-2" 
                            style={{ backgroundColor: decoder.category_data.color || '#6b7280' }}
                          />
                          <span>{decoder.category_data.name}</span>
                        </div>
                      )}
                      
                      {decoder.book && (
                        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                          <BookOpen className="h-4 w-4 mr-2" />
                          <span className="truncate">
                            {decoder.book.title}
                          </span>
                        </div>
                      )}
                      
                      <div className="text-xs text-gray-500">
                        Created {new Date(decoder.created_at).toLocaleDateString()}
                      </div>
                    </div>

                    <div className="flex justify-center gap-2 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => router.push(`/decoders/${decoder.id}`)}
                      >
                        View
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => router.push(`/decoders/${decoder.id}/edit`)}
                      >
                        Edit
                      </Button>
                    </div>
                  </Card.Content>
                </Card>
              ))}
            </div>
          )}
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-feature-settings: "rlig" 1, "calt" 1;
  }
  
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn {
    @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .btn-primary {
    @apply btn bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500;
  }
  
  .btn-secondary {
    @apply btn bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500;
  }
  
  .btn-outline {
    @apply btn border-gray-300 text-gray-700 bg-white hover:bg-gray-50 focus:ring-primary-500;
  }
  
  .card {
    @apply bg-white overflow-hidden shadow rounded-lg;
  }
  
  .form-input {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
}

@layer utilities {
  .scrollbar-thin {
    scrollbar-width: thin;
    scrollbar-color: rgb(156 163 175) transparent;
  }
  
  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }
  
  .scrollbar-thin::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .scrollbar-thin::-webkit-scrollbar-thumb {
    background-color: rgb(156 163 175);
    border-radius: 3px;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import { AuthProvider } from '@/contexts/AuthContext';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Course Builder - Modular Course Design Platform',
  description: 'A flexible, customizable online course construction tool for educators, trainers, and content creators.',
  keywords: 'course builder, education, training, course management, curriculum design',
  authors: [{ name: 'Course Builder Team' }],
  viewport: 'width=device-width, initial-scale=1',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" className="h-full">
      <body className={`${inter.className} h-full antialiased`}>
        <AuthProvider>
          <div id="root" className="min-h-full">
            {children}
          </div>
        </AuthProvider>
      </body>
    </html>
  );
}

================
File: src/app/lessons/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Spinner } from '@/components/ui/Spinner';
import { Tabs } from '@/components/ui/Tabs';
import { LessonForm } from '@/components/schedules/LessonForm';
import { LessonBookManager } from '@/components/relationships/LessonBookManager';
import { LessonTaskManager } from '@/components/relationships/LessonTaskManager';
import { lessonService } from '@/lib/supabase/lessons';
import { ArrowLeft, Edit, BookOpen, CheckSquare } from 'lucide-react';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';

import type { Lesson } from '@/types/schedule';

export default function LessonEditPage() {
  const router = useRouter();
  const params = useParams();
  const lessonId = params.id as string;
  
  const [lesson, setLesson] = useState<Lesson | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('details');

  useEffect(() => {
    loadLesson();
  }, [lessonId]);

  const loadLesson = async () => {
    try {
      setLoading(true);
      const lessonData = await lessonService.getLesson(lessonId);
      setLesson(lessonData);
    } catch (error) {
      console.error('Failed to load lesson:', error);
      alert('Failed to load lesson');
      router.push('/lessons');
    } finally {
      setLoading(false);
    }
  };

  const handleSuccess = () => {
    loadLesson(); // Reload lesson data after update
  };

  const handleBack = () => {
    // Use browser history to go back if possible
    if (window.history.length > 1) {
      router.back();
    } else {
      // Fallback - go to lessons page
      router.push('/lessons');
    }
  };

  const handleRelationshipUpdate = () => {
    loadLesson(); // Reload lesson data when relationships change
  };

  if (loading) {
    return (
      <AuthGuard>
        <DashboardLayout>
          <div className="flex items-center justify-center min-h-screen">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  if (!lesson) {
    return (
      <AuthGuard>
        <DashboardLayout>
          <div className="text-center py-16">
            <h2 className="text-xl font-semibold">Lesson not found</h2>
            <Button 
              className="mt-4"
              onClick={() => router.push('/lessons')}
            >
              Back to Lessons
            </Button>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  const tabs = [
    { id: 'details', label: 'Details', icon: Edit },
    { id: 'books', label: 'Books', icon: BookOpen },
    { id: 'tasks', label: 'Tasks', icon: CheckSquare },
  ];

  const renderTabContent = () => {
    switch (activeTab) {
      case 'details':
        return (
          <Card>
            <Card.Content className="p-6">
              <LessonForm 
                lesson={lesson} 
                onSuccess={handleSuccess}
                scheduleId={lesson.schedule_id}
              />
            </Card.Content>
          </Card>
        );
      case 'books':
        return (
          <Card>
            <Card.Content className="p-6">
              <LessonBookManager 
                lessonId={lessonId}
                courseId={lesson.course_id}
                onUpdate={handleRelationshipUpdate}
              />
            </Card.Content>
          </Card>
        );
      case 'tasks':
        return (
          <Card>
            <Card.Content className="p-6">
              <LessonTaskManager 
                lessonId={lessonId}
                courseId={lesson.course_id}
                onUpdate={handleRelationshipUpdate}
              />
            </Card.Content>
          </Card>
        );
      default:
        return null;
    }
  };

  return (
    <AuthGuard>
      <DashboardLayout>
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <Button
            variant="outline"
            onClick={handleBack}
            className="mb-4"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Button>

          <div className="mb-6">
            <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
              Edit Lesson {lesson.lesson_number}: {lesson.title}
            </h1>
            <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
              Update lesson details, books, and tasks
            </p>
            {lesson.schedule?.course && (
              <p className="mt-1 text-sm text-blue-600">
                Course: {lesson.schedule.course.title} • Schedule: {lesson.schedule.name}
              </p>
            )}
          </div>

          <Tabs
            tabs={tabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
          />

          <div className="mt-6">
            {renderTabContent()}
          </div>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/lessons/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Clock, Search, Calendar, Users, BookOpen, CheckSquare, Edit, BarChart3 } from 'lucide-react';
import { Lesson, LessonStatus } from '@/types/database';
import { lessonService, LessonFilters } from '@/lib/supabase/lessons';
import { scheduleService } from '@/lib/supabase/schedules';
import { courseService } from '@/lib/supabase/courses';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Badge, Input, Select, Spinner, Tabs, RichTextTruncate } from '@/components/ui';
import { cn } from '@/lib/utils';

interface Course {
  id: string;
  title: string;
}

interface Schedule {
  id: string;
  name: string;
  course_id: string;
}

const statusColors: Record<LessonStatus, 'default' | 'warning' | 'success' | 'danger'> = {
  draft: 'default',
  scheduled: 'warning',
  completed: 'success',
  cancelled: 'danger',
};

export default function LessonsPage() {
  const router = useRouter();
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [courses, setCourses] = useState<Course[]>([]);
  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [allSchedules, setAllSchedules] = useState<Schedule[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCourse, setSelectedCourse] = useState('');
  const [selectedSchedule, setSelectedSchedule] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('');
  const [activeTab, setActiveTab] = useState('overview');
  const [totalStats, setTotalStats] = useState({
    total: 0,
    scheduled: 0,
    completed: 0,
    draft: 0
  });

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    loadLessons();
  }, [searchQuery, selectedCourse, selectedSchedule, selectedStatus]);

  useEffect(() => {
    // Filter schedules based on selected course
    if (selectedCourse) {
      setSchedules(allSchedules.filter(s => s.course_id === selectedCourse));
      setSelectedSchedule(''); // Reset schedule selection when course changes
    } else {
      setSchedules(allSchedules);
      setSelectedSchedule('');
    }
  }, [selectedCourse, allSchedules]);

  const loadInitialData = async () => {
    try {
      // Load courses, schedules, and lesson statistics
      const [coursesData, schedulesData] = await Promise.all([
        courseService.getCourses(),
        scheduleService.getSchedules(),
        loadTotalStats()
      ]);
      
      setCourses(coursesData);
      setAllSchedules(schedulesData);
      setSchedules(schedulesData);
    } catch (error) {
      console.error('Failed to load initial data:', error);
    }
  };

  const loadTotalStats = async () => {
    try {
      // Get all lessons without filters to calculate total statistics
      const allLessons = await lessonService.getLessons({});
      
      const stats = {
        total: allLessons.length,
        scheduled: allLessons.filter(lesson => lesson.status === 'scheduled').length,
        completed: allLessons.filter(lesson => lesson.status === 'completed').length,
        draft: allLessons.filter(lesson => lesson.status === 'draft').length
      };
      
      setTotalStats(stats);
    } catch (error) {
      console.error('Failed to load lesson statistics:', error);
    }
  };

  const loadLessons = async () => {
    try {
      setLoading(true);
      const filters: LessonFilters = {};
      
      if (selectedSchedule) {
        filters.schedule_id = selectedSchedule;
      }
      if (selectedStatus) {
        filters.status = selectedStatus as LessonStatus;
      }

      const data = await lessonService.getLessons(filters);
      
      // Filter by search query and course (if no schedule selected)
      let filteredLessons = data;
      
      if (selectedCourse && !selectedSchedule) {
        filteredLessons = filteredLessons.filter(lesson => 
          lesson.schedule?.course?.id === selectedCourse
        );
      }
      
      if (searchQuery) {
        filteredLessons = filteredLessons.filter(lesson => 
          lesson.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          (lesson.description && lesson.description.toLowerCase().includes(searchQuery.toLowerCase()))
        );
      }
      
      setLessons(filteredLessons);
    } catch (error) {
      console.error('Failed to load lessons:', error);
    } finally {
      setLoading(false);
    }
  };


  const renderOverviewContent = () => (
    <div className="space-y-6">
      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-blue-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{totalStats.total}</p>
                <p className="text-sm text-gray-600">Total Lessons</p>
              </div>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Calendar className="h-8 w-8 text-green-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">
                  {totalStats.scheduled}
                </p>
                <p className="text-sm text-gray-600">Scheduled</p>
              </div>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-purple-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">
                  {totalStats.completed}
                </p>
                <p className="text-sm text-gray-600">Completed</p>
              </div>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-orange-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">
                  {totalStats.draft}
                </p>
                <p className="text-sm text-gray-600">Drafts</p>
              </div>
            </div>
          </Card.Content>
        </Card>
      </div>

      {/* Lessons List */}
      {renderLessonsList()}
    </div>
  );

  const renderBooksContent = () => {
    const lessonsWithBooks = lessons.filter(lesson => 
      lesson.lesson_books && lesson.lesson_books.length > 0
    );

    return (
      <div className="space-y-6">
        <div className="text-sm text-gray-600">
          Showing {lessonsWithBooks.length} lessons with books out of {lessons.length} total lessons
        </div>
        
        {lessonsWithBooks.length === 0 ? (
          <Card>
            <Card.Content className="p-12 text-center">
              <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                No lessons with books found
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                Add books to lessons to see them here.
              </p>
            </Card.Content>
          </Card>
        ) : (
          <div className="space-y-4">
            {lessonsWithBooks.map((lesson) => (
              <Card key={lesson.id} className="hover:shadow-md transition-shadow">
                <Card.Content className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="font-semibold text-lg">{lesson.title}</h3>
                        <Badge variant={statusColors[lesson.status]} size="sm">
                          {lesson.status}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-4 text-sm text-gray-500 mb-3">
                        <span>{new Date(lesson.date).toLocaleDateString()}</span>
                        <span>{lesson.start_time} - {lesson.end_time}</span>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => router.push(`/lessons/${lesson.id}/edit`)}
                    >
                      <Edit className="h-4 w-4 mr-1" />
                      Edit
                    </Button>
                  </div>
                  
                  {/* Books */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-2">Associated Books:</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                      {lesson.lesson_books?.map((lessonBook: any) => (
                        <div key={lessonBook.id} className="p-3 border rounded-lg">
                          <div className="flex items-start gap-3">
                            <BookOpen className="h-4 w-4 text-gray-500 mt-1 flex-shrink-0" />
                            <div className="flex-1 min-w-0">
                              <p className="font-medium text-sm truncate">{lessonBook.book?.title}</p>
                              {lessonBook.book?.author && (
                                <p className="text-xs text-gray-500 truncate">by {lessonBook.book.author}</p>
                              )}
                              {(lessonBook.pages_from || lessonBook.pages_to) && (
                                <p className="text-xs text-blue-600 mt-1">
                                  Pages: {lessonBook.pages_from || ''}{lessonBook.pages_from && lessonBook.pages_to ? '-' : ''}{lessonBook.pages_to || ''}
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </Card.Content>
              </Card>
            ))}
          </div>
        )}
      </div>
    );
  };

  const renderTasksContent = () => {
    const lessonsWithTasks = lessons.filter(lesson => 
      lesson.lesson_tasks && lesson.lesson_tasks.length > 0
    );

    return (
      <div className="space-y-6">
        <div className="text-sm text-gray-600">
          Showing {lessonsWithTasks.length} lessons with tasks out of {lessons.length} total lessons
        </div>
        
        {lessonsWithTasks.length === 0 ? (
          <Card>
            <Card.Content className="p-12 text-center">
              <CheckSquare className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                No lessons with tasks found
              </h3>
              <p className="text-gray-600 dark:text-gray-400">
                Add tasks to lessons to see them here.
              </p>
            </Card.Content>
          </Card>
        ) : (
          <div className="space-y-4">
            {lessonsWithTasks.map((lesson) => (
              <Card key={lesson.id} className="hover:shadow-md transition-shadow">
                <Card.Content className="p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="font-semibold text-lg">{lesson.title}</h3>
                        <Badge variant={statusColors[lesson.status]} size="sm">
                          {lesson.status}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-4 text-sm text-gray-500 mb-3">
                        <span>{new Date(lesson.date).toLocaleDateString()}</span>
                        <span>{lesson.start_time} - {lesson.end_time}</span>
                      </div>
                    </div>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => router.push(`/lessons/${lesson.id}/edit`)}
                    >
                      <Edit className="h-4 w-4 mr-1" />
                      Edit
                    </Button>
                  </div>
                  
                  {/* Tasks */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-2">Associated Tasks:</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {lesson.lesson_tasks?.map((lessonTask: any) => (
                        <div key={lessonTask.id} className="p-3 border rounded-lg">
                          <div className="flex items-start gap-3">
                            <CheckSquare className="h-4 w-4 text-gray-500 mt-1 flex-shrink-0" />
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <p className="font-medium text-sm">{lessonTask.task?.title}</p>
                                {lessonTask.is_homework && (
                                  <Badge variant="outline" size="sm">Homework</Badge>
                                )}
                              </div>
                              {lessonTask.task?.description && (
                                <RichTextTruncate
                                  content={lessonTask.task.description}
                                  maxLength={80}
                                  maxLines={2}
                                  className="text-xs"
                                />
                              )}
                              {lessonTask.due_date && (
                                <p className="text-xs text-orange-600 mt-1">
                                  Due: {new Date(lessonTask.due_date).toLocaleDateString()}
                                </p>
                              )}
                              {(lessonTask.task?.duration_minutes || lessonTask.duration_override) && (
                                <p className="text-xs text-gray-500 mt-1">
                                  ~{lessonTask.duration_override || lessonTask.task?.duration_minutes} min
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </Card.Content>
              </Card>
            ))}
          </div>
        )}
      </div>
    );
  };

  const renderLessonsList = () => {
    if (lessons.length === 0) {
      return (
        <Card>
          <Card.Content className="p-12 text-center">
            <Clock className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              No lessons found
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {selectedCourse || selectedSchedule 
                ? 'No lessons match your current filters.' 
                : 'Lessons are created from schedules. Create a schedule first to generate lessons.'
              }
            </p>
            {!selectedCourse && !selectedSchedule && (
              <Button onClick={() => router.push('/schedules')}>
                Go to Schedules
              </Button>
            )}
          </Card.Content>
        </Card>
      );
    }

    return (
      <div className="space-y-4">
        {lessons.map((lesson) => (
          <Card key={lesson.id} className="hover:shadow-md transition-shadow">
            <Card.Content className="p-6">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="font-semibold text-lg">{lesson.title}</h3>
                    <Badge variant={statusColors[lesson.status]} size="sm">
                      {lesson.status}
                    </Badge>
                    {lesson.lesson_number && (
                      <Badge variant="outline" size="sm">
                        #{lesson.lesson_number}
                      </Badge>
                    )}
                  </div>
                  
                  {lesson.description && (
                    <div className="mb-3">
                      <RichTextTruncate
                        content={lesson.description}
                        maxLength={150}
                        maxLines={2}
                        className="text-sm"
                      />
                    </div>
                  )}
                  
                  <div className="flex items-center gap-6 text-sm text-gray-500 mb-3">
                    <div className="flex items-center gap-1">
                      <Calendar className="h-4 w-4" />
                      <span>{new Date(lesson.date).toLocaleDateString()}</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      <span>{lesson.start_time} - {lesson.end_time}</span>
                    </div>
                    {lesson.location && (
                      <div className="flex items-center gap-1">
                        <span>{lesson.location}</span>
                      </div>
                    )}
                  </div>

                  {/* Quick stats */}
                  <div className="flex items-center gap-4 text-xs text-gray-500">
                    {lesson.schedule?.course && (
                      <span className="font-medium">{lesson.schedule.course.title}</span>
                    )}
                    {lesson.schedule && (
                      <span>{lesson.schedule.name}</span>
                    )}
                    {lesson.lesson_books && lesson.lesson_books.length > 0 && (
                      <span className="flex items-center gap-1">
                        <BookOpen className="h-3 w-3" />
                        {lesson.lesson_books.length} book{lesson.lesson_books.length !== 1 ? 's' : ''}
                      </span>
                    )}
                    {lesson.lesson_tasks && lesson.lesson_tasks.length > 0 && (
                      <span className="flex items-center gap-1">
                        <CheckSquare className="h-3 w-3" />
                        {lesson.lesson_tasks.length} task{lesson.lesson_tasks.length !== 1 ? 's' : ''}
                      </span>
                    )}
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => router.push(`/lessons/${lesson.id}/edit`)}
                  >
                    <Edit className="h-4 w-4 mr-1" />
                    Edit
                  </Button>
                  {lesson.schedule && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => router.push(`/schedules/${lesson.schedule_id}`)}
                    >
                      Schedule
                    </Button>
                  )}
                </div>
              </div>
            </Card.Content>
          </Card>
        ))}
      </div>
    );
  };

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  const tabs = [
    { id: 'overview', label: 'Overview', icon: BarChart3 },
    { id: 'books', label: 'Books', icon: BookOpen },
    { id: 'tasks', label: 'Tasks', icon: CheckSquare },
  ];

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 space-y-6">
          {/* Header */}
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Lessons
              </h1>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Manage lessons across courses and schedules
              </p>
            </div>
          </div>

          {/* Cascade Filters */}
          <Card>
            <Card.Content className="p-4">
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search lessons..."
                    className="pl-10"
                  />
                </div>
                
                <Select
                  value={selectedCourse}
                  onChange={(e) => setSelectedCourse(e.target.value)}
                  options={[
                    { value: '', label: 'All Courses' },
                    ...courses.map(course => ({ value: course.id, label: course.title }))
                  ]}
                  placeholder="Select Course"
                />

                <Select
                  value={selectedSchedule}
                  onChange={(e) => setSelectedSchedule(e.target.value)}
                  options={[
                    { value: '', label: 'All Schedules' },
                    ...schedules.map(schedule => ({ value: schedule.id, label: schedule.name }))
                  ]}
                  placeholder="Select Schedule"
                  disabled={schedules.length === 0}
                />
                
                <Select
                  value={selectedStatus}
                  onChange={(e) => setSelectedStatus(e.target.value)}
                  options={[
                    { value: '', label: 'All Statuses' },
                    { value: 'draft', label: 'Draft' },
                    { value: 'scheduled', label: 'Scheduled' },
                    { value: 'completed', label: 'Completed' },
                    { value: 'cancelled', label: 'Cancelled' }
                  ]}
                  placeholder="Status"
                />
              </div>
            </Card.Content>
          </Card>

          {/* Tabs */}
          <Tabs
            tabs={tabs}
            activeTab={activeTab}
            onTabChange={setActiveTab}
          />

          {/* Tab Content */}
          {activeTab === 'overview' && renderOverviewContent()}
          {activeTab === 'books' && renderBooksContent()}
          {activeTab === 'tasks' && renderTasksContent()}
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/methods/[id]/edit/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Input, Textarea, Select, Spinner, Badge, Modal, BelongingSelector } from '@/components/ui';
import { methodService } from '@/lib/supabase/methods';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save, Plus, X } from 'lucide-react';
import type { Category, Method } from '@/types/database';

export default function EditMethodPage() {
  const router = useRouter();
  const params = useParams();
  const methodId = params.id as string;
  
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [newTag, setNewTag] = useState('');
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category_id: '',
    tags: [] as string[],
    belongingCourses: [] as string[],
    belongingLessons: [] as string[],
  });

  useEffect(() => {
    Promise.all([loadMethod(), loadCategories()]);
  }, [methodId]);

  const loadMethod = async () => {
    try {
      const method = await methodService.getMethod(methodId);
      
      // Load belonging relationships
      const methodWithBelongings = await methodService.getMethodsWithBelongings({ search: '', tags: [] });
      const currentMethod = methodWithBelongings.find(m => m.id === methodId);
      
      setFormData({
        name: method.title,
        description: method.description || '',
        category_id: method.category_id || '',
        tags: method.tags || [],
        belongingCourses: (currentMethod as any)?.belongingCourses?.map((c: any) => c.id) || [],
        belongingLessons: (currentMethod as any)?.belongingLessons?.map((l: any) => l.id) || [],
      });
    } catch (error) {
      console.error('Failed to load method:', error);
      alert('Failed to load method');
      router.push('/methods');
    } finally {
      setInitialLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'method' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      alert('Please enter a method name');
      return;
    }

    setLoading(true);
    try {
      // Update the method
      await methodService.updateMethod({ 
        id: methodId, 
        name: formData.name,
        description: formData.description,
        category_id: formData.category_id || undefined,
        tags: formData.tags,
      });

      // Update belonging relationships
      // First, remove all existing relationships
      try {
        await methodService.removeMethodFromAllCourses(methodId);
        await methodService.removeMethodFromAllLessons(methodId);
      } catch (removeError) {
        console.error('Failed to remove existing relationships (non-fatal):', removeError);
      }

      // Add to selected courses
      try {
        for (const courseId of formData.belongingCourses) {
          await methodService.addMethodToCourse(courseId, methodId, { position: 0 });
        }
      } catch (courseError) {
        console.error('Failed to add to courses (non-fatal):', courseError);
      }

      // Add to selected lessons
      try {
        for (const lessonId of formData.belongingLessons) {
          await methodService.addMethodToLesson(lessonId, methodId, { position: 0 });
        }
      } catch (lessonError) {
        console.error('Failed to add to lessons (non-fatal):', lessonError);
      }

      router.push('/methods');
    } catch (error) {
      console.error('Failed to update method:', error);
      alert('Failed to update method. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleTagKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'method',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      // Reload categories specifically to ensure fresh data
      const freshCategories = await categoryService.getCategories({ type: 'method' });
      setCategories(freshCategories);
      setFormData(prev => ({ ...prev, category_id: newCategory.id }));
      
    } catch (error) {
      console.error("Failed to create method category:", error);
      alert('Failed to create category. Please try again.');
    }
  };

  if (initialLoading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Edit Method
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Update method details and settings
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Method Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Name *
                  </label>
                  <Input
                    value={formData.name}
                    onChange={(e) => handleChange('name', e.target.value)}
                    placeholder="Enter method name..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe the teaching method and how to implement it..."
                    rows={4}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Category
                  </label>
                  <div className="flex items-center gap-2">
                    <Select
                      className="flex-grow"
                      value={formData.category_id}
                      onChange={(e) => handleChange('category_id', e.target.value)}
                      options={[
                        { value: '', label: 'Select category...' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="md"
                      onClick={() => setIsCategoryModalOpen(true)}
                      className="flex-shrink-0 !h-10"
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Tags
                  </label>
                  <div className="space-y-3">
                    <div className="flex gap-2">
                      <Input
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        onKeyPress={handleTagKeyPress}
                        placeholder="Add a tag..."
                        className="flex-1"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={addTag}
                        leftIcon={<Plus className="h-4 w-4" />}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {formData.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {formData.tags.map((tag, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="flex items-center gap-1"
                          >
                            {tag}
                            <button
                              type="button"
                              onClick={() => removeTag(tag)}
                              className="ml-1 hover:text-red-600"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Add relevant tags to help categorize this method
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Belongs To
                  </label>
                  <BelongingSelector
                    selectedCourses={formData.belongingCourses}
                    selectedLessons={formData.belongingLessons}
                    onCoursesChange={(courses) => setFormData(prev => ({ ...prev, belongingCourses: courses }))}
                    onLessonsChange={(lessons) => setFormData(prev => ({ ...prev, belongingLessons: lessons }))}
                    disabled={loading}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Select which courses and lessons this method will be used in
                  </p>
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>
        </div>

        <Modal
          isOpen={isCategoryModalOpen}
          onClose={() => setIsCategoryModalOpen(false)}
          title="Create New Method Category"
          size="sm"
        >
          <div className="space-y-4">
            <Input
              label="Category Name"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
              placeholder="e.g., Interactive, Discussion, Project-based, etc."
              required
            />
            <Input
              label="Category Color"
              type="color"
              value={newCategoryColor}
              onChange={(e) => setNewCategoryColor(e.target.value)}
              className="h-10"
            />
          </div>
          <div className="mt-6 flex justify-end gap-3">
            <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleCreateCategory}>
              Create Category
            </Button>
          </div>
        </Modal>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/methods/new/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Input, Textarea, Select, Spinner, Badge, Modal, BelongingSelector } from '@/components/ui';
import { methodService } from '@/lib/supabase/methods';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save, Plus, X } from 'lucide-react';
import type { Category } from '@/types/database';

export default function NewMethodPage() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [categoriesLoading, setCategoriesLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [newTag, setNewTag] = useState('');
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category_id: '',
    tags: [] as string[],
    belongingCourses: [] as string[],
    belongingLessons: [] as string[],
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setCategoriesLoading(true);
      const categoriesData = await categoryService.getCategories({ type: 'method' });
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setCategoriesLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      alert('Please enter a method name');
      return;
    }

    setLoading(true);
    try {
      console.log('Creating method with data:', {
        name: formData.name,
        description: formData.description,
        category_id: formData.category_id,
        tags: formData.tags,
      });
      
      const method = await methodService.createMethod({
        name: formData.name,
        description: formData.description,
        category_id: formData.category_id || undefined, // Convert empty string to undefined
        tags: formData.tags,
      });

      console.log('Method created successfully:', method);

      // Try to add to selected courses
      try {
        for (const courseId of formData.belongingCourses) {
          await methodService.addMethodToCourse(courseId, method.id, { position: 0 });
        }
        console.log('Added to courses successfully');
      } catch (courseError) {
        console.error('Failed to add to courses (non-fatal):', courseError);
      }

      // Try to add to selected lessons
      try {
        for (const lessonId of formData.belongingLessons) {
          await methodService.addMethodToLesson(lessonId, method.id, { position: 0 });
        }
        console.log('Added to lessons successfully');
      } catch (lessonError) {
        console.error('Failed to add to lessons (non-fatal):', lessonError);
      }

      router.push('/methods');
    } catch (error) {
      console.error('Failed to create method:', error);
      alert('Failed to create method. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleTagKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'method',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      // Reload categories specifically to ensure fresh data
      const freshCategories = await categoryService.getCategories({ type: 'method' });
      setCategories(freshCategories);
      setFormData(prev => ({ ...prev, category_id: newCategory.id }));
      
    } catch (error) {
      console.error("Failed to create method category:", error);
      alert('Failed to create category. Please try again.');
    }
  };


  if (categoriesLoading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="p-6 max-w-2xl mx-auto">
            <div className="flex justify-center items-center h-64">
              <Spinner size="lg" />
            </div>
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Create New Method
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Add a new teaching method for courses and lessons
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Method Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Name *
                  </label>
                  <Input
                    value={formData.name}
                    onChange={(e) => handleChange('name', e.target.value)}
                    placeholder="Enter method name..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe the teaching method and how to implement it..."
                    rows={4}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Category
                  </label>
                  <div className="flex items-center gap-2">
                    <Select
                      className="flex-grow"
                      value={formData.category_id}
                      onChange={(e) => handleChange('category_id', e.target.value)}
                      options={[
                        { value: '', label: 'Select category...' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="md"
                      onClick={() => setIsCategoryModalOpen(true)}
                      className="flex-shrink-0 !h-10"
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Tags
                  </label>
                  <div className="space-y-3">
                    <div className="flex gap-2">
                      <Input
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        onKeyPress={handleTagKeyPress}
                        placeholder="Add a tag..."
                        className="flex-1"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={addTag}
                        leftIcon={<Plus className="h-4 w-4" />}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {formData.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {formData.tags.map((tag, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="flex items-center gap-1"
                          >
                            {tag}
                            <button
                              type="button"
                              onClick={() => removeTag(tag)}
                              className="ml-1 hover:text-red-600"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Add relevant tags to help categorize this method
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Belongs To
                  </label>
                  <BelongingSelector
                    selectedCourses={formData.belongingCourses}
                    selectedLessons={formData.belongingLessons}
                    onCoursesChange={(courses) => setFormData(prev => ({ ...prev, belongingCourses: courses }))}
                    onLessonsChange={(lessons) => setFormData(prev => ({ ...prev, belongingLessons: lessons }))}
                    disabled={loading}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Select which courses and lessons this method will be used in
                  </p>
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Creating...' : 'Create Method'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>
        </div>

        <Modal
          isOpen={isCategoryModalOpen}
          onClose={() => setIsCategoryModalOpen(false)}
          title="Create New Method Category"
          size="sm"
        >
          <div className="space-y-4">
            <Input
              label="Category Name"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
              placeholder="e.g., Interactive, Discussion, Project-based, etc."
              required
            />
            <Input
              label="Category Color"
              type="color"
              value={newCategoryColor}
              onChange={(e) => setNewCategoryColor(e.target.value)}
              className="h-10"
            />
          </div>
          <div className="mt-6 flex justify-end gap-3">
            <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleCreateCategory}>
              Create Category
            </Button>
          </div>
        </Modal>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/methods/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Search, Cog, Users, Clock } from 'lucide-react';
import { Method } from '@/types/database';
import { methodService, MethodFilters } from '@/lib/supabase/methods';
import { categoryService } from '@/lib/supabase/categories';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Badge, Input, Select, Spinner } from '@/components/ui';
import { cn } from '@/lib/utils';

export default function MethodsPage() {
  const router = useRouter();
  const [methods, setMethods] = useState<Method[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    loadMethods();
  }, [searchQuery, selectedCategory]);

  const loadData = async () => {
    try {
      const [methodsData, categoriesData] = await Promise.all([
        methodService.getMethodsWithBelongings({}),
        categoryService.getCategories({ type: 'method' })
      ]);
      setMethods(methodsData);
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadMethods = async () => {
    try {
      const filters: MethodFilters = {};
      if (searchQuery) filters.search = searchQuery;
      if (selectedCategory) filters.categoryId = selectedCategory;

      const data = await methodService.getMethodsWithBelongings(filters);
      setMethods(data);
    } catch (error) {
      console.error('Failed to load methods:', error);
    }
  };

  const handleDelete = async (methodId: string) => {
    if (!confirm('Are you sure you want to delete this method?')) return;
    
    try {
      await methodService.deleteMethod(methodId);
      setMethods(prev => prev.filter(method => method.id !== methodId));
    } catch (error) {
      console.error('Failed to delete method:', error);
      alert('Failed to delete method. Please try again.');
    }
  };

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 space-y-6">
          {/* Header */}
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Teaching Methods
              </h1>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Manage teaching strategies and methodologies
              </p>
            </div>
            <Button
              onClick={() => router.push('/methods/new')}
              leftIcon={<Plus className="h-4 w-4" />}
            >
              New Method
            </Button>
          </div>

          {/* Filters */}
          <Card>
            <Card.Content className="p-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search methods..."
                    className="pl-10"
                  />
                </div>
                
                <Select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  options={[
                    { value: '', label: 'All Categories' },
                    ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                  ]}
                  placeholder="Category"
                />
              </div>
            </Card.Content>
          </Card>

          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Cog className="h-8 w-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{methods.length}</p>
                    <p className="text-sm text-gray-600">Total Methods</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Clock className="h-8 w-8 text-purple-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{categories.length}</p>
                    <p className="text-sm text-gray-600">Categories</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Users className="h-8 w-8 text-green-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {methods.reduce((sum, method) => sum + (method.tags?.length || 0), 0)}
                    </p>
                    <p className="text-sm text-gray-600">Total Tags</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
          </div>

          {/* Methods Grid */}
          {methods.length === 0 ? (
            <Card>
              <Card.Content className="p-12 text-center">
                <Cog className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                  No methods found
                </h3>
                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  Get started by creating your first teaching method.
                </p>
                <Button
                  onClick={() => router.push('/methods/new')}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Create First Method
                </Button>
              </Card.Content>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {methods.map((method) => (
                <Card key={method.id} className="hover:shadow-md transition-shadow">
                  <Card.Content className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex-1">
                        <h3 className="font-semibold text-lg mb-1 line-clamp-2">
                          {method.title}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-3">
                          {method.description}
                        </p>
                      </div>
                    </div>

                    <div className="space-y-3">
                      {method.category && (
                        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                          <span className="font-medium">Category:</span>
                          <span className="ml-1">{method.category.name}</span>
                        </div>
                      )}

                      {method.tags && method.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {method.tags.slice(0, 3).map((tag, index) => (
                            <Badge key={index} variant="outline" size="sm">
                              {tag}
                            </Badge>
                          ))}
                          {method.tags.length > 3 && (
                            <Badge variant="outline" size="sm">
                              +{method.tags.length - 3}
                            </Badge>
                          )}
                        </div>
                      )}

                      {/* Belonging Information */}
                      {((method as any).belongingCourses?.length > 0 || (method as any).belongingLessons?.length > 0) && (
                        <div className="text-xs text-gray-500">
                          {(method as any).belongingCourses?.length > 0 && (
                            <div className="flex items-center gap-1 mb-1">
                              <Users className="h-3 w-3" />
                              <span>
                                Courses: {(method as any).belongingCourses.slice(0, 2).map((c: any) => c.title).join(', ')}
                                {(method as any).belongingCourses.length > 2 && ` +${(method as any).belongingCourses.length - 2} more`}
                              </span>
                            </div>
                          )}
                          {(method as any).belongingLessons?.length > 0 && (
                            <div className="flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              <span>
                                Lessons: {(method as any).belongingLessons.slice(0, 2).map((l: any) => l.topic || l.title || `Lesson ${l.lesson_number}`).join(', ')}
                                {(method as any).belongingLessons.length > 2 && ` +${(method as any).belongingLessons.length - 2} more`}
                              </span>
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    <div className="flex justify-between items-center mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => router.push(`/methods/${method.id}/edit`)}
                      >
                        Edit
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(method.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        Delete
                      </Button>
                    </div>
                  </Card.Content>
                </Card>
              ))}
            </div>
          )}
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/objectives/[id]/edit/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { Button, Card, Input, Textarea, Select, Spinner, Badge, Modal, BelongingSelector } from '@/components/ui';
import { objectiveService } from '@/lib/supabase/objectives';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save, Plus, X } from 'lucide-react';
import type { Category, Objective } from '@/types/database';

export default function EditObjectivePage() {
  const router = useRouter();
  const params = useParams();
  const objectiveId = params.id as string;
  
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [newTag, setNewTag] = useState('');
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category_id: '',
    tags: [] as string[],
    belongingCourses: [] as string[],
    belongingLessons: [] as string[],
  });

  useEffect(() => {
    Promise.all([loadObjective(), loadCategories()]);
  }, [objectiveId]);

  const loadObjective = async () => {
    try {
      const objective = await objectiveService.getObjective(objectiveId);
      
      // Load belonging relationships
      const objectiveWithBelongings = await objectiveService.getObjectivesWithBelongings({ search: '', tags: [] });
      const currentObjective = objectiveWithBelongings.find(o => o.id === objectiveId);
      
      setFormData({
        title: objective.title,
        description: objective.description || '',
        category_id: objective.category_id || '',
        tags: objective.tags || [],
        belongingCourses: (currentObjective as any)?.belongingCourses?.map((c: any) => c.id) || [],
        belongingLessons: (currentObjective as any)?.belongingLessons?.map((l: any) => l.id) || [],
      });
    } catch (error) {
      console.error('Failed to load objective:', error);
      alert('Failed to load objective');
      router.push('/objectives');
    } finally {
      setInitialLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'objective' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      alert('Please enter an objective title');
      return;
    }

    setLoading(true);
    try {
      // Update the objective
      await objectiveService.updateObjective({ 
        id: objectiveId, 
        title: formData.title,
        description: formData.description,
        category_id: formData.category_id || undefined,
        tags: formData.tags,
      });

      // Update belonging relationships
      // First, remove all existing relationships
      try {
        await objectiveService.removeObjectiveFromAllCourses(objectiveId);
        await objectiveService.removeObjectiveFromAllLessons(objectiveId);
      } catch (removeError) {
        console.error('Failed to remove existing relationships (non-fatal):', removeError);
      }

      // Add to selected courses
      try {
        for (const courseId of formData.belongingCourses) {
          await objectiveService.addObjectiveToCourse(courseId, objectiveId, { position: 0 });
        }
      } catch (courseError) {
        console.error('Failed to add to courses (non-fatal):', courseError);
      }

      // Add to selected lessons
      try {
        for (const lessonId of formData.belongingLessons) {
          await objectiveService.addObjectiveToLesson(lessonId, objectiveId, { position: 0 });
        }
      } catch (lessonError) {
        console.error('Failed to add to lessons (non-fatal):', lessonError);
      }

      router.push('/objectives');
    } catch (error) {
      console.error('Failed to update objective:', error);
      alert('Failed to update objective. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleTagKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'objective',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      // Reload categories specifically to ensure fresh data
      const freshCategories = await categoryService.getCategories({ type: 'objective' });
      setCategories(freshCategories);
      setFormData(prev => ({ ...prev, category_id: newCategory.id }));
      
    } catch (error) {
      console.error("Failed to create objective category:", error);
      alert('Failed to create category. Please try again.');
    }
  };

  if (initialLoading) {
    return (
      <div className="flex justify-center py-12">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Edit Objective
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Update objective details and settings
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Objective Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Title *
                  </label>
                  <Input
                    value={formData.title}
                    onChange={(e) => handleChange('title', e.target.value)}
                    placeholder="Enter objective title..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe what students should achieve or learn..."
                    rows={4}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Category
                  </label>
                  <div className="flex items-center gap-2">
                    <Select
                      className="flex-grow"
                      value={formData.category_id}
                      onChange={(e) => handleChange('category_id', e.target.value)}
                      options={[
                        { value: '', label: 'Select category...' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="md"
                      onClick={() => setIsCategoryModalOpen(true)}
                      className="flex-shrink-0 !h-10"
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Tags
                  </label>
                  <div className="space-y-3">
                    <div className="flex gap-2">
                      <Input
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        onKeyPress={handleTagKeyPress}
                        placeholder="Add a tag..."
                        className="flex-1"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={addTag}
                        leftIcon={<Plus className="h-4 w-4" />}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {formData.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {formData.tags.map((tag, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="flex items-center gap-1"
                          >
                            {tag}
                            <button
                              type="button"
                              onClick={() => removeTag(tag)}
                              className="ml-1 hover:text-red-600"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Add relevant tags to help categorize this objective
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Belongs To
                  </label>
                  <BelongingSelector
                    selectedCourses={formData.belongingCourses}
                    selectedLessons={formData.belongingLessons}
                    onCoursesChange={(courses) => setFormData(prev => ({ ...prev, belongingCourses: courses }))}
                    onLessonsChange={(lessons) => setFormData(prev => ({ ...prev, belongingLessons: lessons }))}
                    disabled={loading}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Select which courses and lessons this objective will be used in
                  </p>
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>

          <Modal
            isOpen={isCategoryModalOpen}
            onClose={() => setIsCategoryModalOpen(false)}
            title="Create New Objective Category"
            size="sm"
          >
            <div className="space-y-4">
              <Input
                label="Category Name"
                value={newCategoryName}
                onChange={(e) => setNewCategoryName(e.target.value)}
                placeholder="e.g., Knowledge, Skills, Understanding, etc."
                required
              />
              <Input
                label="Category Color"
                type="color"
                value={newCategoryColor}
                onChange={(e) => setNewCategoryColor(e.target.value)}
                className="h-10"
              />
            </div>
            <div className="mt-6 flex justify-end gap-3">
              <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateCategory}>
                Create Category
              </Button>
            </div>
          </Modal>
    </div>
  );
}

================
File: src/app/objectives/layout.tsx
================
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';

export default function ObjectivesLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>{children}</DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/objectives/new/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button, Card, Input, Textarea, Select, Spinner, Badge, Modal, BelongingSelector } from '@/components/ui';
import { objectiveService } from '@/lib/supabase/objectives';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save, Plus, X } from 'lucide-react';
import type { Category } from '@/types/database';

export default function NewObjectivePage() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [categoriesLoading, setCategoriesLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [newTag, setNewTag] = useState('');
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category_id: '',
    tags: [] as string[],
    belongingCourses: [] as string[],
    belongingLessons: [] as string[],
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setCategoriesLoading(true);
      const categoriesData = await categoryService.getCategories({ type: 'objective' });
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setCategoriesLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      alert('Please enter an objective title');
      return;
    }

    setLoading(true);
    try {
      const objective = await objectiveService.createObjective({
        title: formData.title,
        description: formData.description,
        category_id: formData.category_id,
        tags: formData.tags,
      });

      // Add to selected courses
      for (const courseId of formData.belongingCourses) {
        await objectiveService.addObjectiveToCourse(courseId, objective.id, { position: 0 });
      }

      // Add to selected lessons
      for (const lessonId of formData.belongingLessons) {
        await objectiveService.addObjectiveToLesson(lessonId, objective.id, { position: 0 });
      }

      router.push('/objectives');
    } catch (error) {
      console.error('Failed to create objective:', error);
      alert('Failed to create objective. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleTagKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addTag();
    }
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'objective',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      // Reload categories specifically to ensure fresh data
      const freshCategories = await categoryService.getCategories({ type: 'objective' });
      setCategories(freshCategories);
      setFormData(prev => ({ ...prev, category_id: newCategory.id }));
      
    } catch (error) {
      console.error("Failed to create objective category:", error);
      alert('Failed to create category. Please try again.');
    }
  };


  if (categoriesLoading) {
    return (
      <div className="p-6 max-w-2xl mx-auto">
        <div className="flex justify-center items-center h-64">
          <Spinner size="lg" />
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Create New Objective
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Add a new teaching objective for courses and lessons
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Objective Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Title *
                  </label>
                  <Input
                    value={formData.title}
                    onChange={(e) => handleChange('title', e.target.value)}
                    placeholder="Enter objective title..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe what students should achieve or learn..."
                    rows={4}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Category
                  </label>
                  <div className="flex items-center gap-2">
                    <Select
                      className="flex-grow"
                      value={formData.category_id}
                      onChange={(e) => handleChange('category_id', e.target.value)}
                      options={[
                        { value: '', label: 'Select category...' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="md"
                      onClick={() => setIsCategoryModalOpen(true)}
                      className="flex-shrink-0 !h-10"
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Tags
                  </label>
                  <div className="space-y-3">
                    <div className="flex gap-2">
                      <Input
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        onKeyPress={handleTagKeyPress}
                        placeholder="Add a tag..."
                        className="flex-1"
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={addTag}
                        leftIcon={<Plus className="h-4 w-4" />}
                      >
                        Add
                      </Button>
                    </div>
                    
                    {formData.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2">
                        {formData.tags.map((tag, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="flex items-center gap-1"
                          >
                            {tag}
                            <button
                              type="button"
                              onClick={() => removeTag(tag)}
                              className="ml-1 hover:text-red-600"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Add relevant tags to help categorize this objective
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Belongs To
                  </label>
                  <BelongingSelector
                    selectedCourses={formData.belongingCourses}
                    selectedLessons={formData.belongingLessons}
                    onCoursesChange={(courses) => setFormData(prev => ({ ...prev, belongingCourses: courses }))}
                    onLessonsChange={(lessons) => setFormData(prev => ({ ...prev, belongingLessons: lessons }))}
                    disabled={loading}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Select which courses and lessons this objective will be used in
                  </p>
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Creating...' : 'Create Objective'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>

          <Modal
            isOpen={isCategoryModalOpen}
            onClose={() => setIsCategoryModalOpen(false)}
            title="Create New Objective Category"
            size="sm"
          >
            <div className="space-y-4">
              <Input
                label="Category Name"
                value={newCategoryName}
                onChange={(e) => setNewCategoryName(e.target.value)}
                placeholder="e.g., Knowledge, Skills, Comprehension, etc."
                required
              />
              <Input
                label="Category Color"
                type="color"
                value={newCategoryColor}
                onChange={(e) => setNewCategoryColor(e.target.value)}
                className="h-10"
              />
            </div>
            <div className="mt-6 flex justify-end gap-3">
              <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
                Cancel
              </Button>
              <Button onClick={handleCreateCategory}>
                Create Category
              </Button>
            </div>
          </Modal>
    </div>
  );
}

================
File: src/app/objectives/page.tsx
================
'use client';

import { useState, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Select';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Spinner } from '@/components/ui/Spinner';
import { objectiveService } from '@/lib/supabase/objectives';
import { categoryService } from '@/lib/supabase/categories';
import type { Objective, Category } from '@/types/database';
import { 
  Plus, 
  Search, 
  Filter, 
  Target, 
  Clock, 
  BookOpen,
  Edit,
  Trash2,
  Eye,
  Users,
  CheckCircle
} from 'lucide-react';

export default function ObjectivesPage() {
  const router = useRouter();
  const [objectives, setObjectives] = useState<Objective[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [objectivesData, categoriesData] = await Promise.all([
        objectiveService.getObjectivesWithBelongings({}),
        categoryService.getCategories({ type: 'objective' })
      ]);
      setObjectives(objectivesData);
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredObjectives = useMemo(() => {
    return objectives.filter(objective => {
      // Search filter
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        const matchesSearch = 
          objective.title.toLowerCase().includes(query) ||
          (objective.description && objective.description.toLowerCase().includes(query)) ||
          (objective.tags && objective.tags.some(tag => tag.toLowerCase().includes(query)));
        if (!matchesSearch) return false;
      }

      // Category filter
      if (selectedCategory && objective.category_id !== selectedCategory) {
        return false;
      }

      return true;
    });
  }, [objectives, searchQuery, selectedCategory]);

  const handleDelete = async (objectiveId: string) => {
    if (!confirm('Are you sure you want to delete this objective?')) return;
    
    try {
      await objectiveService.deleteObjective(objectiveId);
      setObjectives(prev => prev.filter(obj => obj.id !== objectiveId));
    } catch (error) {
      console.error('Failed to delete objective:', error);
      alert('Failed to delete objective. Please try again.');
    }
  };


  if (loading) {
    return (
      <div className="flex justify-center py-12">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
            Teaching Objectives
          </h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Manage reusable teaching objectives for courses and lessons
          </p>
        </div>
        <Button
          onClick={() => router.push('/objectives/new')}
          leftIcon={<Plus className="h-4 w-4" />}
        >
          New Objective
        </Button>
      </div>

      {/* Filters */}
      <Card>
        <Card.Content className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search objectives..."
                className="pl-10"
              />
            </div>
            
            <Select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              options={[
                { value: '', label: 'All Categories' },
                ...categories.map(cat => ({ value: cat.id, label: cat.name }))
              ]}
              placeholder="Category"
            />
          </div>
        </Card.Content>
      </Card>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Target className="h-8 w-8 text-blue-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{objectives.length}</p>
                <p className="text-sm text-gray-600">Total Objectives</p>
              </div>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <BookOpen className="h-8 w-8 text-purple-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">{categories.length}</p>
                <p className="text-sm text-gray-600">Categories</p>
              </div>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Content className="p-4">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-green-600 mr-3" />
              <div>
                <p className="text-2xl font-bold">
                  {objectives.reduce((sum, obj) => sum + (obj.tags?.length || 0), 0)}
                </p>
                <p className="text-sm text-gray-600">Total Tags</p>
              </div>
            </div>
          </Card.Content>
        </Card>
      </div>

      {/* Objectives Grid */}
      {filteredObjectives.length === 0 ? (
        <Card>
          <Card.Content className="p-12 text-center">
            <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              No objectives found
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              {searchQuery || selectedCategory
                ? 'Try adjusting your filters to see more results.'
                : 'Get started by creating your first teaching objective.'
              }
            </p>
            {!searchQuery && !selectedCategory && (
              <Button
                onClick={() => router.push('/objectives/new')}
                leftIcon={<Plus className="h-4 w-4" />}
              >
                Create First Objective
              </Button>
            )}
          </Card.Content>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredObjectives.map((objective) => (
            <Card key={objective.id} className="hover:shadow-md transition-shadow">
              <Card.Content className="p-6">
                <div className="flex justify-between items-start mb-3">
                  <div className="flex-1">
                    <h3 className="font-semibold text-lg mb-1 line-clamp-2">
                      {objective.title}
                    </h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-3">
                      {objective.description}
                    </p>
                  </div>
                  {objective.is_template && (
                    <Badge variant="outline" size="sm" className="ml-2">
                      Template
                    </Badge>
                  )}
                </div>

                <div className="space-y-3">
                  {objective.category && (
                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <span className="font-medium">Category:</span>
                      <span className="ml-1">{objective.category.name}</span>
                    </div>
                  )}

                  {objective.tags && objective.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {objective.tags.slice(0, 3).map((tag, index) => (
                        <Badge key={index} variant="outline" size="sm">
                          {tag}
                        </Badge>
                      ))}
                      {objective.tags.length > 3 && (
                        <Badge variant="outline" size="sm">
                          +{objective.tags.length - 3}
                        </Badge>
                      )}
                    </div>
                  )}

                  {/* Belonging Information */}
                  {((objective as any).belongingCourses?.length > 0 || (objective as any).belongingLessons?.length > 0) && (
                    <div className="text-xs text-gray-500">
                      {(objective as any).belongingCourses?.length > 0 && (
                        <div className="flex items-center gap-1 mb-1">
                          <BookOpen className="h-3 w-3" />
                          <span>
                            Courses: {(objective as any).belongingCourses.slice(0, 2).map((c: any) => c.title).join(', ')}
                            {(objective as any).belongingCourses.length > 2 && ` +${(objective as any).belongingCourses.length - 2} more`}
                          </span>
                        </div>
                      )}
                      {(objective as any).belongingLessons?.length > 0 && (
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          <span>
                            Lessons: {(objective as any).belongingLessons.slice(0, 2).map((l: any) => l.topic || l.title || `Lesson ${l.lesson_number}`).join(', ')}
                            {(objective as any).belongingLessons.length > 2 && ` +${(objective as any).belongingLessons.length - 2} more`}
                          </span>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                <div className="flex justify-between items-center mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => router.push(`/objectives/${objective.id}`)}
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      View
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => router.push(`/objectives/${objective.id}/edit`)}
                    >
                      <Edit className="h-3 w-3 mr-1" />
                      Edit
                    </Button>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleDelete(objective.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="h-3 w-3" />
                  </Button>
                </div>
              </Card.Content>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/app/page.tsx
================
'use client';

import Link from 'next/link';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/Button';

export default function HomePage() {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 to-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <h1 className="text-2xl font-bold text-primary-600">
                  Course Builder
                </h1>
              </div>
            </div>
            <nav className="hidden md:flex space-x-8">
              {user ? (
                <>
                  <Link 
                    href="/dashboard" 
                    className="text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium"
                  >
                    Dashboard
                  </Link>
                  <Link 
                    href="/courses" 
                    className="text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium"
                  >
                    Courses
                  </Link>
                  <Link 
                    href="/books" 
                    className="text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium"
                  >
                    Books
                  </Link>
                </>
              ) : (
                <>
                  <Link 
                    href="/auth" 
                    className="text-gray-600 hover:text-primary-600 px-3 py-2 text-sm font-medium"
                  >
                    Sign In
                  </Link>
                </>
              )}
            </nav>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="text-center">
          <h2 className="text-4xl font-extrabold text-gray-900 sm:text-5xl">
            Modular Course Design & Management Platform
          </h2>
          <p className="mt-6 text-xl text-gray-600 max-w-3xl mx-auto">
            A highly flexible, customizable online course construction tool. 
            Empower educators, trainers, and content creators to efficiently design, 
            combine, manage, and share structured, modular educational content.
          </p>
          
          <div className="mt-10 flex justify-center gap-4">
            {user ? (
              <>
                <Link href="/dashboard">
                  <Button variant="primary">Go to Dashboard</Button>
                </Link>
                <Link href="/courses">
                  <Button variant="outline">View Courses</Button>
                </Link>
              </>
            ) : (
              <>
                <Link href="/auth">
                  <Button variant="primary">Get Started</Button>
                </Link>
                <Link href="/auth">
                  <Button variant="outline">Sign In</Button>
                </Link>
              </>
            )}
          </div>
        </div>

        {/* Feature Grid */}
        <div className="mt-20 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature) => (
            <div key={feature.title} className="card p-6">
              <div className="flex items-center justify-center w-12 h-12 bg-primary-100 rounded-lg mb-4">
                <span className="text-2xl">{feature.icon}</span>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600">
                {feature.description}
              </p>
            </div>
          ))}
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-24">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center text-gray-600">
            <p>&copy; 2024 Course Builder. Built for educators and content creators.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}

const features = [
  {
    icon: '📚',
    title: 'Course Management',
    description: 'Create and manage courses by combining books, schedules, objectives, and methods into complete educational experiences.',
  },
  {
    icon: '📖',
    title: 'Book Library',
    description: 'Centralized library of reusable educational materials and books that can be associated with multiple courses.',
  },
  {
    icon: '📝',
    title: 'Vocabulary System',
    description: 'Organize vocabulary into groups with CEFR levels, part of speech, and definitions for language learning.',
  },
  {
    icon: '📅',
    title: 'Schedule Design',
    description: 'Create flexible teaching schedules with calendar views, lesson planning, and attendance tracking.',
  },
  {
    icon: '🎯',
    title: 'Learning Objectives',
    description: 'Build a library of reusable teaching objectives to ensure consistency and continuity across courses.',
  },
  {
    icon: '🔧',
    title: 'Teaching Methods',
    description: 'Manage various teaching strategies including PBL, flipped classroom, and group discussions.',
  },
];

================
File: src/app/schedules/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ArrowLeft } from 'lucide-react';
import { Button, Card, Spinner } from '@/components/ui';
import { ScheduleForm } from '@/components/schedules/ScheduleForm';
import { scheduleService } from '@/lib/supabase/schedules';
import { Schedule } from '@/types/schedule';

export default function EditSchedulePage() {
  const router = useRouter();
  const params = useParams();
  const scheduleId = params.id as string;
  
  const [schedule, setSchedule] = useState<Schedule | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (scheduleId) {
      loadSchedule();
    }
  }, [scheduleId]);

  const loadSchedule = async () => {
    try {
      setLoading(true);
      const data = await scheduleService.getSchedule(scheduleId);
      setSchedule(data as Schedule);
    } catch (error) {
      console.error('Failed to load schedule:', error);
      router.push('/schedules');
    } finally {
      setLoading(false);
    }
  };

  const handleSuccess = () => {
    handleBack();
  };

  const handleBack = () => {
    // Use browser history to go back if possible
    if (window.history.length > 1) {
      router.back();
    } else {
      // Fallback - go to schedule detail page
      router.push(`/schedules/${scheduleId}`);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-full p-8">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!schedule) {
    return <div className="p-8 text-center text-gray-500">Schedule not found.</div>;
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <Button
        variant="ghost"
        size="sm"
        onClick={handleBack}
        className="mb-4"
      >
        <ArrowLeft className="h-4 w-4 mr-2" />
        Back
      </Button>

      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Edit Schedule</h1>
        <p className="mt-1 text-sm text-gray-600">
          Update the schedule details for &quot;{schedule.name}&quot;
        </p>
      </div>

      <Card>
        <Card.Content className="p-6">
          <ScheduleForm schedule={schedule} onSuccess={handleSuccess} />
        </Card.Content>
      </Card>
    </div>
  );
}

================
File: src/app/schedules/[id]/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { ArrowLeft, Edit, Trash2, Calendar, Clock, Users } from 'lucide-react';
import { Schedule, Lesson } from '@/types/schedule';
import { scheduleService } from '@/lib/supabase/schedules';
import { Button, Card, Badge, Spinner, Modal } from '@/components/ui';
import { ScheduleCalendar } from '@/components/schedules/ScheduleCalendar';
import { LessonDetailModal } from '@/components/schedules/LessonDetailModal';
import { LessonForm } from '@/components/schedules/LessonForm'; // <-- Import LessonForm

export default function ScheduleDetailPage() {
  const router = useRouter();
  const params = useParams();
  const scheduleId = params.id as string;

  const [schedule, setSchedule] = useState<Schedule | null>(null);
  const [loading, setLoading] = useState(true);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [deleting, setDeleting] = useState(false);
  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);
  const [editingLesson, setEditingLesson] = useState<Lesson | null>(null); // <-- State for editing modal

  useEffect(() => {
    if (scheduleId) {
      loadSchedule();
    }
  }, [scheduleId]);

  const loadSchedule = async () => {
    try {
      setLoading(true);
      const data = await scheduleService.getSchedule(scheduleId);
      setSchedule(data as Schedule);
    } catch (error) {
      console.error('Failed to load schedule:', error);
      router.push('/schedules');
    } finally {
      setLoading(false);
    }
  };
  
  const handleDelete = async () => {
    if (!schedule) return;
    setDeleting(true);
    try {
      await scheduleService.deleteSchedule(schedule.id);
      router.push('/schedules');
      router.refresh();
    } catch (error) {
      console.error('Failed to delete schedule:', error);
    } finally {
      setDeleting(false);
      setShowDeleteModal(false);
    }
  };

  const handleStartEditLesson = (lesson: Lesson) => {
    setSelectedLesson(null); // Close the detail modal
    setEditingLesson(lesson); // Open the edit modal
  };

  const handleFinishEdit = () => {
    setEditingLesson(null); // Close the edit modal
    loadSchedule(); // Refresh data to see changes
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-full p-8">
        <Spinner size="lg" />
      </div>
    );
  }

  if (!schedule) {
    return <div className="p-8 text-center text-gray-500">Schedule not found.</div>;
  }

  return (
    <>
      <div className="p-6 space-y-6">
        {/* Header and Details Card... (code remains the same) */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
                <Button variant="ghost" size="sm" onClick={() => router.push('/schedules')} className="mb-4">
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    Back to Schedules
                </Button>
                <h1 className="text-2xl font-bold text-gray-900">{schedule.name}</h1>
                <p className="mt-1 text-sm text-gray-600">
                    For course: <strong>{schedule.course?.title || 'N/A'}</strong>
                </p>
            </div>
            <div className="flex items-center gap-2">
                <Button variant="outline" onClick={() => router.push(`/schedules/${scheduleId}/edit`)} leftIcon={<Edit className="h-4 w-4" />}>
                    Edit Schedule
                </Button>
                <Button variant="danger" onClick={() => setShowDeleteModal(true)} leftIcon={<Trash2 className="h-4 w-4" />}>
                    Delete Schedule
                </Button>
            </div>
        </div>
        <Card>
            <Card.Header><h2 className="text-lg font-semibold">Schedule Details</h2></Card.Header>
            <Card.Content>
                <dl className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-6 text-sm">
                    <div className="flex items-start gap-3"><Calendar className="h-5 w-5 text-gray-400 mt-0.5"/><div><dt className="font-medium text-gray-500">Duration</dt><dd>{new Date(schedule.start_date).toLocaleDateString()} - {schedule.end_date ? new Date(schedule.end_date).toLocaleDateString() : 'Ongoing'}</dd></div></div>
                    <div className="flex items-start gap-3"><Clock className="h-5 w-5 text-gray-400 mt-0.5"/><div><dt className="font-medium text-gray-500">Default Time</dt><dd>{schedule.default_start_time} ({schedule.default_duration_minutes} min)</dd></div></div>
                    <div className="flex items-start gap-3"><Users className="h-5 w-5 text-gray-400 mt-0.5"/><div><dt className="font-medium text-gray-500">Max Students</dt><dd>{schedule.max_students || 'Not set'}</dd></div></div>
                    <div className="col-span-full"><dt className="font-medium text-gray-500">Description</dt><dd className="mt-1 text-gray-700">{schedule.description || 'No description provided.'}</dd></div>
                </dl>
            </Card.Content>
        </Card>
      
        <Card>
          <Card.Header>
              <h2 className="text-lg font-semibold">Lesson Calendar</h2>
          </Card.Header>
          <Card.Content>
              <ScheduleCalendar schedule={schedule} onSelectLesson={(lesson) => setSelectedLesson(lesson as Lesson)} />
          </Card.Content>
        </Card>

        {/* Delete Schedule Modal */}
        <Modal isOpen={showDeleteModal} onClose={() => setShowDeleteModal(false)} title="Delete Schedule" className="max-w-md">
            <p className="text-gray-600">Are you sure you want to delete &quot;{schedule.name}&quot;? This will also delete all associated lessons and cannot be undone.</p>
            <div className="flex justify-end gap-3 mt-6">
                <Button variant="outline" onClick={() => setShowDeleteModal(false)}>Cancel</Button>
                <Button variant="danger" onClick={handleDelete} loading={deleting}>Delete Schedule</Button>
            </div>
        </Modal>
      </div>

      {/* Lesson View/Edit Modals */}
      <LessonDetailModal 
        isOpen={!!selectedLesson}
        onClose={() => setSelectedLesson(null)}
        lesson={selectedLesson}
        onEdit={handleStartEditLesson}
      />

      {editingLesson && (
        <Modal isOpen={!!editingLesson} onClose={() => setEditingLesson(null)} title={`Edit Lesson: ${editingLesson.title}`} size="xl">
            <LessonForm lesson={editingLesson} onSuccess={handleFinishEdit} />
        </Modal>
      )}
    </>
  );
}

================
File: src/app/schedules/layout.tsx
================
'use client';

import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { AuthGuard } from '@/components/auth/AuthGuard';

export default function SchedulesLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthGuard>
      <DashboardLayout>{children}</DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/schedules/new/page.tsx
================
'use client';

import { ScheduleForm } from '@/components/schedules/ScheduleForm';

export default function NewSchedulePage() {
  return (
    <div className="max-w-4xl mx-auto py-8">
      <ScheduleForm />
    </div>
  );
}

================
File: src/app/schedules/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Plus, Search, Calendar, Copy, ArrowLeft, CheckCircle } from 'lucide-react';
import { Schedule } from '@/types/schedule';
import { scheduleService } from '@/lib/supabase/schedules';
import { 
  Button, Card, Badge, SearchBox, Spinner, Modal 
} from '@/components/ui';

export default function SchedulesPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedSchedules, setSelectedSchedules] = useState<Set<string>>(new Set());
  const [attaching, setAttaching] = useState(false);
  
  const courseId = searchParams.get('courseId');
  const action = searchParams.get('action');
  const isAttachMode = action === 'attach' && courseId;

  useEffect(() => {
    loadSchedules();
  }, []);

  const loadSchedules = async () => {
    try {
      setLoading(true);
      // Get all schedules
      const data = await scheduleService.getSchedules({});
      
      // If in attach mode, filter out schedules that already belong to this course
      if (isAttachMode && courseId) {
        const filteredSchedules = data.filter(schedule => schedule.course_id !== courseId);
        setSchedules(filteredSchedules as Schedule[]);
      } else {
        setSchedules(data as Schedule[]);
      }
    } catch (error) {
      console.error('Failed to load schedules:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (search: string) => {
    // For now, re-fetches all. Can be optimized with search filter later.
    loadSchedules(); 
  };

  const toggleScheduleSelection = (scheduleId: string) => {
    const newSelection = new Set(selectedSchedules);
    if (newSelection.has(scheduleId)) {
      newSelection.delete(scheduleId);
    } else {
      newSelection.add(scheduleId);
    }
    setSelectedSchedules(newSelection);
  };

  const handleAttachSchedules = async () => {
    if (!courseId || selectedSchedules.size === 0) return;
    
    setAttaching(true);
    try {
      let successCount = 0;
      
      for (const scheduleId of Array.from(selectedSchedules)) {
        const originalSchedule = schedules.find(s => s.id === scheduleId);
        if (!originalSchedule) continue;
        
        // Clone the schedule for the new course
        const clonedScheduleData = {
          ...originalSchedule,
          course_id: courseId,
          name: `${originalSchedule.name} (Copy)`,
          // Remove fields that shouldn't be copied
          id: undefined,
          created_at: undefined,
          updated_at: undefined,
          course: undefined,
          lessons: undefined,
        };
        
        await scheduleService.createSchedule(clonedScheduleData);
        successCount++;
      }
      
      // Navigate back to the course with success message
      router.push(`/courses/${courseId}?tab=schedule&attached=${successCount}`);
    } catch (error) {
      console.error('Failed to attach schedules:', error);
    } finally {
      setAttaching(false);
    }
  };

  const handleScheduleClick = (schedule: Schedule) => {
    if (isAttachMode) {
      toggleScheduleSelection(schedule.id);
    } else {
      router.push(`/schedules/${schedule.id}`);
    }
  };

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          {isAttachMode && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.push(`/courses/${courseId}?tab=schedule`)}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
              className="mb-2"
            >
              Back to Course
            </Button>
          )}
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
            {isAttachMode ? 'Attach Existing Schedules' : 'Schedules'}
          </h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {isAttachMode 
              ? `Select schedules to attach to your course. Selected schedules will be cloned.`
              : 'Manage your course schedules and lesson plans.'
            }
          </p>
        </div>
        <div className="flex gap-2">
          {isAttachMode ? (
            <Button
              onClick={handleAttachSchedules}
              disabled={selectedSchedules.size === 0 || attaching}
              leftIcon={attaching ? <Spinner size="sm" /> : <Copy className="h-4 w-4" />}
            >
              {attaching ? 'Attaching...' : `Attach ${selectedSchedules.size} Schedule${selectedSchedules.size !== 1 ? 's' : ''}`}
            </Button>
          ) : (
            <Button
              onClick={() => router.push('/schedules/new')}
              leftIcon={<Plus className="h-4 w-4" />}
            >
              Create Schedule
            </Button>
          )}
        </div>
      </div>

      {/* Search and Filters Placeholder */}
      <div className="flex-1">
        <SearchBox
          placeholder="Search schedules..."
          onSearch={handleSearch}
          fullWidth
        />
      </div>

      {/* Schedules Display */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : schedules.length === 0 ? (
        <Card className="p-12 text-center">
          <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No schedules found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Get started by creating your first schedule.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/schedules/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create Schedule
          </Button>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {schedules.map((schedule) => {
            const isSelected = selectedSchedules.has(schedule.id);
            return (
              <Card
                key={schedule.id}
                className={`transition-all cursor-pointer ${
                  isAttachMode 
                    ? isSelected 
                      ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' 
                      : 'hover:ring-1 hover:ring-gray-300'
                    : 'hover:shadow-lg'
                }`}
                onClick={() => handleScheduleClick(schedule)}
              >
                <Card.Content className="p-4">
                  {isAttachMode && (
                    <div className="flex items-center gap-2 mb-3">
                      <input
                        type="checkbox"
                        checked={isSelected}
                        onChange={() => toggleScheduleSelection(schedule.id)}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        onClick={(e) => e.stopPropagation()}
                      />
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        {isSelected ? 'Selected' : 'Select to attach'}
                      </span>
                    </div>
                  )}
                  <h3 className="text-lg font-semibold text-gray-900 line-clamp-1">{schedule.name}</h3>
                  {schedule.description && <p className="text-sm text-gray-600 line-clamp-2 mt-1">{schedule.description}</p>}
                  <div className="mt-3 flex justify-between items-center text-sm text-gray-500">
                    {/* The course relation might not be populated, so we add a fallback */}
                    <span>{schedule.course?.title || 'No Course'}</span>
                    <Badge variant={schedule.is_active ? 'success' : 'secondary'}>
                      {schedule.is_active ? 'Active' : 'Inactive'}
                    </Badge>
                  </div>
                </Card.Content>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}

================
File: src/app/tasks/[id]/edit/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Input, Textarea, Select, Spinner } from '@/components/ui';
import { BelongingSelector } from '@/components/ui/BelongingSelector';
import { taskService } from '@/lib/supabase/tasks';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save } from 'lucide-react';
import type { Category, Task } from '@/types/database';

export default function EditTaskPage() {
  const router = useRouter();
  const params = useParams();
  const taskId = params.id as string;
  
  const [loading, setLoading] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);
  const [categories, setCategories] = useState<Category[]>([]);
  const [belongingCourses, setBelongingCourses] = useState<string[]>([]);
  const [belongingLessons, setBelongingLessons] = useState<string[]>([]);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category_id: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',
    points: 0,
  });

  useEffect(() => {
    Promise.all([loadTask(), loadCategories()]);
  }, [taskId]);

  const loadTask = async () => {
    try {
      const taskWithBelongings = await taskService.getTaskWithBelongings(taskId);
      setFormData({
        title: taskWithBelongings.title,
        description: taskWithBelongings.description || '',
        category_id: taskWithBelongings.category_id || '',
        priority: taskWithBelongings.priority || 'medium',
        points: taskWithBelongings.points || 0,
      });
      
      // Set belonging relationships
      setBelongingCourses(taskWithBelongings.belongingCourses?.map((c: any) => c.id || c) || []);
      setBelongingLessons(taskWithBelongings.belongingLessons?.map((l: any) => l.id || l) || []);
    } catch (error) {
      console.error('Failed to load task:', error);
      alert('Failed to load task');
      router.push('/tasks');
    } finally {
      setInitialLoading(false);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'task' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      alert('Please enter a task title');
      return;
    }

    setLoading(true);
    try {
      await taskService.updateTask({ id: taskId, ...formData });
      
      // Update belonging relationships
      // First remove all existing relationships
      await Promise.all([
        taskService.removeTaskFromAllCourses(taskId),
        taskService.removeTaskFromAllLessons(taskId)
      ]);
      
      // Then add new relationships
      await Promise.all([
        // Add to courses
        ...belongingCourses.map((courseId, index) =>
          taskService.addTaskToCourse(courseId, taskId, { position: index })
        ),
        // Add to lessons
        ...belongingLessons.map((lessonId, index) =>
          taskService.addTaskToLesson(lessonId, taskId, { position: index })
        )
      ]);
      
      router.push('/tasks');
    } catch (error) {
      console.error('Failed to update task:', error);
      alert('Failed to update task. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (initialLoading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Edit Task
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Update task details and settings
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Task Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Title *
                  </label>
                  <Input
                    value={formData.title}
                    onChange={(e) => handleChange('title', e.target.value)}
                    placeholder="Enter task title..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe the task and its requirements..."
                    rows={4}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Category
                    </label>
                    <Select
                      value={formData.category_id}
                      onChange={(e) => handleChange('category_id', e.target.value)}
                      options={[
                        { value: '', label: 'Select category...' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Priority
                    </label>
                    <Select
                      value={formData.priority}
                      onChange={(e) => handleChange('priority', e.target.value)}
                      options={[
                        { value: 'low', label: 'Low' },
                        { value: 'medium', label: 'Medium' },
                        { value: 'high', label: 'High' },
                        { value: 'urgent', label: 'Urgent' }
                      ]}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Points
                  </label>
                  <Input
                    type="number"
                    min="0"
                    value={formData.points}
                    onChange={(e) => handleChange('points', parseInt(e.target.value) || 0)}
                    placeholder="0"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Points awarded for completing this task
                  </p>
                </div>

                {/* Belongs To Section */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                    Belongs To
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Select which courses and lessons this task belongs to. You can select multiple courses and lessons.
                  </p>
                  <BelongingSelector
                    selectedCourses={belongingCourses}
                    selectedLessons={belongingLessons}
                    onCoursesChange={setBelongingCourses}
                    onLessonsChange={setBelongingLessons}
                    disabled={loading}
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Saving...' : 'Save Changes'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/tasks/new/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Input, Textarea, Select, Spinner, Modal } from '@/components/ui';
import { BelongingSelector } from '@/components/ui/BelongingSelector';
import { taskService } from '@/lib/supabase/tasks';
import { categoryService } from '@/lib/supabase/categories';
import { ArrowLeft, Save, Plus } from 'lucide-react';
import type { Category } from '@/types/database';

export default function NewTaskPage() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  const [belongingCourses, setBelongingCourses] = useState<string[]>([]);
  const [belongingLessons, setBelongingLessons] = useState<string[]>([]);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category_id: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',
    points: 0,
  });

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'task' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title.trim()) {
      alert('Please enter a task title');
      return;
    }

    setLoading(true);
    try {
      const newTask = await taskService.createTask(formData);
      
      // Add belonging relationships
      await Promise.all([
        // Add to courses
        ...belongingCourses.map((courseId, index) =>
          taskService.addTaskToCourse(courseId, newTask.id, { position: index })
        ),
        // Add to lessons
        ...belongingLessons.map((lessonId, index) =>
          taskService.addTaskToLesson(lessonId, newTask.id, { position: index })
        )
      ]);
      
      router.push('/tasks');
    } catch (error) {
      console.error('Failed to create task:', error);
      alert('Failed to create task. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'task',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      await loadCategories();
      setFormData(prev => ({ ...prev, category_id: newCategory.id }));
      
    } catch (error) {
      console.error("Failed to create task category:", error);
      alert('Failed to create category. Please try again.');
    }
  };

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 max-w-2xl mx-auto">
          <div className="flex items-center gap-4 mb-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="h-4 w-4" />}
            >
              Back
            </Button>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Create New Task
              </h1>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                Add a new learning task for courses and lessons
              </p>
            </div>
          </div>

          <Card>
            <Card.Header>
              <h2 className="text-lg font-medium">Task Details</h2>
            </Card.Header>
            <Card.Content>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Title *
                  </label>
                  <Input
                    value={formData.title}
                    onChange={(e) => handleChange('title', e.target.value)}
                    placeholder="Enter task title..."
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Description
                  </label>
                  <Textarea
                    value={formData.description}
                    onChange={(e) => handleChange('description', e.target.value)}
                    placeholder="Describe the task and its requirements..."
                    rows={4}
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Category
                    </label>
                    <div className="flex items-center gap-2">
                      <Select
                        className="flex-grow"
                        value={formData.category_id}
                        onChange={(e) => handleChange('category_id', e.target.value)}
                        options={[
                          { value: '', label: 'Select category...' },
                          ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                        ]}
                      />
                      <Button
                        type="button"
                        variant="outline"
                        size="md"
                        onClick={() => setIsCategoryModalOpen(true)}
                        className="flex-shrink-0 !h-10"
                      >
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Priority
                    </label>
                    <Select
                      value={formData.priority}
                      onChange={(e) => handleChange('priority', e.target.value)}
                      options={[
                        { value: 'low', label: 'Low' },
                        { value: 'medium', label: 'Medium' },
                        { value: 'high', label: 'High' },
                        { value: 'urgent', label: 'Urgent' }
                      ]}
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Points
                  </label>
                  <Input
                    type="number"
                    min="0"
                    value={formData.points}
                    onChange={(e) => handleChange('points', parseInt(e.target.value) || 0)}
                    placeholder="0"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Points awarded for completing this task
                  </p>
                </div>

                {/* Belongs To Section */}
                <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">
                    Belongs To
                  </h3>
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                    Select which courses and lessons this task belongs to. You can select multiple courses and lessons.
                  </p>
                  <BelongingSelector
                    selectedCourses={belongingCourses}
                    selectedLessons={belongingLessons}
                    onCoursesChange={setBelongingCourses}
                    onLessonsChange={setBelongingLessons}
                    disabled={loading}
                  />
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => router.back()}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={loading}
                    leftIcon={loading ? <Spinner size="sm" /> : <Save className="h-4 w-4" />}
                  >
                    {loading ? 'Creating...' : 'Create Task'}
                  </Button>
                </div>
              </form>
            </Card.Content>
          </Card>
        </div>

        <Modal
          isOpen={isCategoryModalOpen}
          onClose={() => setIsCategoryModalOpen(false)}
          title="Create New Task Category"
          size="sm"
        >
          <div className="space-y-4">
            <Input
              label="Category Name"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
              placeholder="e.g., Assignment, Reading Practice, etc."
              required
            />
            <Input
              label="Category Color"
              type="color"
              value={newCategoryColor}
              onChange={(e) => setNewCategoryColor(e.target.value)}
              className="h-10"
            />
          </div>
          <div className="mt-6 flex justify-end gap-3">
            <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleCreateCategory}>
              Create Category
            </Button>
          </div>
        </Modal>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/tasks/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Plus, Search, CheckCircle, Clock, Users } from 'lucide-react';
import { Task } from '@/types/database';
import { taskService, TaskFilters } from '@/lib/supabase/tasks';
import { categoryService } from '@/lib/supabase/categories';
import { AuthGuard } from '@/components/auth/AuthGuard';
import { DashboardLayout } from '@/components/layout/DashboardLayout';
import { Button, Card, Badge, Input, Select, Spinner } from '@/components/ui';
import { cn } from '@/lib/utils';

const priorityColors: Record<string, 'secondary' | 'warning' | 'danger' | 'primary'> = {
  low: 'secondary',
  medium: 'warning',
  high: 'danger',
  urgent: 'primary',
};

export default function TasksPage() {
  const router = useRouter();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedPriority, setSelectedPriority] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    loadTasks();
  }, [searchQuery, selectedCategory, selectedPriority]);

  const loadData = async () => {
    try {
      const [tasksData, categoriesData] = await Promise.all([
        taskService.getTasksWithBelongings({}),
        categoryService.getCategories({ type: 'task' })
      ]);
      setTasks(tasksData);
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadTasks = async () => {
    try {
      const filters: TaskFilters = {};
      if (searchQuery) filters.search = searchQuery;
      if (selectedCategory) filters.categoryId = selectedCategory;
      if (selectedPriority) filters.priority = selectedPriority as 'low' | 'medium' | 'high' | 'urgent';

      const data = await taskService.getTasksWithBelongings(filters);
      setTasks(data);
    } catch (error) {
      console.error('Failed to load tasks:', error);
    }
  };

  const handleDelete = async (taskId: string) => {
    if (!confirm('Are you sure you want to delete this task?')) return;
    
    try {
      await taskService.deleteTask(taskId);
      setTasks(prev => prev.filter(task => task.id !== taskId));
    } catch (error) {
      console.error('Failed to delete task:', error);
      alert('Failed to delete task. Please try again.');
    }
  };

  if (loading) {
    return (
      <AuthGuard requireAuth={true}>
        <DashboardLayout>
          <div className="flex justify-center py-12">
            <Spinner size="lg" />
          </div>
        </DashboardLayout>
      </AuthGuard>
    );
  }

  return (
    <AuthGuard requireAuth={true}>
      <DashboardLayout>
        <div className="p-6 space-y-6">
          {/* Header */}
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                Tasks
              </h1>
              <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Manage learning tasks and activities for lessons
              </p>
            </div>
            <Button
              onClick={() => router.push('/tasks/new')}
              leftIcon={<Plus className="h-4 w-4" />}
            >
              New Task
            </Button>
          </div>

          {/* Filters */}
          <Card>
            <Card.Content className="p-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="lg:col-span-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="Search tasks..."
                      className="pl-10"
                    />
                  </div>
                </div>
                
                <Select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  options={[
                    { value: '', label: 'All Categories' },
                    ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                  ]}
                  placeholder="Category"
                />
                
                <Select
                  value={selectedPriority}
                  onChange={(e) => setSelectedPriority(e.target.value)}
                  options={[
                    { value: '', label: 'All Priorities' },
                    { value: 'low', label: 'Low' },
                    { value: 'medium', label: 'Medium' },
                    { value: 'high', label: 'High' },
                    { value: 'urgent', label: 'Urgent' }
                  ]}
                  placeholder="Priority"
                />
                
              </div>
            </Card.Content>
          </Card>

          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <CheckCircle className="h-8 w-8 text-blue-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{tasks.length}</p>
                    <p className="text-sm text-gray-600">Total Tasks</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Users className="h-8 w-8 text-green-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {tasks.filter(task => task.priority === 'high' || task.priority === 'urgent').length}
                    </p>
                    <p className="text-sm text-gray-600">High Priority</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <Clock className="h-8 w-8 text-purple-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">{categories.length}</p>
                    <p className="text-sm text-gray-600">Categories</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
            
            <Card>
              <Card.Content className="p-4">
                <div className="flex items-center">
                  <CheckCircle className="h-8 w-8 text-orange-600 mr-3" />
                  <div>
                    <p className="text-2xl font-bold">
                      {tasks.reduce((sum, task) => sum + (task.points || 0), 0)}
                    </p>
                    <p className="text-sm text-gray-600">Total Points</p>
                  </div>
                </div>
              </Card.Content>
            </Card>
          </div>

          {/* Tasks Grid */}
          {tasks.length === 0 ? (
            <Card>
              <Card.Content className="p-12 text-center">
                <CheckCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
                  No tasks found
                </h3>
                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  Get started by creating your first task.
                </p>
                <Button
                  onClick={() => router.push('/tasks/new')}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Create First Task
                </Button>
              </Card.Content>
            </Card>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {tasks.map((task) => (
                <Card key={task.id} className="hover:shadow-md transition-shadow">
                  <Card.Content className="p-6">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex-1">
                        <h3 className="font-semibold text-lg mb-1 line-clamp-2">
                          {task.title}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-3">
                          {task.description}
                        </p>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <div className="flex items-center justify-between text-sm">
                        <div className="flex items-center text-gray-600 dark:text-gray-400">
                          <span className="text-sm font-medium">Points: {task.points || 0}</span>
                        </div>
                        {task.priority && (
                          <Badge variant={priorityColors[task.priority]} size="sm">
                            {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                          </Badge>
                        )}
                      </div>

                      {task.tags && task.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {task.tags.slice(0, 3).map((tag, index) => (
                            <Badge key={index} variant="outline" size="sm">
                              {tag}
                            </Badge>
                          ))}
                          {task.tags.length > 3 && (
                            <Badge variant="outline" size="sm">
                              +{task.tags.length - 3}
                            </Badge>
                          )}
                        </div>
                      )}

                      {/* Belonging Information */}
                      {((task.belongingCourses?.length || 0) > 0 || (task.belongingLessons?.length || 0) > 0) && (
                        <div className="space-y-2">
                          {(task.belongingCourses?.length || 0) > 0 && (
                            <div>
                              <p className="text-xs text-gray-500 mb-1">Courses:</p>
                              <div className="flex flex-wrap gap-1">
                                {task.belongingCourses?.slice(0, 2).map((course: any) => (
                                  <Badge key={course.id} variant="secondary" size="sm">
                                    {course.title}
                                  </Badge>
                                ))}
                                {(task.belongingCourses?.length || 0) > 2 && (
                                  <Badge variant="secondary" size="sm">
                                    +{(task.belongingCourses?.length || 0) - 2} more
                                  </Badge>
                                )}
                              </div>
                            </div>
                          )}
                          
                          {(task.belongingLessons?.length || 0) > 0 && (
                            <div>
                              <p className="text-xs text-gray-500 mb-1">Lessons:</p>
                              <div className="flex flex-wrap gap-1">
                                {task.belongingLessons?.slice(0, 2).map((lesson: any) => (
                                  <Badge key={lesson.id} variant="info" size="sm">
                                    {lesson.topic || lesson.title || `Lesson ${lesson.lesson_number}`}
                                  </Badge>
                                ))}
                                {(task.belongingLessons?.length || 0) > 2 && (
                                  <Badge variant="info" size="sm">
                                    +{(task.belongingLessons?.length || 0) - 2} more
                                  </Badge>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    <div className="flex justify-between items-center mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => router.push(`/tasks/${task.id}/edit`)}
                        >
                          Edit
                        </Button>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(task.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        Delete
                      </Button>
                    </div>
                  </Card.Content>
                </Card>
              ))}
            </div>
          )}
        </div>
      </DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/vocabulary/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft } from 'lucide-react';
import { Vocabulary } from '@/types/database';
import { 
  Button, Card 
} from '@/components/ui';
import { VocabularyForm } from '@/components/vocabulary';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function EditVocabularyPage() {
  const params = useParams();
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [vocabulary, setVocabulary] = useState<Vocabulary | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  const vocabularyId = params.id as string;

  useEffect(() => {
    if (vocabularyId) {
      loadVocabulary();
    }
  }, [vocabularyId]);

  const loadVocabulary = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vocabulary')
        .select('*')
        .eq('id', vocabularyId)
        .single();

      if (error) throw error;
      setVocabulary(data);
    } catch (error) {
      console.error('Failed to load vocabulary:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async (formData: Omit<Vocabulary, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      setSaving(true);
      const { error } = await supabase
        .from('vocabulary')
        .update(formData)
        .eq('id', vocabularyId);

      if (error) throw error;
      router.push(`/vocabulary/${vocabularyId}`);
    } catch (error) {
      console.error('Failed to update vocabulary:', error);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="text-center">
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  if (!vocabulary) {
    return (
      <div className="p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Vocabulary Word Not Found</h1>
          <p className="mt-2 text-gray-600">The vocabulary word you're trying to edit doesn't exist.</p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back to Vocabulary
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push(`/vocabulary/${vocabularyId}`)}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Edit Vocabulary Word</h1>
            <p className="mt-1 text-sm text-gray-600">
              Update the details of "{vocabulary.word}"
            </p>
          </div>
        </div>
      </div>

      {/* Form */}
      <Card>
        <Card.Content className="p-6">
          <VocabularyForm
            initialData={vocabulary}
            onSave={handleSave}
            isLoading={saving}
            onCancel={() => router.push(`/vocabulary/${vocabularyId}`)}
          />
        </Card.Content>
      </Card>
    </div>
  );
}

================
File: src/app/vocabulary/[id]/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft, Edit, Trash2, Volume2 } from 'lucide-react';
import { Vocabulary } from '@/types/database';
import { 
  Button, Card, Badge 
} from '@/components/ui';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function VocabularyDetailPage() {
  const params = useParams();
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [vocabulary, setVocabulary] = useState<Vocabulary | null>(null);
  const [loading, setLoading] = useState(true);

  const vocabularyId = params.id as string;

  useEffect(() => {
    if (vocabularyId) {
      loadVocabulary();
    }
  }, [vocabularyId]);

  const loadVocabulary = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vocabulary')
        .select('*')
        .eq('id', vocabularyId)
        .single();

      if (error) throw error;
      setVocabulary(data);
    } catch (error) {
      console.error('Failed to load vocabulary:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    if (!vocabulary || !confirm('Are you sure you want to delete this vocabulary word?')) return;

    try {
      const { error } = await supabase
        .from('vocabulary')
        .delete()
        .eq('id', vocabulary.id);

      if (error) throw error;
      router.push('/vocabulary');
    } catch (error) {
      console.error('Failed to delete vocabulary:', error);
    }
  };

  const playAudio = () => {
    if (vocabulary?.audio_url) {
      const audio = new Audio(vocabulary.audio_url);
      audio.play();
    }
  };

  if (!vocabulary && !loading) {
    return (
      <div className="p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Vocabulary Word Not Found</h1>
          <p className="mt-2 text-gray-600">The vocabulary word you're looking for doesn't exist.</p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back to Vocabulary
          </Button>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="text-center">
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push('/vocabulary')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{vocabulary?.word}</h1>
            {vocabulary?.translation && (
              <p className="mt-1 text-lg text-gray-600">{vocabulary.translation}</p>
            )}
          </div>
        </div>
        <div className="flex space-x-2">
          <Button
            variant="outline"
            onClick={() => router.push(`/vocabulary/${vocabularyId}/edit`)}
            leftIcon={<Edit className="h-4 w-4" />}
          >
            Edit
          </Button>
          <Button
            variant="outline"
            onClick={handleDelete}
            leftIcon={<Trash2 className="h-4 w-4" />}
          >
            Delete
          </Button>
        </div>
      </div>

      {/* Word Details */}
      {vocabulary && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Basic Information */}
          <Card>
            <Card.Header>
              <Card.Title>Basic Information</Card.Title>
            </Card.Header>
            <Card.Content className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-700">Word</label>
                <div className="mt-1 flex items-center space-x-2">
                  <p className="text-lg font-semibold">{vocabulary.word}</p>
                  {vocabulary.audio_url && (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={playAudio}
                      leftIcon={<Volume2 className="h-4 w-4" />}
                    >
                      Play
                    </Button>
                  )}
                </div>
              </div>

              {vocabulary.translation && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Translation</label>
                  <p className="mt-1">{vocabulary.translation}</p>
                </div>
              )}

              {vocabulary.pronunciation && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Pronunciation</label>
                  <p className="mt-1 font-mono">{vocabulary.pronunciation}</p>
                </div>
              )}

              {vocabulary.part_of_speech && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Part of Speech</label>
                  <p className="mt-1">
                    <Badge variant="secondary">{vocabulary.part_of_speech}</Badge>
                  </p>
                </div>
              )}

              <div>
                <label className="text-sm font-medium text-gray-700">Difficulty</label>
                <p className="mt-1">
                  <Badge variant={vocabulary.difficulty === 'beginner' ? 'success' : 
                              vocabulary.difficulty === 'intermediate' ? 'warning' : 'danger'}>
                    {vocabulary.difficulty}
                  </Badge>
                </p>
              </div>
            </Card.Content>
          </Card>

          {/* Definition and Examples */}
          <Card>
            <Card.Header>
              <Card.Title>Definition & Examples</Card.Title>
            </Card.Header>
            <Card.Content className="space-y-4">
              {vocabulary.definition && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Definition</label>
                  <p className="mt-1">{vocabulary.definition}</p>
                </div>
              )}

              {vocabulary.example_sentence && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Example Sentence</label>
                  <p className="mt-1 italic">"{vocabulary.example_sentence}"</p>
                  {vocabulary.example_translation && (
                    <p className="mt-1 text-sm text-gray-600">
                      Translation: "{vocabulary.example_translation}"
                    </p>
                  )}
                </div>
              )}

              {vocabulary.notes && (
                <div>
                  <label className="text-sm font-medium text-gray-700">Notes</label>
                  <p className="mt-1">{vocabulary.notes}</p>
                </div>
              )}
            </Card.Content>
          </Card>
        </div>
      )}

      {/* Tags and Media */}
      {vocabulary && (vocabulary.tags?.length || vocabulary.image_url) && (
        <Card>
          <Card.Header>
            <Card.Title>Additional Information</Card.Title>
          </Card.Header>
          <Card.Content className="space-y-4">
            {vocabulary.tags && vocabulary.tags.length > 0 && (
              <div>
                <label className="text-sm font-medium text-gray-700">Tags</label>
                <div className="mt-2 flex flex-wrap gap-2">
                  {vocabulary.tags.map((tag, index) => (
                    <Badge key={index} variant="secondary">{tag}</Badge>
                  ))}
                </div>
              </div>
            )}

            {vocabulary.image_url && (
              <div>
                <label className="text-sm font-medium text-gray-700">Image</label>
                <div className="mt-2">
                  <img
                    src={vocabulary.image_url}
                    alt={vocabulary.word}
                    className="max-w-xs rounded-lg shadow-md"
                  />
                </div>
              </div>
            )}
          </Card.Content>
        </Card>
      )}

      {/* Metadata */}
      {vocabulary && (
        <Card>
          <Card.Header>
            <Card.Title>Metadata</Card.Title>
          </Card.Header>
          <Card.Content>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
              <div>
                <label className="text-sm font-medium text-gray-700">Created</label>
                <p className="mt-1">{new Date(vocabulary.created_at).toLocaleDateString()}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Last Updated</label>
                <p className="mt-1">{new Date(vocabulary.updated_at).toLocaleDateString()}</p>
              </div>
            </div>
          </Card.Content>
        </Card>
      )}
    </div>
  );
}

================
File: src/app/vocabulary/groups/[id]/edit/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft, Save } from 'lucide-react';
import { VocabularyGroup } from '@/types/database';
import { 
  Button, Card 
} from '@/components/ui';
import { VocabularyGroupForm } from '@/components/vocabulary';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function EditVocabularyGroupPage() {
  const params = useParams();
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [group, setGroup] = useState<VocabularyGroup | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  const groupId = params.id as string;

  useEffect(() => {
    if (groupId) {
      loadGroup();
    }
  }, [groupId]);

  const loadGroup = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vocabulary_groups')
        .select('*')
        .eq('id', groupId)
        .single();

      if (error) throw error;
      setGroup(data);
    } catch (error) {
      console.error('Failed to load vocabulary group:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async (formData: Omit<VocabularyGroup, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      setSaving(true);
      const { error } = await supabase
        .from('vocabulary_groups')
        .update(formData)
        .eq('id', groupId);

      if (error) throw error;
      router.push(`/vocabulary/groups/${groupId}`);
    } catch (error) {
      console.error('Failed to update vocabulary group:', error);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="p-6">
        <div className="text-center">
          <p>Loading...</p>
        </div>
      </div>
    );
  }

  if (!group) {
    return (
      <div className="p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Vocabulary Group Not Found</h1>
          <p className="mt-2 text-gray-600">The vocabulary group you're trying to edit doesn't exist.</p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary/groups')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back to Groups
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push(`/vocabulary/groups/${groupId}`)}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Edit Vocabulary Group</h1>
            <p className="mt-1 text-sm text-gray-600">
              Update the details of "{group.name}"
            </p>
          </div>
        </div>
      </div>

      {/* Form */}
      <Card>
        <Card.Content className="p-6">
          <VocabularyGroupForm
            initialData={group}
            onSave={handleSave}
            isLoading={saving}
            onCancel={() => router.push(`/vocabulary/groups/${groupId}`)}
          />
        </Card.Content>
      </Card>
    </div>
  );
}

================
File: src/app/vocabulary/groups/[id]/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ArrowLeft, Edit, Plus, Trash2, Search, BookOpen } from 'lucide-react';
import { VocabularyGroup, Vocabulary, Book } from '@/types/database';
import { 
  Button, Card, Badge, Table, Spinner, Modal, Input 
} from '@/components/ui';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export default function VocabularyGroupDetailPage() {
  const params = useParams();
  const router = useRouter();
  const supabase = createClientComponentClient();
  const [group, setGroup] = useState<VocabularyGroup | null>(null);
  const [vocabulary, setVocabulary] = useState<Vocabulary[]>([]);
  const [relatedBooks, setRelatedBooks] = useState<Book[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);

  const groupId = params.id as string;

  useEffect(() => {
    if (groupId) {
      loadGroup();
      loadVocabulary();
      loadRelatedBooks();
    }
  }, [groupId]);

  const loadGroup = async () => {
    try {
      const { data, error } = await supabase
        .from('vocabulary_groups')
        .select('*')
        .eq('id', groupId)
        .single();

      if (error) throw error;
      setGroup(data);
    } catch (error) {
      console.error('Failed to load vocabulary group:', error);
    }
  };

  const loadVocabulary = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('vocabulary_group_items')
        .select(`
          *,
          vocabulary:vocabulary(*)
        `)
        .eq('vocabulary_group_id', groupId)
        .order('position');

      if (error) throw error;
      setVocabulary(data?.map(item => item.vocabulary).filter(Boolean) || []);
    } catch (error) {
      console.error('Failed to load vocabulary:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadRelatedBooks = async () => {
    try {
      const { data, error } = await supabase
        .from('vocabulary_group_books')
        .select(`
          book:books(
            id,
            title,
            author,
            cover_image_url,
            publication_year
          )
        `)
        .eq('vocabulary_group_id', groupId)
        .order('position');

      if (error) throw error;
      
      const books = data
        ?.map((item: any) => item.book)
        .filter(Boolean) as Book[] || [];
      
      setRelatedBooks(books);
    } catch (error) {
      console.error('Failed to load related books:', error);
    }
  };

  const handleDelete = async () => {
    if (!group || !confirm('Are you sure you want to delete this vocabulary group?')) return;

    try {
      const { error } = await supabase
        .from('vocabulary_groups')
        .delete()
        .eq('id', group.id);

      if (error) throw error;
      router.push('/vocabulary/groups');
    } catch (error) {
      console.error('Failed to delete vocabulary group:', error);
    }
  };

  const handleRemoveWord = async (vocabularyId: string) => {
    if (!confirm('Are you sure you want to remove this word from the group?')) return;

    try {
      const { error } = await supabase
        .from('vocabulary_group_items')
        .delete()
        .eq('vocabulary_group_id', groupId)
        .eq('vocabulary_id', vocabularyId);

      if (error) throw error;
      loadVocabulary(); // Reload the vocabulary list
    } catch (error) {
      console.error('Failed to remove word from group:', error);
    }
  };

  if (!group && !loading) {
    return (
      <div className="p-6">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900">Vocabulary Group Not Found</h1>
          <p className="mt-2 text-gray-600">The vocabulary group you're looking for doesn't exist.</p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary/groups')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back to Groups
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => router.push('/vocabulary/groups')}
            leftIcon={<ArrowLeft className="h-4 w-4" />}
          >
            Back
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{group?.name || 'Loading...'}</h1>
            {group?.description && (
              <p className="mt-1 text-sm text-gray-600">{group.description}</p>
            )}
          </div>
        </div>
        <div className="flex space-x-2">
          <Button
            variant="outline"
            onClick={() => router.push(`/vocabulary/groups/${groupId}/edit`)}
            leftIcon={<Edit className="h-4 w-4" />}
          >
            Edit
          </Button>
          <Button
            variant="outline"
            onClick={handleDelete}
            leftIcon={<Trash2 className="h-4 w-4" />}
          >
            Delete
          </Button>
        </div>
      </div>

      {/* Group Details */}
      {group && (
        <Card>
          <Card.Header>
            <Card.Title>Group Information</Card.Title>
          </Card.Header>
          <Card.Content>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-gray-700">Language</label>
                <p className="mt-1">{group.language}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Target Language</label>
                <p className="mt-1">{group.target_language || 'Not specified'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Difficulty</label>
                <p className="mt-1">
                  <Badge variant={group.difficulty === 'beginner' ? 'success' : 
                              group.difficulty === 'intermediate' ? 'warning' : 'danger'}>
                    {group.difficulty}
                  </Badge>
                </p>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700">Vocabulary Count</label>
                <p className="mt-1">{vocabulary.length} words</p>
              </div>
            </div>
            {group.tags && group.tags.length > 0 && (
              <div className="mt-4">
                <label className="text-sm font-medium text-gray-700">Tags</label>
                <div className="mt-2 flex flex-wrap gap-2">
                  {group.tags.map((tag, index) => (
                    <Badge key={index} variant="secondary">{tag}</Badge>
                  ))}
                </div>
              </div>
            )}
            {relatedBooks.length > 0 && (
              <div className="mt-4">
                <label className="text-sm font-medium text-gray-700">Related Books ({relatedBooks.length})</label>
                <div className="mt-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {relatedBooks.map((book) => (
                    <div
                      key={book.id}
                      className="flex items-center space-x-3 p-3 border rounded-lg hover:shadow-md transition-shadow cursor-pointer"
                      onClick={() => router.push(`/books/${book.id}`)}
                    >
                      {book.cover_image_url ? (
                        <img
                          src={book.cover_image_url}
                          alt={book.title}
                          className="w-10 h-12 object-cover rounded"
                        />
                      ) : (
                        <div className="w-10 h-12 bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center">
                          <BookOpen className="h-4 w-4 text-gray-400" />
                        </div>
                      )}
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm line-clamp-1" title={book.title}>
                          {book.title}
                        </h4>
                        {book.author && (
                          <p className="text-xs text-gray-600 line-clamp-1" title={book.author}>
                            by {book.author}
                          </p>
                        )}
                        {book.publication_year && (
                          <p className="text-xs text-gray-500">{book.publication_year}</p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </Card.Content>
        </Card>
      )}

      {/* Vocabulary List */}
      <Card>
        <Card.Header>
          <div className="flex items-center justify-between">
            <Card.Title>Vocabulary Words ({vocabulary.length})</Card.Title>
            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowAddModal(true)}
                leftIcon={<Plus className="h-4 w-4" />}
              >
                Add Existing Word
              </Button>
              <Button
                size="sm"
                onClick={() => router.push(`/vocabulary/new?group_id=${groupId}`)}
                leftIcon={<Plus className="h-4 w-4" />}
              >
                Create New Word
              </Button>
            </div>
          </div>
        </Card.Header>
        <Card.Content>
          {loading ? (
            <div className="flex justify-center py-8">
              <Spinner size="lg" />
            </div>
          ) : vocabulary.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">No vocabulary words yet.</p>
              <div className="mt-4 flex justify-center space-x-2">
                <Button
                  variant="outline"
                  onClick={() => setShowAddModal(true)}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Add Existing Word
                </Button>
                <Button
                  onClick={() => router.push(`/vocabulary/new?group_id=${groupId}`)}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Create New Word
                </Button>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-2">
              {vocabulary.map((word) => (
                <div key={word.id} className="border rounded-lg p-2 hover:shadow-md transition-shadow group relative">
                  <div className="space-y-1">
                    <div className="flex items-start justify-between">
                      <h3 className="font-medium text-xs line-clamp-2 flex-1" title={word.word}>
                        {word.word}
                      </h3>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveWord(word.id)}
                        className="opacity-0 group-hover:opacity-100 transition-opacity h-4 w-4 p-0 text-red-600 hover:text-red-700 ml-1"
                        title="Remove from group"
                      >
                        ×
                      </Button>
                    </div>
                    
                    {word.translation && (
                      <p className="text-xs text-gray-600 line-clamp-1" title={word.translation}>
                        {word.translation}
                      </p>
                    )}
                    
                    <div className="flex items-center justify-between">
                      {word.part_of_speech && (
                        <Badge variant="secondary" className="text-xs px-1 py-0.5">
                          {word.part_of_speech.length > 3 ? word.part_of_speech.substring(0, 3) : word.part_of_speech}
                        </Badge>
                      )}
                      <Badge 
                        variant={word.difficulty === 'beginner' ? 'success' : 
                                word.difficulty === 'intermediate' ? 'warning' : 'danger'}
                        className="text-xs px-1 py-0.5"
                      >
                        {word.difficulty.charAt(0).toUpperCase()}
                      </Badge>
                    </div>
                    
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => router.push(`/vocabulary/${word.id}`)}
                      className="w-full h-6 text-xs opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      View
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </Card.Content>
      </Card>

      {/* Add Vocabulary Modal */}
      {showAddModal && (
        <AddVocabularyModal
          groupId={groupId}
          onClose={() => setShowAddModal(false)}
          onWordAdded={loadVocabulary}
        />
      )}
    </div>
  );
}

// Add Vocabulary Modal Component
function AddVocabularyModal({ 
  groupId, 
  onClose, 
  onWordAdded 
}: { 
  groupId: string;
  onClose: () => void;
  onWordAdded: () => void;
}) {
  const supabase = createClientComponentClient();
  const [availableWords, setAvailableWords] = useState<Vocabulary[]>([]);
  const [selectedWords, setSelectedWords] = useState<string[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [adding, setAdding] = useState(false);

  useEffect(() => {
    loadAvailableWords();
  }, [searchTerm]);

  const loadAvailableWords = async () => {
    try {
      setLoading(true);
      
      // Get words that are not already in the group
      const { data: existingItems } = await supabase
        .from('vocabulary_group_items')
        .select('vocabulary_id')
        .eq('vocabulary_group_id', groupId);

      const existingWordIds = existingItems?.map(item => item.vocabulary_id) || [];

      let query = supabase
        .from('vocabulary')
        .select('*')
        .order('word');

      if (searchTerm) {
        query = query.ilike('word', `%${searchTerm}%`);
      }

      if (existingWordIds.length > 0) {
        query = query.not('id', 'in', `(${existingWordIds.join(',')})`);
      }

      const { data, error } = await query.limit(50);

      if (error) throw error;
      setAvailableWords(data || []);
    } catch (error) {
      console.error('Failed to load available words:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleWordToggle = (wordId: string) => {
    setSelectedWords(prev => 
      prev.includes(wordId) 
        ? prev.filter(id => id !== wordId)
        : [...prev, wordId]
    );
  };

  const handleAddWords = async () => {
    if (selectedWords.length === 0) return;

    try {
      setAdding(true);
      
      const items = selectedWords.map((vocabularyId, index) => ({
        vocabulary_group_id: groupId,
        vocabulary_id: vocabularyId,
        position: index
      }));

      const { error } = await supabase
        .from('vocabulary_group_items')
        .insert(items);

      if (error) throw error;
      
      onWordAdded();
      onClose();
    } catch (error) {
      console.error('Failed to add words to group:', error);
    } finally {
      setAdding(false);
    }
  };

  return (
    <Modal isOpen onClose={onClose} title="Add Vocabulary Words">
      <div className="space-y-4">
        {/* Search */}
        <Input
          placeholder="Search vocabulary words..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        {/* Available Words */}
        <div className="max-h-96 overflow-y-auto">
          {loading ? (
            <div className="flex justify-center py-8">
              <Spinner />
            </div>
          ) : availableWords.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">
                {searchTerm ? 'No words found matching your search.' : 'No available words to add.'}
              </p>
            </div>
          ) : (
            <div className="space-y-2">
              {availableWords.map((word) => (
                <div
                  key={word.id}
                  className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                    selectedWords.includes(word.id)
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => handleWordToggle(word.id)}
                >
                  <div className="flex items-start justify-between">
                    <div>
                      <h4 className="font-medium">{word.word}</h4>
                      {word.translation && (
                        <p className="text-sm text-gray-600">{word.translation}</p>
                      )}
                      <div className="flex items-center space-x-2 mt-1">
                        {word.part_of_speech && (
                          <Badge variant="secondary" className="text-xs">
                            {word.part_of_speech}
                          </Badge>
                        )}
                        <Badge 
                          variant={word.difficulty === 'beginner' ? 'success' : 
                                  word.difficulty === 'intermediate' ? 'warning' : 'danger'}
                          className="text-xs"
                        >
                          {word.difficulty}
                        </Badge>
                      </div>
                    </div>
                    <input
                      type="checkbox"
                      checked={selectedWords.includes(word.id)}
                      onChange={() => handleWordToggle(word.id)}
                      className="rounded"
                    />
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex justify-between">
          <p className="text-sm text-gray-600">
            {selectedWords.length} word{selectedWords.length !== 1 ? 's' : ''} selected
          </p>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleAddWords}
              disabled={selectedWords.length === 0 || adding}
              loading={adding}
            >
              Add Selected Words
            </Button>
          </div>
        </div>
      </div>
    </Modal>
  );
}

================
File: src/app/vocabulary/groups/new/page.tsx
================
import { VocabularyGroupForm } from '@/components/vocabulary';

export default function NewVocabularyGroupPage() {
  return <VocabularyGroupForm />;
}

================
File: src/app/vocabulary/groups/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import {
  Plus, Search, Users, BookOpen, Globe, Lock,
  Grid, List, Filter // Changed from Filter2 to Filter
} from 'lucide-react';
import { VocabularyGroup, DifficultyLevel } from '@/types/database';
import { vocabularyService, VocabularyGroupFilters } from '@/lib/supabase/vocabulary';
import { categoryService } from '@/lib/supabase/categories';
import {
  Button, Card, Badge, SearchBox, FilterPanel, Spinner, Select
} from '@/components/ui';
import { cn } from '@/lib/utils';

const difficultyColors: Record<DifficultyLevel, string> = {
  beginner: 'success',
  intermediate: 'warning',
  advanced: 'danger',
  expert: 'primary',
};

export default function VocabularyGroupsPage() {
  const router = useRouter();
  const [groups, setGroups] = useState<(VocabularyGroup & { vocabulary_count: number })[]>([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState<VocabularyGroupFilters>({});
  const [stats, setStats] = useState({
    vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
    groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
  });
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [languages, setLanguages] = useState<string[]>([]);
  const [categories, setCategories] = useState<any[]>([]);
  // Add state to control the visibility of the filter panel
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false); // NEW STATE

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    loadGroups();
  }, [filters]);

  const loadInitialData = async () => {
    try {
      const [statsData, languagesData, categoriesData] = await Promise.all([
        vocabularyService.getVocabularyStats(),
        vocabularyService.getLanguages(),
        categoryService.getCategories({ type: 'vocabulary' }),
      ]);

      setStats(statsData);
      setLanguages(languagesData);
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load initial data:', error);
    }
  };

  const loadGroups = async () => {
    try {
      setLoading(true);
      const data = await vocabularyService.getVocabularyGroups(filters);
      setGroups(data);
    } catch (error) {
      console.error('Failed to load vocabulary groups:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (search: string) => {
    setFilters({ ...filters, search });
  };

  const handleFilterChange = (filterId: string, value: any) => {
    setFilters({ ...filters, [filterId]: value });
  };

  const difficultyLevels = vocabularyService.getDifficultyLevels();

  const filterGroups = [
    {
      id: 'difficulty',
      label: 'Difficulty',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Levels' },
        ...difficultyLevels.map(level => ({ value: level.value, label: level.label })),
      ],
    },
    {
      id: 'language',
      label: 'Language',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Languages' },
        ...languages.map(lang => ({ value: lang, label: lang.toUpperCase() })),
      ],
    },
    {
      id: 'categoryId',
      label: 'Category',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Categories' },
        ...categories.map(cat => ({ value: cat.id, label: cat.name })),
      ],
    },
  ];

  return (
    <div className="space-y-6 p-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Vocabulary Groups</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Organize your vocabulary into themed groups
          </p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded",
                viewMode === 'grid'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <Grid className="h-4 w-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded",
                viewMode === 'list'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <List className="h-4 w-4" />
            </button>
          </div>
          <Button
            onClick={() => router.push('/vocabulary')}
            variant="outline"
            leftIcon={<BookOpen className="h-4 w-4" />}
          >
            Words
          </Button>
          <Button
            onClick={() => router.push('/vocabulary/groups/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            New Group
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Groups</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {stats.groups.total}
              </p>
            </div>
            <Users className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Words</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {stats.vocabulary.total}
              </p>
            </div>
            <BookOpen className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        {difficultyLevels.slice(0, 4).map((level) => (
          <Card key={level.value} className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400 capitalize">
                  {level.label}
                </p>
                <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                  {stats.groups[level.value] || 0}
                </p>
              </div>
              <div className={`w-3 h-3 rounded-full bg-${level.color}-500`}></div>
            </div>
          </Card>
        ))}
      </div>

      {/* Search and Filters - MODIFIED SECTION */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <SearchBox
              placeholder="Search by group name or description..."
              onSearch={handleSearch}
              fullWidth
            />
          </div>
          <Button
            variant="outline"
            onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
            leftIcon={<Filter className="h-4 w-4" />}
          >
            Filters
          </Button>
        </div>

        {isFilterPanelOpen && (
          <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
            <FilterPanel
              filters={filterGroups}
              values={filters}
              onChange={handleFilterChange}
              onReset={() => setFilters({})}
              collapsible={false}
              // className="h-full" // Removed this className
            />
          </div>
        )}
      </div>

      {/* Groups Display */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : groups.length === 0 ? (
        <Card className="p-12 text-center">
          <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No groups found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Start organizing your vocabulary by creating your first group.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary/groups/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create Group
          </Button>
        </Card>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {groups.map((group) => {
            const relatedBooks = group.vocabulary_group_books?.map(vgb => vgb.book).filter(Boolean) || [];
            return (
              <Card
                key={group.id}
                className="hover:shadow-lg transition-shadow cursor-pointer overflow-hidden"
                onClick={() => router.push(`/vocabulary/groups/${group.id}`)}
              >
                <Card.Content className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">
                        {group.name}
                      </h3>
                      <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                        {group.vocabulary_count} words
                      </p>
                    </div>
                    <div className="flex items-center gap-1 ml-2">
                      {group.is_public ? (
                        <Globe className="h-4 w-4 text-green-500" />
                      ) : (
                        <Lock className="h-4 w-4 text-gray-400" />
                      )}
                    </div>
                  </div>

                  {group.description && (
                    <p className="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2">
                      {group.description}
                    </p>
                  )}

                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <Badge
                        variant={difficultyColors[group.difficulty] as any}
                        size="sm"
                      >
                        {group.difficulty}
                      </Badge>
                      <Badge variant="warning" size="sm">
                        {group.language.toUpperCase()}
                      </Badge>
                    </div>
                  </div>

                  {group.target_language && (
                    <p className="text-xs text-gray-500 dark:text-gray-400 mb-2">
                      Target: {group.target_language.toUpperCase()}
                    </p>
                  )}

                  {relatedBooks.length > 0 && (
                    <div className="mb-3">
                      <p className="text-xs text-gray-500 mb-1">Related Books ({relatedBooks.length})</p>
                      <div className="flex flex-wrap gap-1">
                        {relatedBooks.slice(0, 2).map((book) => book && (
                          <Badge
                            key={book.id}
                            variant="outline"
                            className="text-xs px-1 py-0.5"
                            title={book.title}
                          >
                            {book.title.length > 15 ? `${book.title.substring(0, 15)}...` : book.title}
                          </Badge>
                        ))}
                        {relatedBooks.length > 2 && (
                          <Badge variant="outline" className="text-xs px-1 py-0.5">
                            +{relatedBooks.length - 2}
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}

                  {group.category && (
                    <div className="mb-3">
                      <span
                        className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                        style={{
                          backgroundColor: group.category.color ? `${group.category.color}20` : undefined,
                          color: group.category.color || undefined,
                        }}
                      >
                        {group.category.name}
                      </span>
                    </div>
                  )}

                  {group.tags && group.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {group.tags.slice(0, 2).map((tag) => (
                        <span
                          key={tag}
                          className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                        >
                          {tag}
                        </span>
                      ))}
                      {group.tags.length > 2 && (
                        <span className="text-xs text-gray-500">
                          +{group.tags.length - 2}
                        </span>
                      )}
                    </div>
                  )}
                </Card.Content>
              </Card>
            );
          })}
        </div>
      ) : (
        <div className="space-y-4">
          {groups.map((group) => {
            const relatedBooks = group.vocabulary_group_books?.map(vgb => vgb.book).filter(Boolean) || [];
            return (
              <Card
                key={group.id}
                className="hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => router.push(`/vocabulary/groups/${group.id}`)}
              >
                <Card.Content className="p-4">
                  <div className="flex items-start gap-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-800 dark:to-blue-900 rounded-lg flex items-center justify-center">
                      <Users className="h-8 w-8 text-blue-600 dark:text-blue-400" />
                    </div>

                    <div className="flex-1">
                      <div className="flex items-start justify-between">
                        <div>
                          <div className="flex items-center gap-2 mb-1">
                            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                              {group.name}
                            </h3>
                            {group.is_public ? (
                              <Globe className="h-4 w-4 text-green-500" />
                            ) : (
                              <Lock className="h-4 w-4 text-gray-400" />
                            )}
                          </div>
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                            {group.vocabulary_count} words
                          </p>
                        </div>

                        <div className="flex items-center gap-2">
                          <Badge
                            variant={difficultyColors[group.difficulty] as any}
                            size="sm"
                          >
                            {group.difficulty}
                          </Badge>
                          <Badge variant="warning" size="sm">
                            {group.language.toUpperCase()}
                          </Badge>
                          {group.target_language && (
                            <Badge variant="warning" size="sm">
                              → {group.target_language.toUpperCase()}
                            </Badge>
                          )}
                        </div>
                      </div>

                      {group.description && (
                        <p className="text-sm text-gray-700 dark:text-gray-300 mb-2 line-clamp-2">
                          {group.description}
                        </p>
                      )}

                      {relatedBooks.length > 0 && (
                        <div className="mb-2">
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                            Related Books ({relatedBooks.length})
                          </p>
                          <div className="flex flex-wrap gap-1">
                            {relatedBooks.slice(0, 4).map((book) => book && (
                              <Badge
                                key={book.id}
                                variant="outline"
                                className="text-xs"
                                title={book.title}
                              >
                                {book.title}
                              </Badge>
                            ))}
                            {relatedBooks.length > 4 && (
                              <Badge variant="outline" className="text-xs">
                                +{relatedBooks.length - 4} more
                              </Badge>
                            )}
                          </div>
                        </div>
                      )}

                      <div className="flex items-center gap-2">
                        {group.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: group.category.color ? `${group.category.color}20` : undefined,
                              color: group.category.color || undefined,
                            }}
                          >
                            {group.category.name}
                          </span>
                        )}
                        {group.tags && group.tags.length > 0 && (
                          <>
                            {group.tags.slice(0, 3).map((tag) => (
                              <span
                                key={tag}
                                className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                              >
                                {tag}
                              </span>
                            ))}
                            {group.tags.length > 3 && (
                              <span className="text-xs text-gray-500">
                                +{group.tags.length - 3}
                              </span>
                            )}
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </Card.Content>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}

================
File: src/app/vocabulary/individual/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import {
  Plus, Search, BookOpen, Volume2, Image as ImageIcon,
  Grid, List, Users, Filter // Import Filter icon
} from 'lucide-react';
import { Vocabulary, DifficultyLevel } from '@/types/database';
import { vocabularyService, VocabularyFilters } from '@/lib/supabase/vocabulary';
import {
  Button, Card, Badge, SearchBox, FilterPanel, Spinner, Select
} from '@/components/ui';
import { cn } from '@/lib/utils';

const difficultyColors: Record<DifficultyLevel, string> = {
  beginner: 'success',
  intermediate: 'warning',
  advanced: 'danger',
  expert: 'primary',
};

export default function IndividualVocabularyPage() {
  const router = useRouter();
  const [vocabulary, setVocabulary] = useState<Vocabulary[]>([]);
  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(true);
  const [filters, setFilters] = useState<VocabularyFilters>({});
  const [stats, setStats] = useState({
    vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
    groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
  });
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [partsOfSpeech, setPartsOfSpeech] = useState<string[]>([]);
  // Add state to control the visibility of the filter panel
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false); // New state

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    loadVocabulary();
  }, [filters]);

  const loadInitialData = async () => {
    try {
      setStatsLoading(true);
      console.log('Loading vocabulary stats...');
      const [statsData, partsData] = await Promise.all([
        vocabularyService.getVocabularyStats(),
        vocabularyService.getPartsOfSpeech(),
      ]);

      console.log('Stats data received:', statsData);
      console.log('Parts of speech data received:', partsData);
      
      setStats(statsData);
      setPartsOfSpeech(partsData);
    } catch (error) {
      console.error('Failed to load initial data:', error);
      // Set default empty stats if there's an error
      setStats({
        vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
        groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
      });
      setPartsOfSpeech([]);
    } finally {
      setStatsLoading(false);
    }
  };

  const loadVocabulary = async () => {
    try {
      setLoading(true);
      const data = await vocabularyService.getVocabulary(filters);
      setVocabulary(data);
    } catch (error) {
      console.error('Failed to load vocabulary:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (search: string) => {
    setFilters({ ...filters, search });
  };

  const handleFilterChange = (filterId: string, value: any) => {
    setFilters({ ...filters, [filterId]: value });
  };

  const difficultyLevels = vocabularyService.getDifficultyLevels();

  const filterGroups = [
    {
      id: 'difficulty',
      label: 'Difficulty',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Levels' },
        ...difficultyLevels.map(level => ({ value: level.value, label: level.label })),
      ],
    },
    {
      id: 'partOfSpeech',
      label: 'Part of Speech',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Parts' },
        ...partsOfSpeech.map(pos => ({ value: pos, label: pos.charAt(0).toUpperCase() + pos.slice(1) })),
      ],
    },
  ];

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Individual Vocabulary</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Manage individual vocabulary words
          </p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded",
                viewMode === 'grid'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <Grid className="h-4 w-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded",
                viewMode === 'list'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <List className="h-4 w-4" />
            </button>
          </div>
          <Button
            onClick={() => router.push('/vocabulary')}
            variant="outline"
            leftIcon={<Users className="h-4 w-4" />}
          >
            Groups
          </Button>
          <Button
            onClick={() => router.push('/vocabulary/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Word
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Words</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {statsLoading ? <Spinner size="sm" /> : stats.vocabulary.total}
              </p>
            </div>
            <BookOpen className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Groups</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {statsLoading ? <Spinner size="sm" /> : stats.groups.total}
              </p>
            </div>
            <Users className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        {difficultyLevels.slice(0, 4).map((level) => (
          <Card key={level.value} className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400 capitalize">
                  {level.label}
                </p>
                <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                  {statsLoading ? <Spinner size="sm" /> : (stats.vocabulary[level.value] || 0)}
                </p>
              </div>
              <div className={`w-3 h-3 rounded-full bg-${level.color}-500`}></div>
            </div>
          </Card>
        ))}
      </div>

      {/* Search and Filters */}
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <SearchBox
              placeholder="Search by word, translation, or definition..."
              onSearch={handleSearch}
              fullWidth
            />
          </div>
          <Button
            variant="outline"
            onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
            leftIcon={<Filter className="h-4 w-4" />}
          >
            Filters
          </Button>
        </div>

        {isFilterPanelOpen && (
          <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
            <FilterPanel
              filters={filterGroups}
              values={filters}
              onChange={handleFilterChange}
              onReset={() => setFilters({})}
              collapsible={false}
            />
          </div>
        )}
      </div>

      {/* Vocabulary Display */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : vocabulary.length === 0 ? (
        <Card className="p-12 text-center">
          <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No vocabulary found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Start building your vocabulary by adding your first word.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Word
          </Button>
        </Card>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {vocabulary.map((word) => (
            <Card
              key={word.id}
              className="hover:shadow-lg transition-shadow cursor-pointer overflow-hidden"
              onClick={() => router.push(`/vocabulary/${word.id}`)}
            >
              <Card.Content className="p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">
                      {word.word}
                    </h3>
                    {word.pronunciation && (
                      <p className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                        {word.pronunciation}
                      </p>
                    )}
                  </div>
                  <div className="flex items-center gap-1 ml-2">
                    {word.audio_url && <Volume2 className="h-4 w-4 text-gray-400" />}
                    {word.image_url && <ImageIcon className="h-4 w-4 text-gray-400" />}
                  </div>
                </div>

                {word.translation && (
                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                    {word.translation}
                  </p>
                )}

                {word.definition && (
                  <p className="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2">
                    {word.definition}
                  </p>
                )}

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Badge
                      variant={difficultyColors[word.difficulty] as any}
                      size="sm"
                    >
                      {word.difficulty}
                    </Badge>
                    {word.part_of_speech && (
                      <Badge variant="warning" size="sm">
                        {word.part_of_speech}
                      </Badge>
                    )}
                  </div>
                </div>

                {word.tags && word.tags.length > 0 && (
                  <div className="mt-3 flex flex-wrap gap-1">
                    {word.tags.slice(0, 2).map((tag) => (
                      <span
                        key={tag}
                        className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                      >
                        {tag}
                      </span>
                    ))}
                    {word.tags.length > 2 && (
                      <span className="text-xs text-gray-500">
                        +{word.tags.length - 2}
                      </span>
                    )}
                  </div>
                )}
              </Card.Content>
            </Card>
          ))}
        </div>
      ) : (
        <div className="space-y-4">
          {vocabulary.map((word) => (
            <Card
              key={word.id}
              className="hover:shadow-md transition-shadow cursor-pointer"
              onClick={() => router.push(`/vocabulary/${word.id}`)}
            >
              <Card.Content className="p-4">
                <div className="flex items-start gap-4">
                  {word.image_url ? (
                    <img
                      src={word.image_url}
                      alt={word.word}
                      className="w-20 h-20 object-cover rounded"
                    />
                  ) : (
                    <div className="w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center">
                      <BookOpen className="h-8 w-8 text-gray-400" />
                    </div>
                  )}

                  <div className="flex-1">
                    <div className="flex items-start justify-between">
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                            {word.word}
                          </h3>
                          {word.audio_url && (
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                const audio = new Audio(word.audio_url);
                                audio.play().catch(console.error);
                              }}
                              className="text-gray-400 hover:text-gray-600"
                            >
                              <Volume2 className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                        {word.pronunciation && (
                          <p className="text-sm text-gray-500 dark:text-gray-400 mb-1">
                            {word.pronunciation}
                          </p>
                        )}
                        {word.translation && (
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                            {word.translation}
                          </p>
                        )}
                      </div>

                      <div className="flex items-center gap-2">
                        <Badge
                          variant={difficultyColors[word.difficulty] as any}
                          size="sm"
                        >
                          {word.difficulty}
                        </Badge>
                        {word.part_of_speech && (
                          <Badge variant="warning" size="sm">
                            {word.part_of_speech}
                          </Badge>
                        )}
                      </div>
                    </div>

                    {word.definition && (
                      <p className="text-sm text-gray-700 dark:text-gray-300 mb-2 line-clamp-2">
                        {word.definition}
                      </p>
                    )}

                    {word.example_sentence && (
                      <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                        <span className="font-medium">Example:</span> {word.example_sentence}
                      </div>
                    )}

                    {word.tags && word.tags.length > 0 && (
                      <div className="flex items-center gap-2">
                        {word.tags.slice(0, 4).map((tag) => (
                          <span
                            key={tag}
                            className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                          >
                            {tag}
                          </span>
                        ))}
                        {word.tags.length > 4 && (
                          <span className="text-xs text-gray-500">
                            +{word.tags.length - 4}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </Card.Content>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/app/vocabulary/layout.tsx
================
import { AuthGuard } from '@/components/auth';
import { DashboardLayout } from '@/components/layout/DashboardLayout';

export default function VocabularyLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <AuthGuard>
      {/* <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        {children}
      </div> */}
      <DashboardLayout>{children}</DashboardLayout>
    </AuthGuard>
  );
}

================
File: src/app/vocabulary/new/page.tsx
================
import { VocabularyForm } from '@/components/vocabulary';

export default function NewVocabularyPage() {
  return <VocabularyForm />;
}

================
File: src/app/vocabulary/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import {
  Plus, Search, BookOpen, Volume2, Image as ImageIcon,
  Grid, List, Users, Filter, Globe, Lock // Import Filter, Globe, and Lock icons
} from 'lucide-react';
import { Vocabulary, VocabularyGroup, DifficultyLevel } from '@/types/database';
import { vocabularyService, VocabularyFilters, VocabularyGroupFilters } from '@/lib/supabase/vocabulary';
import {
  Button, Card, Badge, SearchBox, FilterPanel, Spinner, Select
} from '@/components/ui';
import { cn } from '@/lib/utils';

const difficultyColors: Record<DifficultyLevel, string> = {
  beginner: 'success',
  intermediate: 'warning',
  advanced: 'danger',
  expert: 'primary',
};

export default function VocabularyPage() {
  const router = useRouter();
  const [groups, setGroups] = useState<(VocabularyGroup & { vocabulary_count: number })[]>([]);
  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(true);
  const [filters, setFilters] = useState<VocabularyGroupFilters>({});
  const [stats, setStats] = useState({
    vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
    groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
  });
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [languages, setLanguages] = useState<string[]>([]);
  // Add state to control the visibility of the filter panel
  const [isFilterPanelOpen, setIsFilterPanelOpen] = useState(false); // New state

  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    loadGroups();
  }, [filters]);

  const loadInitialData = async () => {
    try {
      setStatsLoading(true);
      console.log('Loading vocabulary stats...');
      const [statsData, languagesData] = await Promise.all([
        vocabularyService.getVocabularyStats(),
        vocabularyService.getLanguages(),
      ]);

      console.log('Stats data received:', statsData);
      console.log('Languages data received:', languagesData);
      
      setStats(statsData);
      setLanguages(languagesData);
    } catch (error) {
      console.error('Failed to load initial data:', error);
      // Set default empty stats if there's an error
      setStats({
        vocabulary: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 },
        groups: { total: 0, beginner: 0, intermediate: 0, advanced: 0, expert: 0 }
      });
      setLanguages([]);
    } finally {
      setStatsLoading(false);
    }
  };

  const loadGroups = async () => {
    try {
      setLoading(true);
      const data = await vocabularyService.getVocabularyGroups(filters);
      setGroups(data);
    } catch (error) {
      console.error('Failed to load vocabulary groups:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (search: string) => {
    setFilters({ ...filters, search });
  };

  const handleFilterChange = (filterId: string, value: any) => {
    setFilters({ ...filters, [filterId]: value });
  };

  const difficultyLevels = vocabularyService.getDifficultyLevels();

  const filterGroups = [
    {
      id: 'difficulty',
      label: 'Difficulty',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Levels' },
        ...difficultyLevels.map(level => ({ value: level.value, label: level.label })),
      ],
    },
    {
      id: 'language',
      label: 'Language',
      type: 'select' as const,
      options: [
        { value: '', label: 'All Languages' },
        ...languages.map(lang => ({ value: lang, label: lang.charAt(0).toUpperCase() + lang.slice(1) })),
      ],
    },
  ];

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">Vocabulary Groups</h1>
          <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
            Manage your vocabulary groups and collections
          </p>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded",
                viewMode === 'grid'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <Grid className="h-4 w-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded",
                viewMode === 'list'
                  ? "bg-white dark:bg-gray-700 shadow-sm"
                  : "text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
              )}
            >
              <List className="h-4 w-4" />
            </button>
          </div>
          <Button
            onClick={() => router.push('/vocabulary/individual')}
            variant="outline"
            leftIcon={<BookOpen className="h-4 w-4" />}
          >
            Individual Words
          </Button>
          <Button
            onClick={() => router.push('/vocabulary/groups/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create Group
          </Button>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Words</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {statsLoading ? <Spinner size="sm" /> : stats.vocabulary.total}
              </p>
            </div>
            <BookOpen className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Groups</p>
              <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                {statsLoading ? <Spinner size="sm" /> : stats.groups.total}
              </p>
            </div>
            <Users className="h-8 w-8 text-gray-400" />
          </div>
        </Card>

        {difficultyLevels.slice(0, 4).map((level) => (
          <Card key={level.value} className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400 capitalize">
                  {level.label}
                </p>
                <p className="mt-1 text-2xl font-semibold text-gray-900 dark:text-gray-100">
                  {statsLoading ? <Spinner size="sm" /> : (stats.vocabulary[level.value] || 0)}
                </p>
              </div>
              <div className={`w-3 h-3 rounded-full bg-${level.color}-500`}></div>
            </div>
          </Card>
        ))}
      </div>

      {/* Search and Filters - Modified section */}
      <div className="space-y-4"> {/* Changed from flex flex-col lg:flex-row gap-4 to space-y-4 */}
        <div className="flex flex-col sm:flex-row gap-4"> {/* Changed from flex-1 to flex-col sm:flex-row gap-4 */}
          <div className="flex-1">
            <SearchBox
              placeholder="Search groups by name or description..."
              onSearch={handleSearch}
              fullWidth
            />
          </div>
          {/* Add a button to toggle the filter panel */}
          <Button
            variant="outline"
            onClick={() => setIsFilterPanelOpen(!isFilterPanelOpen)}
            leftIcon={<Filter className="h-4 w-4" />}
          >
            Filters
          </Button>
        </div>

        {/* Conditionally render the FilterPanel */}
        {isFilterPanelOpen && (
          <div className="p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
            <FilterPanel
              filters={filterGroups}
              values={filters}
              onChange={handleFilterChange}
              onReset={() => setFilters({})}
              collapsible={false}
              // className="h-full" // Removed this className as it might conflict with conditional rendering
            />
          </div>
        )}
      </div>


      {/* Groups Display */}
      {loading ? (
        <div className="flex justify-center py-12">
          <Spinner size="lg" />
        </div>
      ) : groups.length === 0 ? (
        <Card className="p-12 text-center">
          <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">No vocabulary groups found</h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Start organizing your vocabulary by creating your first group.
          </p>
          <Button
            className="mt-4"
            onClick={() => router.push('/vocabulary/groups/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create Group
          </Button>
        </Card>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {groups.map((group) => (
            <Card
              key={group.id}
              className="hover:shadow-lg transition-shadow cursor-pointer overflow-hidden"
              onClick={() => router.push(`/vocabulary/groups/${group.id}`)}
            >
              <Card.Content className="p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1">
                      {group.name}
                    </h3>
                    <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                      <span>{group.vocabulary_count || 0} words</span>
                      {group.language && (
                        <>
                          <span>•</span>
                          <span>{group.language}</span>
                        </>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-1 ml-2">
                    {group.is_public ? <Globe className="h-4 w-4 text-green-500" /> : <Lock className="h-4 w-4 text-gray-400" />}
                  </div>
                </div>

                {group.description && (
                  <p className="text-sm text-gray-700 dark:text-gray-300 mb-3 line-clamp-2">
                    {group.description}
                  </p>
                )}

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Badge
                      variant={difficultyColors[group.difficulty] as any}
                      size="sm"
                    >
                      {group.difficulty}
                    </Badge>
                    {group.target_language && group.target_language !== group.language && (
                      <Badge variant="info" size="sm">
                        → {group.target_language}
                      </Badge>
                    )}
                  </div>
                </div>

                {group.tags && group.tags.length > 0 && (
                  <div className="mt-3 flex flex-wrap gap-1">
                    {group.tags.slice(0, 2).map((tag) => (
                      <span
                        key={tag}
                        className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                      >
                        {tag}
                      </span>
                    ))}
                    {group.tags.length > 2 && (
                      <span className="text-xs text-gray-500">
                        +{group.tags.length - 2}
                      </span>
                    )}
                  </div>
                )}
              </Card.Content>
            </Card>
          ))}
        </div>
      ) : (
        <div className="space-y-4">
          {groups.map((group) => (
            <Card
              key={group.id}
              className="hover:shadow-md transition-shadow cursor-pointer"
              onClick={() => router.push(`/vocabulary/groups/${group.id}`)}
            >
              <Card.Content className="p-4">
                <div className="flex items-start gap-4">
                  <div className="w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded flex items-center justify-center">
                    <Users className="h-8 w-8 text-gray-400" />
                  </div>

                  <div className="flex-1">
                    <div className="flex items-start justify-between">
                      <div>
                        <div className="flex items-center gap-2 mb-1">
                          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
                            {group.name}
                          </h3>
                          {group.is_public ? (
                            <Globe className="h-4 w-4 text-green-500" />
                          ) : (
                            <Lock className="h-4 w-4 text-gray-400" />
                          )}
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mb-1">
                          <span>{group.vocabulary_count || 0} words</span>
                          {group.language && (
                            <>
                              <span>•</span>
                              <span>{group.language}</span>
                            </>
                          )}
                          {group.target_language && group.target_language !== group.language && (
                            <>
                              <span>→</span>
                              <span>{group.target_language}</span>
                            </>
                          )}
                        </div>
                      </div>

                      <div className="flex items-center gap-2">
                        <Badge
                          variant={difficultyColors[group.difficulty] as any}
                          size="sm"
                        >
                          {group.difficulty}
                        </Badge>
                      </div>
                    </div>

                    {group.description && (
                      <p className="text-sm text-gray-700 dark:text-gray-300 mb-2 line-clamp-2">
                        {group.description}
                      </p>
                    )}

                    {group.tags && group.tags.length > 0 && (
                      <div className="flex items-center gap-2">
                        {group.tags.slice(0, 4).map((tag) => (
                          <span
                            key={tag}
                            className="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
                          >
                            {tag}
                          </span>
                        ))}
                        {group.tags.length > 4 && (
                          <span className="text-xs text-gray-500">
                            +{group.tags.length - 4}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </Card.Content>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: src/components/auth/AuthGuard.tsx
================
'use client';

import { useAuth } from '@/contexts/AuthContext';
import { useRouter } from 'next/navigation';
import { useEffect } from 'react';

interface AuthGuardProps {
  children: React.ReactNode;
  requireAuth?: boolean;
  redirectTo?: string;
}

export function AuthGuard({ 
  children, 
  requireAuth = true, 
  redirectTo = '/auth' 
}: AuthGuardProps) {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading) {
      if (requireAuth && !user) {
        router.push(redirectTo);
      } else if (!requireAuth && user) {
        router.push('/dashboard');
      }
    }
  }, [user, loading, requireAuth, redirectTo, router]);

  // Show loading spinner while checking auth
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  // If we require auth but user is not logged in, show nothing (will redirect)
  if (requireAuth && !user) {
    return null;
  }

  // If we don't require auth but user is logged in, show nothing (will redirect)
  if (!requireAuth && user) {
    return null;
  }

  return <>{children}</>;
}

================
File: src/components/auth/index.ts
================
// Authentication components exports
export { AuthGuard } from './AuthGuard';
export { LoginForm } from './LoginForm';
export { UserProfile } from './UserProfile';

================
File: src/components/auth/LoginForm.tsx
================
'use client';

import { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';

interface LoginFormProps {
  onToggleMode: () => void;
  isSignUp?: boolean;
}

export function LoginForm({ onToggleMode, isSignUp = false }: LoginFormProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const { signIn, signUp } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    try {
      if (isSignUp) {
        if (password !== confirmPassword) {
          setError('Passwords do not match');
          return;
        }

        const { user, error } = await signUp(email, password, {
          data: {
            first_name: firstName,
            last_name: lastName,
            full_name: `${firstName} ${lastName}`.trim(),
          },
        });

        if (error) {
          setError(error.message);
        } else if (user) {
          // Success - user will be redirected by auth state change
        }
      } else {
        const { user, error } = await signIn(email, password);

        if (error) {
          setError(error.message);
        } else if (user) {
          // Success - user will be redirected by auth state change
        }
      }
    } catch (err) {
      setError('An unexpected error occurred');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold text-gray-900">
          {isSignUp ? 'Create Account' : 'Sign In'}
        </h2>
        <p className="text-gray-600 mt-2">
          {isSignUp 
            ? 'Join Course Builder to start creating amazing courses' 
            : 'Welcome back! Please sign in to your account'
          }
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        {isSignUp && (
          <div className="grid grid-cols-2 gap-4">
            <Input
              label="First Name"
              type="text"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              required
              placeholder="John"
            />
            <Input
              label="Last Name"
              type="text"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              required
              placeholder="Doe"
            />
          </div>
        )}

        <Input
          label="Email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          placeholder="john@example.com"
        />

        <Input
          label="Password"
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
          placeholder="••••••••"
        />

        {isSignUp && (
          <Input
            label="Confirm Password"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            placeholder="••••••••"
          />
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-md text-sm">
            {error}
          </div>
        )}

        <Button
          type="submit"
          className="w-full"
          loading={loading}
          disabled={loading}
        >
          {isSignUp ? 'Create Account' : 'Sign In'}
        </Button>

        <div className="text-center">
          <button
            type="button"
            onClick={onToggleMode}
            className="text-primary-600 hover:text-primary-700 text-sm font-medium"
          >
            {isSignUp 
              ? 'Already have an account? Sign in' 
              : "Don't have an account? Sign up"
            }
          </button>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/auth/UserProfile.tsx
================
'use client';

import { Fragment } from 'react';
import { Menu, Transition } from '@headlessui/react';
import { UserCircleIcon, ArrowRightOnRectangleIcon, Cog6ToothIcon } from '@heroicons/react/24/outline';
import { useAuth } from '@/contexts/AuthContext';
import { cn } from '@/lib/utils';

export function UserProfile() {
  const { user, signOut } = useAuth();

  if (!user) return null;

  const userDisplayName = user.user_metadata?.full_name || 
                          user.user_metadata?.first_name || 
                          user.email?.split('@')[0] || 
                          'User';

  const userInitials = userDisplayName
    .split(' ')
    .map((name: string) => name[0])
    .join('')
    .toUpperCase()
    .slice(0, 2);

  return (
    <Menu as="div" className="relative">
      <Menu.Button className="flex items-center space-x-3 text-sm rounded-full p-2 hover:bg-gray-100 transition-colors">
        {user.user_metadata?.avatar_url ? (
          <img
            className="h-8 w-8 rounded-full"
            src={user.user_metadata.avatar_url}
            alt={userDisplayName}
          />
        ) : (
          <div className="h-8 w-8 rounded-full bg-primary-600 flex items-center justify-center text-white text-xs font-medium">
            {userInitials}
          </div>
        )}
        <span className="hidden md:block text-gray-700 font-medium">
          {userDisplayName}
        </span>
      </Menu.Button>

      <Transition
        as={Fragment}
        enter="transition ease-out duration-100"
        enterFrom="transform opacity-0 scale-95"
        enterTo="transform opacity-100 scale-100"
        leave="transition ease-in duration-75"
        leaveFrom="transform opacity-100 scale-100"
        leaveTo="transform opacity-0 scale-95"
      >
        <Menu.Items className="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
          <div className="px-4 py-3 border-b border-gray-100">
            <p className="text-sm font-medium text-gray-900">{userDisplayName}</p>
            <p className="text-sm text-gray-500 truncate">{user.email}</p>
          </div>

          <div className="py-1">
            <Menu.Item>
              {({ active }) => (
                <button
                  className={cn(
                    'flex w-full items-center px-4 py-2 text-sm text-gray-700',
                    active && 'bg-gray-100'
                  )}
                >
                  <UserCircleIcon className="h-5 w-5 mr-3 text-gray-400" />
                  Profile Settings
                </button>
              )}
            </Menu.Item>

            <Menu.Item>
              {({ active }) => (
                <button
                  className={cn(
                    'flex w-full items-center px-4 py-2 text-sm text-gray-700',
                    active && 'bg-gray-100'
                  )}
                >
                  <Cog6ToothIcon className="h-5 w-5 mr-3 text-gray-400" />
                  Account Settings
                </button>
              )}
            </Menu.Item>

            <Menu.Item>
              {({ active }) => (
                <button
                  onClick={signOut}
                  className={cn(
                    'flex w-full items-center px-4 py-2 text-sm text-gray-700',
                    active && 'bg-gray-100'
                  )}
                >
                  <ArrowRightOnRectangleIcon className="h-5 w-5 mr-3 text-gray-400" />
                  Sign Out
                </button>
              )}
            </Menu.Item>
          </div>
        </Menu.Items>
      </Transition>
    </Menu>
  );
}

================
File: src/components/books/BookForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Save, X, Plus, BookOpen, Search } from 'lucide-react';
import { Book, Category, ContentType, VocabularyGroup } from '@/types/database';
import { bookService, CreateBookData, UpdateBookData } from '@/lib/supabase/books';
import { categoryService } from '@/lib/supabase/categories';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { 
  Button, Card, Input, Textarea, Select, Badge, Modal, Spinner 
} from '@/components/ui';

interface BookFormProps {
  initialData?: Book;
}

export function BookForm({ initialData }: BookFormProps) {
  const router = useRouter();
  const supabase = createClientComponentClient();
  const isEditing = !!initialData;
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);

  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');

  // Vocabulary group relationships
  const [availableVocabGroups, setAvailableVocabGroups] = useState<VocabularyGroup[]>([]);
  const [selectedVocabGroups, setSelectedVocabGroups] = useState<string[]>([]);
  const [showVocabModal, setShowVocabModal] = useState(false);
  const [vocabSearchTerm, setVocabSearchTerm] = useState('');

  const [formData, setFormData] = useState({
    title: initialData?.title || '',
    author: initialData?.author || '',
    description: initialData?.description || '',
    category_id: initialData?.category_id || '',
    content_type: initialData?.content_type || 'text' as ContentType,
    language: initialData?.language || 'en',
    tags: initialData?.tags || [],
    cover_image_url: initialData?.cover_image_url || '',
    publication_year: initialData?.publication_year || '',
    is_public: initialData?.is_public || false,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newTag, setNewTag] = useState('');

  useEffect(() => {
    loadCategories();
    loadAvailableVocabGroups();
    if (isEditing && initialData) {
      loadExistingVocabRelationships();
    }
  }, []);

  const loadAvailableVocabGroups = async () => {
    try {
      const { data, error } = await supabase
        .from('vocabulary_groups')
        .select('id, name, description, difficulty, language, target_language')
        .order('name');

      if (error) throw error;
      setAvailableVocabGroups(data as VocabularyGroup[] || []);
    } catch (error) {
      console.error('Failed to load vocabulary groups:', error);
    }
  };

  const loadExistingVocabRelationships = async () => {
    if (!initialData) return;

    try {
      const { data, error } = await supabase
        .from('vocabulary_group_books')
        .select('vocabulary_group_id')
        .eq('book_id', initialData.id);

      if (error) throw error;
      setSelectedVocabGroups(data?.map(r => r.vocabulary_group_id) || []);
    } catch (error) {
      console.error('Failed to load existing vocabulary group relationships:', error);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'book' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    if (formData.publication_year && isNaN(Number(formData.publication_year))) {
      newErrors.publication_year = 'Publication year must be a number';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;
    
    setLoading(true);
    try {
      const bookData = {
        ...formData,
        publication_year: formData.publication_year ? Number(formData.publication_year) : undefined,
      };
      
      let bookId: string;
      
      if (isEditing) {
        await bookService.updateBook({ id: initialData.id, ...bookData } as UpdateBookData);
        bookId = initialData.id;
      } else {
        const newBook = await bookService.createBook(bookData as CreateBookData);
        bookId = newBook.id;
      }

      // Save vocabulary group relationships
      await saveVocabGroupRelationships(bookId);
      
      router.push('/books');
      router.refresh(); // To reflect changes on the book list page
    } catch (error: any) {
      console.error('Failed to save book:', error);
      setErrors({ submit: error.message || 'Failed to save book. Please try again.' });
    } finally {
      setLoading(false);
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({ ...formData, tags: [...formData.tags, newTag.trim()] });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({ ...formData, tags: formData.tags.filter(t => t !== tag) });
  };

  const saveVocabGroupRelationships = async (bookId: string) => {
    try {
      // Remove existing relationships if editing
      if (isEditing) {
        await supabase
          .from('vocabulary_group_books')
          .delete()
          .eq('book_id', bookId);
      }

      // Add new relationships
      if (selectedVocabGroups.length > 0) {
        const groupItems = selectedVocabGroups.map((groupId, index) => ({
          vocabulary_group_id: groupId,
          book_id: bookId,
          position: index
        }));

        await supabase
          .from('vocabulary_group_books')
          .insert(groupItems);
      }
    } catch (error) {
      console.error('Failed to save vocabulary group relationships:', error);
      // Non-fatal error, continue
    }
  };

  const handleVocabGroupToggle = (groupId: string) => {
    setSelectedVocabGroups(prev => 
      prev.includes(groupId) 
        ? prev.filter(id => id !== groupId)
        : [...prev, groupId]
    );
  };

  const filteredVocabGroups = availableVocabGroups.filter(group =>
    group.name.toLowerCase().includes(vocabSearchTerm.toLowerCase()) ||
    (group.description && group.description.toLowerCase().includes(vocabSearchTerm.toLowerCase())) ||
    group.language.toLowerCase().includes(vocabSearchTerm.toLowerCase()) ||
    (group.target_language && group.target_language.toLowerCase().includes(vocabSearchTerm.toLowerCase()))
  );

  // Add this new handler function
  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'book', // This ensures it's a 'book' category
        color: newCategoryColor,
      });

      // Close the modal and reset its form fields
      setIsCategoryModalOpen(false);
      setNewCategoryName('');

      // Reload the category list and automatically select the new one
      await loadCategories();
      setFormData({ ...formData, category_id: newCategory.id });
      
    } catch (error) {
      console.error("Failed to create book category:", error);
      // You could set an error state here to show in the modal if you wish
    }
  };
  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={() => router.back()}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back
        </Button>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Book' : 'Create New Book'}
        </h1>
      </div>

      {errors.submit && (
        <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
          {errors.submit}
        </div>
      )}

      <div className="space-y-6">
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Basic Information</h2></Card.Header>
          <Card.Content className="space-y-4">
            <Input
              label="Book Title"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              error={errors.title}
              placeholder="Enter book title"
              required
            />
            <Input
              label="Author"
              value={formData.author}
              onChange={(e) => setFormData({ ...formData, author: e.target.value })}
              placeholder="Enter author's name"
            />
            <Textarea
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Detailed book description"
              rows={4}
            />
            <Input
              label="Cover Image URL"
              type="url"
              value={formData.cover_image_url}
              onChange={(e) => setFormData({ ...formData, cover_image_url: e.target.value })}
              placeholder="https://example.com/image.jpg"
            />
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Details & Categorization</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="md:col-span-1">
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Category
              </label>
              <div className="flex items-center gap-2">
                <Select
                  className="flex-grow"
                  value={formData.category_id}
                  onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
                  options={[
                    { value: '', label: 'Select category' },
                    ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                  ]}
                />
                <Button
                  type="button"
                  variant="outline"
                  size="md"
                  onClick={() => setIsCategoryModalOpen(true)}
                  className="flex-shrink-0 !h-10" // Using !h-10 to match the input height
                >
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>
              <Input
                label="Publication Year"
                type="number"
                value={formData.publication_year}
                onChange={(e) => setFormData({ ...formData, publication_year: e.target.value })}
                error={errors.publication_year}
                placeholder="e.g., 2023"
              />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
               <Select
                label="Content Type"
                value={formData.content_type}
                onChange={(e) => setFormData({ ...formData, content_type: e.target.value as ContentType })}
                options={bookService.getContentTypes()}
              />
              <Input
                label="Language"
                value={formData.language}
                onChange={(e) => setFormData({ ...formData, language: e.target.value })}
                placeholder="e.g., en"
              />
            </div>
            <div className="flex items-center space-x-2 pt-2">
              <input
                type="checkbox"
                id="is_public"
                checked={formData.is_public}
                onChange={(e) => setFormData({ ...formData, is_public: e.target.checked })}
                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
              />
              <label htmlFor="is_public" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                Make this book publicly accessible
              </label>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Tags</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="flex gap-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="Add a tag"
                onKeyPress={(e) => { if (e.key === 'Enter') { e.preventDefault(); handleAddTag(); }}}
              />
              <Button type="button" onClick={handleAddTag} leftIcon={<Plus className="h-4 w-4" />}>Add</Button>
            </div>
            {formData.tags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.tags.map((tag) => (
                  <Badge key={tag} variant="secondary" className="px-3 py-1">
                    {tag}
                    <button type="button" onClick={() => handleRemoveTag(tag)} className="ml-2 hover:text-red-500">
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                ))}
              </div>
            )}
          </Card.Content>
        </Card>

        <Card>
          <Card.Header>
            <div className="flex items-center gap-2">
              <BookOpen className="h-5 w-5" />
              <h2 className="text-lg font-semibold">Related Vocabulary Groups</h2>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Associate vocabulary groups that contain words from this book
            </p>
          </Card.Header>
          <Card.Content className="space-y-4">
            <div className="flex items-center justify-between">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {selectedVocabGroups.length} group{selectedVocabGroups.length !== 1 ? 's' : ''} selected
              </p>
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowVocabModal(true)}
              >
                Select Groups
              </Button>
            </div>

            {selectedVocabGroups.length > 0 && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {selectedVocabGroups.map(groupId => {
                  const group = availableVocabGroups.find(g => g.id === groupId);
                  if (!group) return null;
                  
                  return (
                    <div key={groupId} className="flex items-center justify-between p-3 border rounded-lg">
                      <div>
                        <h4 className="font-medium text-sm">{group.name}</h4>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge variant="secondary" className="text-xs">
                            {group.difficulty}
                          </Badge>
                          {group.language && group.target_language && (
                            <Badge variant="outline" className="text-xs">
                              {group.language} → {group.target_language}
                            </Badge>
                          )}
                        </div>
                        {group.description && (
                          <p className="text-xs text-gray-600 mt-1 line-clamp-1">{group.description}</p>
                        )}
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleVocabGroupToggle(groupId)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  );
                })}
              </div>
            )}
          </Card.Content>
        </Card>

        <div className="flex justify-end gap-3">
          <Button type="button" variant="outline" onClick={() => router.push('/books')}>Cancel</Button>
          <Button type="submit" loading={loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Book' : 'Create Book'}
          </Button>
        </div>
      </div>
      <Modal
        isOpen={isCategoryModalOpen}
        onClose={() => setIsCategoryModalOpen(false)}
        title="Create New Book Category"
        size="sm"
      >
        <div className="space-y-4">
          <Input
            label="Category Name"
            value={newCategoryName}
            onChange={(e) => setNewCategoryName(e.target.value)}
            placeholder="e.g., Fiction, Science, etc."
            required
          />
          <Input
            label="Category Color"
            type="color"
            value={newCategoryColor}
            onChange={(e) => setNewCategoryColor(e.target.value)}
            className="h-10"
          />
        </div>
        <div className="mt-6 flex justify-end gap-3">
          <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleCreateCategory}>
            Create Category
          </Button>
        </div>
      </Modal>

      {/* Vocabulary Group Selection Modal */}
      <Modal
        isOpen={showVocabModal}
        onClose={() => setShowVocabModal(false)}
        title="Select Vocabulary Groups"
        size="lg"
      >
        <div className="space-y-4">
          <Input
            placeholder="Search vocabulary groups by name, description, or language..."
            value={vocabSearchTerm}
            onChange={(e) => setVocabSearchTerm(e.target.value)}
          />

          <div className="max-h-96 overflow-y-auto">
            {filteredVocabGroups.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">
                  {vocabSearchTerm ? 'No vocabulary groups found matching your search.' : 'No vocabulary groups available.'}
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {filteredVocabGroups.map((group) => (
                  <div
                    key={group.id}
                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                      selectedVocabGroups.includes(group.id)
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleVocabGroupToggle(group.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <input
                          type="checkbox"
                          checked={selectedVocabGroups.includes(group.id)}
                          onChange={() => handleVocabGroupToggle(group.id)}
                          className="rounded"
                        />
                        <div>
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium">{group.name}</h4>
                            <Badge variant="secondary" className="text-xs">
                              {group.difficulty}
                            </Badge>
                            {group.language && group.target_language && (
                              <Badge variant="outline" className="text-xs">
                                {group.language} → {group.target_language}
                              </Badge>
                            )}
                          </div>
                          {group.description && (
                            <p className="text-sm text-gray-600 mt-1">{group.description}</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600">
              {selectedVocabGroups.length} group{selectedVocabGroups.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={() => setShowVocabModal(false)}>
                Cancel
              </Button>
              <Button onClick={() => setShowVocabModal(false)}>
                Done
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </form>
  );
}

================
File: src/components/books/BookImportModal.tsx
================
'use client';

import { useState } from 'react';
import { Upload, Download, AlertCircle, CheckCircle } from 'lucide-react';
import { Modal, Button } from '@/components/ui';
import { bookService, CreateBookData } from '@/lib/supabase/books';
import { categoryService } from '@/lib/supabase/categories';
import { ContentType } from '@/types/database';

interface BookImportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onImportComplete: () => void;
}

interface ImportResult {
  success: number;
  failed: number;
  errors: string[];
  newCategories: string[];
}

export function BookImportModal({ isOpen, onClose, onImportComplete }: BookImportModalProps) {
  const [csvText, setCsvText] = useState('');
  const [importing, setImporting] = useState(false);
  const [result, setResult] = useState<ImportResult | null>(null);
  const [showSample, setShowSample] = useState(false);

  const sampleCsv = `Title,Author,Cover Image URL,Published Year,Categories,Description
"The Great Gatsby","F. Scott Fitzgerald","https://example.com/cover1.jpg",1925,"Classic Literature","A classic American novel about the Jazz Age and the American Dream"
"To Kill a Mockingbird","Harper Lee","https://example.com/cover2.jpg",1960,"Fiction,American Literature","A gripping tale of racial injustice and childhood innocence in the American South"
"1984","George Orwell","",1949,"Dystopian,Science Fiction","A dystopian social science fiction novel about totalitarian control"`;

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.type === 'text/csv') {
      const reader = new FileReader();
      reader.onload = (e) => {
        setCsvText(e.target?.result as string);
      };
      reader.readAsText(file);
    }
  };

  const parseCSV = (text: string): Array<Record<string, string>> => {
    const lines = text.trim().split('\n');
    if (lines.length < 2) return [];
    
    const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
    const data: Array<Record<string, string>> = [];
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      if (!line.trim()) continue;
      
      const values: string[] = [];
      let current = '';
      let inQuotes = false;
      
      for (let j = 0; j < line.length; j++) {
        const char = line[j];
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
          values.push(current.trim());
          current = '';
        } else {
          current += char;
        }
      }
      values.push(current.trim());
      
      const row: Record<string, string> = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || '';
      });
      data.push(row);
    }
    
    return data;
  };

  const getOrCreateCategory = async (categoryName: string, newCategories: Set<string>): Promise<string | undefined> => {
    if (!categoryName.trim()) return undefined;
    
    try {
      const categories = await categoryService.getCategories({ type: 'book' });
      const existing = categories.find(cat => 
        cat.name.toLowerCase() === categoryName.toLowerCase()
      );
      
      if (existing) {
        return existing.id;
      }
      
      const newCategory = await categoryService.createCategory({
        name: categoryName,
        type: 'book',
        color: '#' + Math.floor(Math.random()*16777215).toString(16),
      });
      
      newCategories.add(categoryName);
      return newCategory.id;
    } catch (error) {
      console.error('Error creating category:', error);
      return undefined;
    }
  };

  const handleImport = async () => {
    if (!csvText.trim()) return;
    
    setImporting(true);
    setResult(null);
    
    try {
      const data = parseCSV(csvText);
      if (data.length === 0) {
        throw new Error('No valid data found in CSV');
      }
      
      const result: ImportResult = {
        success: 0,
        failed: 0,
        errors: [],
        newCategories: [],
      };
      
      const newCategories = new Set<string>();
      
      for (const row of data) {
        try {
          if (!row.Title?.trim()) {
            result.errors.push('Row skipped: Title is required');
            result.failed++;
            continue;
          }
          
          let categoryId: string | undefined;
          if (row.Categories?.trim()) {
            const categoryNames = row.Categories.split(',').map(c => c.trim());
            if (categoryNames.length > 0) {
              categoryId = await getOrCreateCategory(categoryNames[0], newCategories);
            }
          }
          
          const bookData: CreateBookData = {
            title: row.Title.trim(),
            author: row.Author?.trim() || undefined,
            cover_image_url: row['Cover Image URL']?.trim() || undefined,
            publication_year: row['Published Year'] ? parseInt(row['Published Year']) : undefined,
            description: row.Description?.trim() || undefined,
            category_id: categoryId,
            content_type: 'text' as ContentType,
            language: 'en',
            is_public: false,
          };
          
          await bookService.createBook(bookData);
          result.success++;
        } catch (error) {
          result.errors.push(`Row "${row.Title || 'Unknown'}": ${error instanceof Error ? error.message : 'Unknown error'}`);
          result.failed++;
        }
      }
      
      result.newCategories = Array.from(newCategories);
      setResult(result);
      
      if (result.success > 0) {
        onImportComplete();
      }
    } catch (error) {
      setResult({
        success: 0,
        failed: 0,
        errors: [error instanceof Error ? error.message : 'Import failed'],
        newCategories: [],
      });
    } finally {
      setImporting(false);
    }
  };

  const handleClose = () => {
    setCsvText('');
    setResult(null);
    setShowSample(false);
    onClose();
  };

  const downloadSample = () => {
    const blob = new Blob([sampleCsv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'book_import_sample.csv';
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Modal isOpen={isOpen} onClose={handleClose} title="Import Books" size="lg">
      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-medium mb-2">CSV Format</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
            Upload a CSV file with the following columns: Title, Author, Cover Image URL, Published Year, Categories, Description
          </p>
          
          <div className="flex gap-2 mb-4">
            <Button
              variant="outline"
              size="sm"
              onClick={downloadSample}
              leftIcon={<Download className="h-4 w-4" />}
            >
              Download Sample
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowSample(!showSample)}
            >
              {showSample ? 'Hide' : 'Show'} Sample Format
            </Button>
          </div>
          
          {showSample && (
            <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg text-sm font-mono overflow-x-auto">
              <pre>{sampleCsv}</pre>
            </div>
          )}
        </div>
        
        <div>
          <h3 className="text-lg font-medium mb-2">Upload CSV</h3>
          <div className="space-y-4">
            <div>
              <input
                type="file"
                accept=".csv"
                onChange={handleFileUpload}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-2">
                Or paste CSV content:
              </label>
              <textarea
                value={csvText}
                onChange={(e) => setCsvText(e.target.value)}
                placeholder="Title,Author,Cover Image URL,Published Year,Categories,Description&#10;..."
                className="w-full h-32 p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-sm"
              />
            </div>
          </div>
        </div>
        
        {result && (
          <div className="space-y-4">
            <h3 className="text-lg font-medium">Import Results</h3>
            
            {result.success > 0 && (
              <div className="p-4 bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400 rounded-lg">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  <span className="font-medium">
                    Successfully imported {result.success} book{result.success !== 1 ? 's' : ''}
                  </span>
                </div>
                {result.newCategories.length > 0 && (
                  <div className="mt-2">
                    <p className="text-sm">New categories created: {result.newCategories.join(', ')}</p>
                  </div>
                )}
              </div>
            )}
            
            {result.failed > 0 && (
              <div className="p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
                <div className="flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  <span className="font-medium">
                    {result.failed} book{result.failed !== 1 ? 's' : ''} failed to import
                  </span>
                </div>
                {result.errors.length > 0 && (
                  <div className="mt-2 max-h-32 overflow-y-auto">
                    <ul className="text-sm space-y-1">
                      {result.errors.map((error, index) => (
                        <li key={index} className="text-xs">• {error}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
        )}
        
        {importing && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              <span className="text-sm">Importing books...</span>
            </div>
          </div>
        )}
      </div>
      
      <div className="mt-6 flex justify-end gap-2">
        <Button variant="outline" onClick={handleClose}>
          Cancel
        </Button>
        <Button
          onClick={handleImport}
          disabled={!csvText.trim() || importing}
          leftIcon={<Upload className="h-4 w-4" />}
        >
          {importing ? 'Importing...' : 'Import Books'}
        </Button>
      </div>
    </Modal>
  );
}

================
File: src/components/books/index.ts
================
export { BookForm } from './BookForm';

================
File: src/components/courses/CourseForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Save, X, Plus, GripVertical } from 'lucide-react';
import { Course, CourseStatus, DifficultyLevel, Category, CourseObjective } from '@/types/database';
import { courseService, CreateCourseData, UpdateCourseData } from '@/lib/supabase/courses';
import { categoryService } from '@/lib/supabase/categories';
import { ObjectiveSelector } from './ObjectiveSelector';
import { 
  Button, Card, Input, Textarea, Select, Badge, Modal, Spinner 
} from '@/components/ui';
import { cn } from '@/lib/utils';

interface CourseFormProps {
  initialData?: Course;
}

export function CourseForm({ initialData }: CourseFormProps) {
  const router = useRouter();
  const isEditing = !!initialData;

  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');
  
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [courseObjectives, setCourseObjectives] = useState<CourseObjective[]>(
    initialData?.course_objectives || []
  );
  const [formData, setFormData] = useState({
    title: initialData?.title || '',
    short_description: initialData?.short_description || '',
    description: initialData?.description || '',
    category_id: initialData?.category_id || '',
    status: initialData?.status || 'draft' as CourseStatus,
    difficulty: initialData?.difficulty || 'beginner' as DifficultyLevel,
    duration_hours: initialData?.duration_hours || '',
    prerequisites: initialData?.prerequisites || [],
    tags: initialData?.tags || [],
    thumbnail_url: initialData?.thumbnail_url || '',
    is_public: initialData?.is_public || false,
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newPrerequisite, setNewPrerequisite] = useState('');
  const [newTag, setNewTag] = useState('');

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'course' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (formData.title.length > 200) {
      newErrors.title = 'Title must be less than 200 characters';
    }
    
    if (formData.short_description && formData.short_description.length > 300) {
      newErrors.short_description = 'Short description must be less than 300 characters';
    }
    
    if (formData.duration_hours && isNaN(Number(formData.duration_hours))) {
      newErrors.duration_hours = 'Duration must be a number';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    try {
      setLoading(true);
      
      const courseData = {
        ...formData,
        duration_hours: formData.duration_hours ? Number(formData.duration_hours) : undefined,
      };
      
      if (isEditing) {
        await courseService.updateCourse({
          id: initialData.id,
          ...courseData,
        } as UpdateCourseData);
      } else {
        await courseService.createCourse(courseData as CreateCourseData);
      }
      
      router.push('/courses');
    } catch (error) {
      console.error('Failed to save course:', error);
      setErrors({ submit: 'Failed to save course. Please try again.' });
    } finally {
      setLoading(false);
    }
  };


  const handleAddPrerequisite = () => {
    if (newPrerequisite.trim()) {
      setFormData({
        ...formData,
        prerequisites: [...formData.prerequisites, newPrerequisite.trim()],
      });
      setNewPrerequisite('');
    }
  };

  const handleRemovePrerequisite = (index: number) => {
    setFormData({
      ...formData,
      prerequisites: formData.prerequisites.filter((_, i) => i !== index),
    });
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, newTag.trim()],
      });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(t => t !== tag),
    });
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;
  
    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'course', // Hardcode the type for this context
        color: newCategoryColor,
      });
  
      // Close modal and reset form
      setIsCategoryModalOpen(false);
      setNewCategoryName('');
  
      // Refresh the category list and select the new one
      await loadCategories();
      setFormData({ ...formData, category_id: newCategory.id });
      
    } catch (error) {
      console.error("Failed to create category:", error);
      // You can add error handling for the user here
    }
  };

  const statusOptions = [
    { value: 'draft', label: 'Draft' },
    { value: 'published', label: 'Published' },
    { value: 'archived', label: 'Archived' },
  ];

  const difficultyOptions = [
    { value: 'beginner', label: 'Beginner' },
    { value: 'intermediate', label: 'Intermediate' },
    { value: 'advanced', label: 'Advanced' },
    { value: 'expert', label: 'Expert' },
  ];

  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {/* Header */}
      <div className="mb-8">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={() => router.push('/courses')}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back to Courses
        </Button>
        
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Course' : 'Create New Course'}
        </h1>
      </div>

      {errors.submit && (
        <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
          {errors.submit}
        </div>
      )}

      <div className="space-y-6">
        {/* Basic Information */}
        <Card>
          <Card.Header>
            <h2 className="text-lg font-semibold">Basic Information</h2>
          </Card.Header>
          <Card.Content>
            <div className="space-y-4">
              <Input
                label="Course Title"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                error={errors.title}
                placeholder="Enter course title"
                required
              />
              
              <Input
                label="Short Description"
                value={formData.short_description}
                onChange={(e) => setFormData({ ...formData, short_description: e.target.value })}
                error={errors.short_description}
                placeholder="Brief description (max 300 characters)"
                helperText={`${formData.short_description.length}/300 characters`}
              />
              
              <Textarea
                label="Full Description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Detailed course description"
                rows={6}
              />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Category
                  </label>
                  <div className="flex items-center gap-2">
                    <Select
                      className="flex-grow"
                      value={formData.category_id}
                      onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
                      options={[
                        { value: '', label: 'Select category' },
                        ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                      ]}
                    />
                    <Button
                      type="button"
                      variant="outline"
                      size="md"
                      onClick={() => setIsCategoryModalOpen(true)}
                      className="flex-shrink-0"
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                
                <Input
                  label="Duration (hours)"
                  type="number"
                  value={formData.duration_hours}
                  onChange={(e) => setFormData({ ...formData, duration_hours: e.target.value })}
                  error={errors.duration_hours}
                  placeholder="e.g., 24"
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Select
                  label="Status"
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value as CourseStatus })}
                  options={statusOptions}
                />
                
                <Select
                  label="Difficulty Level"
                  value={formData.difficulty}
                  onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as DifficultyLevel })}
                  options={difficultyOptions}
                />
              </div>
              
              <Input
                label="Thumbnail URL"
                type="url"
                value={formData.thumbnail_url}
                onChange={(e) => setFormData({ ...formData, thumbnail_url: e.target.value })}
                placeholder="https://example.com/image.jpg"
              />
              
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="is_public"
                  checked={formData.is_public}
                  onChange={(e) => setFormData({ ...formData, is_public: e.target.checked })}
                  className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
                />
                <label htmlFor="is_public" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Make this course publicly accessible
                </label>
              </div>
            </div>
          </Card.Content>
        </Card>

        {/* Learning Objectives */}
        <Card>
          <Card.Header>
            <h2 className="text-lg font-semibold">Learning Objectives</h2>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Define what students will achieve by completing this course
            </p>
          </Card.Header>
          <Card.Content>
            <ObjectiveSelector
              courseId={isEditing ? initialData?.id : undefined}
              selectedObjectives={courseObjectives}
              onObjectivesChange={setCourseObjectives}
              disabled={loading}
            />
          </Card.Content>
        </Card>

        {/* Prerequisites */}
        <Card>
          <Card.Header>
            <h2 className="text-lg font-semibold">Prerequisites</h2>
          </Card.Header>
          <Card.Content>
            <div className="space-y-4">
              <div className="flex gap-2">
                <Input
                  value={newPrerequisite}
                  onChange={(e) => setNewPrerequisite(e.target.value)}
                  placeholder="Add a prerequisite"
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddPrerequisite())}
                />
                <Button
                  type="button"
                  onClick={handleAddPrerequisite}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Add
                </Button>
              </div>
              
              {formData.prerequisites.length > 0 && (
                <div className="space-y-2">
                  {formData.prerequisites.map((prerequisite, index) => (
                    <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 dark:bg-gray-800 rounded">
                      <GripVertical className="h-4 w-4 text-gray-400" />
                      <span className="flex-1 text-sm">{prerequisite}</span>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemovePrerequisite(index)}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </Card.Content>
        </Card>

        {/* Tags */}
        <Card>
          <Card.Header>
            <h2 className="text-lg font-semibold">Tags</h2>
          </Card.Header>
          <Card.Content>
            <div className="space-y-4">
              <div className="flex gap-2">
                <Input
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  placeholder="Add a tag"
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}
                />
                <Button
                  type="button"
                  onClick={handleAddTag}
                  leftIcon={<Plus className="h-4 w-4" />}
                >
                  Add
                </Button>
              </div>
              
              {formData.tags.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {formData.tags.map((tag) => (
                    <Badge
                      key={tag}
                      variant="secondary"
                      className="px-3 py-1"
                    >
                      {tag}
                      <button
                        type="button"
                        onClick={() => handleRemoveTag(tag)}
                        className="ml-2 hover:text-red-500"
                      >
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  ))}
                </div>
              )}
            </div>
          </Card.Content>
        </Card>

        {/* Actions */}
        <div className="flex justify-end gap-3">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push('/courses')}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            loading={loading}
            leftIcon={<Save className="h-4 w-4" />}
          >
            {isEditing ? 'Update Course' : 'Create Course'}
          </Button>
        </div>
      </div>

      <Modal
        isOpen={isCategoryModalOpen}
        onClose={() => setIsCategoryModalOpen(false)}
        title="Create New Category"
        size="sm"
      >
        <div className="space-y-4">
          <Input
            label="Category Name"
            value={newCategoryName}
            onChange={(e) => setNewCategoryName(e.target.value)}
            placeholder="e.g., Programming"
            required
          />
          <Input
            label="Category Color"
            type="color"
            value={newCategoryColor}
            onChange={(e) => setNewCategoryColor(e.target.value)}
            className="h-10"
          />
        </div>
        <div className="mt-6 flex justify-end gap-3">
          <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleCreateCategory}>
            Create Category
          </Button>
        </div>
      </Modal>
    </form>
  );
}
export default CourseForm;

================
File: src/components/courses/index.ts
================
export { CourseForm } from './CourseForm';

================
File: src/components/courses/ObjectiveSelector.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Search, Plus, X, Target, GripVertical } from 'lucide-react';
import { Button, Input, Modal, Badge, Card } from '@/components/ui';
import { objectiveService } from '@/lib/supabase/objectives';
import { courseObjectiveService, CourseObjective } from '@/lib/supabase/course-objectives';
import type { Objective } from '@/types/database';
import { cn } from '@/lib/utils';

interface ObjectiveSelectorProps {
  courseId?: string;
  selectedObjectives: CourseObjective[];
  onObjectivesChange: (objectives: CourseObjective[]) => void;
  disabled?: boolean;
}

export function ObjectiveSelector({ 
  courseId, 
  selectedObjectives, 
  onObjectivesChange, 
  disabled 
}: ObjectiveSelectorProps) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [availableObjectives, setAvailableObjectives] = useState<Objective[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (isModalOpen) {
      loadAvailableObjectives();
    }
  }, [isModalOpen]);

  const loadAvailableObjectives = async () => {
    try {
      setLoading(true);
      const objectives = await objectiveService.getObjectives({});
      // Filter out already selected objectives
      const selectedIds = selectedObjectives.map(co => co.objective_id);
      const available = objectives.filter(obj => !selectedIds.includes(obj.id));
      setAvailableObjectives(available);
    } catch (error) {
      console.error('Failed to load objectives:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredObjectives = availableObjectives.filter(obj => {
    if (!searchQuery) return true;
    const query = searchQuery.toLowerCase();
    return (
      obj.title.toLowerCase().includes(query) ||
      (obj.description && obj.description.toLowerCase().includes(query)) ||
      (obj.tags && obj.tags.some(tag => tag.toLowerCase().includes(query))) ||
      (obj.bloom_level && obj.bloom_level.toLowerCase().includes(query))
    );
  });

  const handleAddObjective = async (objective: Objective) => {
    try {
      if (courseId) {
        // If course exists, add to database
        const courseObjective = await courseObjectiveService.addObjectiveToCourse({
          course_id: courseId,
          objective_id: objective.id,
        });
        onObjectivesChange([...selectedObjectives, courseObjective]);
      } else {
        // If course doesn't exist yet, just add to local state
        const tempCourseObjective: CourseObjective = {
          id: `temp-${Date.now()}`,
          course_id: courseId || '',
          objective_id: objective.id,
          position: selectedObjectives.length,
          created_at: new Date().toISOString(),
          objective,
        };
        onObjectivesChange([...selectedObjectives, tempCourseObjective]);
      }
      
      // Remove from available objectives
      setAvailableObjectives(prev => prev.filter(obj => obj.id !== objective.id));
    } catch (error) {
      console.error('Failed to add objective:', error);
    }
  };

  const handleRemoveObjective = async (courseObjectiveId: string, objectiveId: string) => {
    try {
      if (courseId && !courseObjectiveId.startsWith('temp-')) {
        // If course exists and this is a real relationship, remove from database
        await courseObjectiveService.removeObjectiveFromCourse(courseId, objectiveId);
      }
      
      // Remove from selected objectives
      const updatedObjectives = selectedObjectives.filter(co => co.id !== courseObjectiveId);
      onObjectivesChange(updatedObjectives);
      
      // Add back to available objectives if modal is open
      if (isModalOpen) {
        const removedObjective = selectedObjectives.find(co => co.id === courseObjectiveId)?.objective;
        if (removedObjective) {
          setAvailableObjectives(prev => [...prev, removedObjective]);
        }
      }
    } catch (error) {
      console.error('Failed to remove objective:', error);
    }
  };

  const handleReorderObjectives = async (reorderedObjectives: CourseObjective[]) => {
    try {
      if (courseId) {
        // Update positions in database
        const objectiveIds = reorderedObjectives.map(co => co.objective_id);
        await courseObjectiveService.reorderCourseObjectives(courseId, objectiveIds);
      }
      onObjectivesChange(reorderedObjectives);
    } catch (error) {
      console.error('Failed to reorder objectives:', error);
    }
  };

  const moveObjective = (fromIndex: number, toIndex: number) => {
    const reordered = [...selectedObjectives];
    const [movedItem] = reordered.splice(fromIndex, 1);
    reordered.splice(toIndex, 0, movedItem);
    
    // Update positions
    const updatedObjectives = reordered.map((obj, index) => ({
      ...obj,
      position: index,
    }));
    
    handleReorderObjectives(updatedObjectives);
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          Course Objectives
        </label>
        <Button
          type="button"
          variant="outline"
          size="sm"
          onClick={() => setIsModalOpen(true)}
          disabled={disabled}
          leftIcon={<Plus className="h-4 w-4" />}
        >
          Add Objective
        </Button>
      </div>

      {selectedObjectives.length === 0 ? (
        <div className="text-center py-8 text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
          <Target className="h-8 w-8 mx-auto mb-2 opacity-50" />
          <p>No objectives selected</p>
          <p className="text-sm">Add objectives to define what students will achieve</p>
        </div>
      ) : (
        <div className="space-y-2">
          {selectedObjectives
            .sort((a, b) => a.position - b.position)
            .map((courseObjective, index) => (
              <Card key={courseObjective.id} className="p-3">
                <div className="flex items-start gap-3">
                  <div className="flex items-center gap-2">
                    <button
                      type="button"
                      className="cursor-move text-gray-400 hover:text-gray-600"
                      onMouseDown={() => {
                        // Simple drag implementation - could be enhanced with react-beautiful-dnd
                      }}
                    >
                      <GripVertical className="h-4 w-4" />
                    </button>
                    <span className="text-sm font-medium text-gray-500 min-w-[1.5rem]">
                      {index + 1}.
                    </span>
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                      {courseObjective.objective?.title}
                    </h4>
                    {courseObjective.objective?.description && (
                      <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                        {courseObjective.objective.description}
                      </p>
                    )}
                    <div className="flex items-center gap-2 flex-wrap">
                      {courseObjective.objective?.bloom_level && (
                        <Badge variant="secondary" size="sm">
                          {courseObjective.objective.bloom_level}
                        </Badge>
                      )}
                      {courseObjective.objective?.measurable && (
                        <Badge variant="outline" size="sm">
                          Measurable
                        </Badge>
                      )}
                      {courseObjective.objective?.tags?.slice(0, 2).map((tag, tagIndex) => (
                        <Badge key={tagIndex} variant="outline" size="sm">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveObjective(courseObjective.id, courseObjective.objective_id)}
                    disabled={disabled}
                    className="text-red-600 hover:text-red-700"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </Card>
            ))}
        </div>
      )}

      {/* Add Objectives Modal */}
      <Modal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)}
        title="Add Objectives"
        size="lg"
      >
        <div className="space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search objectives..."
              className="pl-10"
            />
          </div>

          <div className="max-h-96 overflow-y-auto space-y-2">
            {loading ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
                <p className="mt-2 text-sm text-gray-600">Loading objectives...</p>
              </div>
            ) : filteredObjectives.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Target className="h-8 w-8 mx-auto mb-2 opacity-50" />
                <p>No objectives found</p>
                {searchQuery && (
                  <p className="text-sm">Try adjusting your search terms</p>
                )}
              </div>
            ) : (
              filteredObjectives.map((objective) => (
                <Card key={objective.id} className="p-3 hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between gap-3">
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-gray-900 dark:text-gray-100 mb-1">
                        {objective.title}
                      </h4>
                      {objective.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2 line-clamp-2">
                          {objective.description}
                        </p>
                      )}
                      <div className="flex items-center gap-2 flex-wrap">
                        {objective.bloom_level && (
                          <Badge variant="secondary" size="sm">
                            {objective.bloom_level}
                          </Badge>
                        )}
                        {objective.measurable && (
                          <Badge variant="outline" size="sm">
                            Measurable
                          </Badge>
                        )}
                        {objective.is_template && (
                          <Badge variant="outline" size="sm">
                            Template
                          </Badge>
                        )}
                        {objective.tags?.slice(0, 2).map((tag, index) => (
                          <Badge key={index} variant="outline" size="sm">
                            {tag}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <Button
                      type="button"
                      size="sm"
                      onClick={() => handleAddObjective(objective)}
                      leftIcon={<Plus className="h-4 w-4" />}
                    >
                      Add
                    </Button>
                  </div>
                </Card>
              ))
            )}
          </div>

          <div className="flex justify-end pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => setIsModalOpen(false)}
            >
              Done
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/decoders/DecoderForm.tsx
================
'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Save, X, Plus, Key, Search } from 'lucide-react';
import { Decoder, decoderService, CreateDecoderData, UpdateDecoderData } from '@/lib/supabase/decoders';
import { bookService } from '@/lib/supabase/books';
import { categoryService } from '@/lib/supabase/categories';
import { Book, Category } from '@/types/database';
import { 
  Button, Card, Input, Textarea, Select, Badge, Modal, Spinner 
} from '@/components/ui';

interface DecoderFormProps {
  initialData?: Decoder;
}

export function DecoderForm({ initialData }: DecoderFormProps) {
  const router = useRouter();
  const isEditing = !!initialData;
  const [loading, setLoading] = useState(false);
  const [books, setBooks] = useState<Book[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loadingBooks, setLoadingBooks] = useState(false);
  const [showBookModal, setShowBookModal] = useState(false);
  const [bookSearchTerm, setBookSearchTerm] = useState('');
  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');

  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    description: initialData?.description || '',
    category: initialData?.category || null,
    tags: initialData?.tags || [],
    book_id: initialData?.book_id || '',
    is_public: initialData?.is_public || false,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newTag, setNewTag] = useState('');

  const loadBooks = useCallback(async () => {
    setLoadingBooks(true);
    try {
      const data = await bookService.getBooks({ limit: 1000 }); // Load all books
      setBooks(data);
    } catch (error) {
      console.error('Failed to load books:', error);
    } finally {
      setLoadingBooks(false);
    }
  }, []);

  const loadCategories = useCallback(async () => {
    try {
      const data = await categoryService.getCategories({ type: 'decoder' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  }, []);

  useEffect(() => {
    loadBooks();
    loadCategories();
  }, [loadBooks, loadCategories]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }
    if (!formData.book_id) {
      newErrors.book_id = 'Associated book is required';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'decoder',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      setNewCategoryColor('#6b7280');

      await loadCategories();
      setFormData({ ...formData, category: newCategory.id });
      
    } catch (error) {
      console.error("Failed to create decoder category:", error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;
    
    setLoading(true);
    try {
      const decoderData = {
        ...formData,
        // Remove category if it's null or empty to avoid UUID validation error
        ...(formData.category ? { category: formData.category } : {}),
      };
      
      // Remove the category field if it's null to avoid sending it
      if (!formData.category) {
        delete decoderData.category;
      }
      
      if (isEditing) {
        await decoderService.updateDecoder({ id: initialData.id, ...decoderData } as UpdateDecoderData);
      } else {
        await decoderService.createDecoder(decoderData as CreateDecoderData);
      }
      
      router.push('/decoders');
      router.refresh();
    } catch (error: any) {
      console.error('Failed to save decoder:', error);
      setErrors({ submit: error.message || 'Failed to save decoder. Please try again.' });
    } finally {
      setLoading(false);
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({ ...formData, tags: [...formData.tags, newTag.trim()] });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({ ...formData, tags: formData.tags.filter(t => t !== tag) });
  };

  const selectedBook = books.find(book => book.id === formData.book_id);
  const filteredBooks = books.filter(book =>
    book.title.toLowerCase().includes(bookSearchTerm.toLowerCase()) ||
    (book.author && book.author.toLowerCase().includes(bookSearchTerm.toLowerCase())) ||
    (book.description && book.description.toLowerCase().includes(bookSearchTerm.toLowerCase()))
  );

  const handleBookSelect = (bookId: string) => {
    setFormData({ ...formData, book_id: bookId });
    setShowBookModal(false);
    setBookSearchTerm('');
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={() => router.back()}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back
        </Button>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Decoder' : 'Create New Decoder'}
        </h1>
      </div>

      {errors.submit && (
        <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
          {errors.submit}
        </div>
      )}

      <div className="space-y-6">
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Basic Information</h2></Card.Header>
          <Card.Content>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="Decoder Name"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                error={errors.name}
                placeholder="Enter decoder name"
                required
              />
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Category
                </label>
                <div className="flex items-center gap-2">
                  <Select
                    className="flex-grow"
                    value={formData.category || ''}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value || null })}
                    options={[
                      { value: '', label: 'No category' },
                      ...categories.map(c => ({ value: c.id, label: c.name }))
                    ]}
                    placeholder="Select a category..."
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="md"
                    onClick={() => setIsCategoryModalOpen(true)}
                    className="flex-shrink-0 !h-10"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
            <div className="mt-4">
              <Textarea
                label="Description"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Detailed description of what this decoder analyzes"
                rows={3}
              />
            </div>
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Associated Book</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Select Book *
              </label>
              {selectedBook ? (
                <div className="flex items-center justify-between p-3 border rounded-lg bg-gray-50 dark:bg-gray-800">
                  <div className="flex-1">
                    <h4 className="font-medium">{selectedBook.title}</h4>
                    {selectedBook.author && (
                      <p className="text-sm text-gray-600 dark:text-gray-400">by {selectedBook.author}</p>
                    )}
                    <div className="flex items-center gap-2 mt-1">
                      {selectedBook.content_type && (
                        <Badge variant="outline" className="text-xs">
                          {selectedBook.content_type}
                        </Badge>
                      )}
                    </div>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setShowBookModal(true)}
                  >
                    Change
                  </Button>
                </div>
              ) : (
                <div>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => setShowBookModal(true)}
                    leftIcon={<Search className="h-4 w-4" />}
                    className="w-full"
                  >
                    Select a Book
                  </Button>
                  {errors.book_id && (
                    <p className="mt-1 text-sm text-red-600">{errors.book_id}</p>
                  )}
                </div>
              )}
            </div>
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Visibility</h2></Card.Header>
          <Card.Content>
            <div className="flex items-center">
              <label className="flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.is_public}
                  onChange={(e) => setFormData({ ...formData, is_public: e.target.checked })}
                  className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Make this decoder publicly accessible
                </span>
              </label>
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Tags</h2></Card.Header>
          <Card.Content>
            <div className="flex flex-wrap gap-2 mb-2">
              {formData.tags.map((tag, index) => (
                <Badge key={index} variant="outline">
                  {tag}
                  <button
                    type="button"
                    onClick={() => handleRemoveTag(tag)}
                    className="ml-1 hover:text-red-600"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </Badge>
              ))}
            </div>
            <div className="flex gap-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="Add a tag..."
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}
              />
              <Button type="button" variant="outline" onClick={handleAddTag}>
                <Plus className="h-4 w-4" />
              </Button>
            </div>
          </Card.Content>
        </Card>

        <div className="flex justify-end gap-3">
          <Button type="button" variant="outline" onClick={() => router.push('/decoders')}>Cancel</Button>
          <Button type="submit" loading={loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Decoder' : 'Create Decoder'}
          </Button>
        </div>
      </div>

      {/* Book Selection Modal */}
      <Modal
        isOpen={showBookModal}
        onClose={() => setShowBookModal(false)}
        title="Select Book"
        size="lg"
      >
        <div className="space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search books by title, author, or description..."
              value={bookSearchTerm}
              onChange={(e) => setBookSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>

          {loadingBooks ? (
            <div className="flex justify-center py-8">
              <Spinner size="md" />
            </div>
          ) : (
            <div className="max-h-96 overflow-y-auto">
              {filteredBooks.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-gray-500">
                    {bookSearchTerm ? 'No books found matching your search.' : 'No books available.'}
                  </p>
                </div>
              ) : (
                <div className="space-y-2">
                  {filteredBooks.map((book) => (
                    <div
                      key={book.id}
                      className="border rounded-lg p-3 cursor-pointer transition-colors hover:border-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800"
                      onClick={() => handleBookSelect(book.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2">
                            <h4 className="font-medium">{book.title}</h4>
                            {book.content_type && (
                              <Badge variant="outline" className="text-xs">
                                {book.content_type}
                              </Badge>
                            )}
                          </div>
                          {book.author && (
                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">by {book.author}</p>
                          )}
                          {book.description && (
                            <p className="text-sm text-gray-500 mt-1 line-clamp-2">{book.description}</p>
                          )}
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleBookSelect(book.id);
                          }}
                        >
                          Select
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          <div className="flex justify-end border-t pt-4">
            <Button variant="outline" onClick={() => setShowBookModal(false)}>
              Cancel
            </Button>
          </div>
        </div>
      </Modal>

      {/* Category Creation Modal */}
      <Modal
        isOpen={isCategoryModalOpen}
        onClose={() => setIsCategoryModalOpen(false)}
        title="Create New Decoder Category"
        size="sm"
      >
        <div className="space-y-4">
          <Input
            label="Category Name"
            value={newCategoryName}
            onChange={(e) => setNewCategoryName(e.target.value)}
            placeholder="e.g., Educational, Technical, etc."
            required
          />
          <Input
            label="Category Color"
            type="color"
            value={newCategoryColor}
            onChange={(e) => setNewCategoryColor(e.target.value)}
            className="h-10"
          />
        </div>
        <div className="mt-6 flex justify-end gap-3">
          <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleCreateCategory}>
            Create Category
          </Button>
        </div>
      </Modal>
    </form>
  );
}

================
File: src/components/ErrorBoundary.tsx
================
'use client';

import React from 'react';

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

interface ErrorBoundaryProps {
  children: React.ReactNode;
  fallback?: React.ComponentType<{ error: Error }>;
}

export class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      if (this.props.fallback) {
        return <this.props.fallback error={this.state.error!} />;
      }

      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center">
            <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-red-600 text-xl">⚠️</span>
            </div>
            <h2 className="text-lg font-semibold text-gray-900 mb-2">
              Something went wrong
            </h2>
            <p className="text-gray-600 mb-4">
              An unexpected error occurred. Please try refreshing the page.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="btn-primary"
            >
              Refresh Page
            </button>
            {process.env.NODE_ENV === 'development' && this.state.error && (
              <details className="mt-4 text-left">
                <summary className="cursor-pointer text-sm text-gray-500">
                  Error Details
                </summary>
                <pre className="mt-2 text-xs text-red-600 bg-red-50 p-2 rounded overflow-auto">
                  {this.state.error.toString()}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

================
File: src/components/layout/DashboardLayout.tsx
================
'use client';

import { Fragment, useState } from 'react';
import { Dialog, Transition } from '@headlessui/react';
import {
  Bars3Icon,
  HomeIcon,
  BookOpenIcon,
  AcademicCapIcon,
  ClipboardDocumentListIcon,
  CalendarIcon,
  XMarkIcon,
  ClockIcon,
  CheckCircleIcon,
  CogIcon,
  DocumentTextIcon,
  LanguageIcon,
  KeyIcon,
} from '@heroicons/react/24/outline';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { UserProfile } from '@/components/auth/UserProfile';
import { cn } from '@/lib/utils';

const navigation = [
  { name: 'Dashboard', href: '/dashboard', icon: HomeIcon },
  { name: 'Courses', href: '/courses', icon: AcademicCapIcon },
  { name: 'Schedules', href: '/schedules', icon: CalendarIcon },
  { name: 'Lessons', href: '/lessons', icon: ClockIcon },
  { name: 'Tasks', href: '/tasks', icon: CheckCircleIcon },
  { name: 'Objectives', href: '/objectives', icon: DocumentTextIcon },
  { name: 'Methods', href: '/methods', icon: CogIcon },
  { name: 'Books', href: '/books', icon: BookOpenIcon },
  { name: 'Vocabulary', href: '/vocabulary', icon: LanguageIcon },
  { name: 'Decoders', href: '/decoders', icon: KeyIcon },
];

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export function DashboardLayout({ children }: DashboardLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const pathname = usePathname();

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile sidebar */}
      <Transition.Root show={sidebarOpen} as={Fragment}>
        <Dialog as="div" className="relative z-50 lg:hidden" onClose={setSidebarOpen}>
          <Transition.Child
            as={Fragment}
            enter="transition-opacity ease-linear duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition-opacity ease-linear duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-900/80" />
          </Transition.Child>

          <div className="fixed inset-0 flex">
            <Transition.Child
              as={Fragment}
              enter="transition ease-in-out duration-300 transform"
              enterFrom="-translate-x-full"
              enterTo="translate-x-0"
              leave="transition ease-in-out duration-300 transform"
              leaveFrom="translate-x-0"
              leaveTo="-translate-x-full"
            >
              <Dialog.Panel className="relative mr-16 flex w-full max-w-xs flex-1">
                <Transition.Child
                  as={Fragment}
                  enter="ease-in-out duration-300"
                  enterFrom="opacity-0"
                  enterTo="opacity-100"
                  leave="ease-in-out duration-300"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <div className="absolute left-full top-0 flex w-16 justify-center pt-5">
                    <button
                      type="button"
                      className="-m-2.5 p-2.5"
                      onClick={() => setSidebarOpen(false)}
                    >
                      <span className="sr-only">Close sidebar</span>
                      <XMarkIcon className="h-6 w-6 text-white" aria-hidden="true" />
                    </button>
                  </div>
                </Transition.Child>

                <div className="flex grow flex-col gap-y-5 overflow-y-auto bg-white px-6 pb-2">
                  <div className="flex h-16 shrink-0 items-center">
                    <h1 className="text-xl font-bold text-primary-600">Course Builder</h1>
                  </div>
                  <nav className="flex flex-1 flex-col">
                    <ul role="list" className="flex flex-1 flex-col gap-y-7">
                      <li>
                        <ul role="list" className="-mx-2 space-y-1">
                          {navigation.map((item) => (
                            <li key={item.name}>
                              <Link
                                href={item.href}
                                className={cn(
                                  pathname === item.href
                                    ? 'bg-gray-50 text-primary-600'
                                    : 'text-gray-700 hover:text-primary-600 hover:bg-gray-50',
                                  'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold'
                                )}
                                onClick={() => setSidebarOpen(false)}
                              >
                                <item.icon
                                  className={cn(
                                    pathname === item.href
                                      ? 'text-primary-600'
                                      : 'text-gray-400 group-hover:text-primary-600',
                                    'h-6 w-6 shrink-0'
                                  )}
                                  aria-hidden="true"
                                />
                                {item.name}
                              </Link>
                            </li>
                          ))}
                        </ul>
                      </li>
                    </ul>
                  </nav>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </Dialog>
      </Transition.Root>

      {/* Static sidebar for desktop */}
      <div className="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
        <div className="flex grow flex-col gap-y-5 overflow-y-auto border-r border-gray-200 bg-white px-6">
          <div className="flex h-16 shrink-0 items-center">
            <h1 className="text-xl font-bold text-primary-600">Course Builder</h1>
          </div>
          <nav className="flex flex-1 flex-col">
            <ul role="list" className="flex flex-1 flex-col gap-y-7">
              <li>
                <ul role="list" className="-mx-2 space-y-1">
                  {navigation.map((item) => (
                    <li key={item.name}>
                      <Link
                        href={item.href}
                        className={cn(
                          pathname === item.href
                            ? 'bg-gray-50 text-primary-600'
                            : 'text-gray-700 hover:text-primary-600 hover:bg-gray-50',
                          'group flex gap-x-3 rounded-md p-2 text-sm leading-6 font-semibold'
                        )}
                      >
                        <item.icon
                          className={cn(
                            pathname === item.href
                              ? 'text-primary-600'
                              : 'text-gray-400 group-hover:text-primary-600',
                            'h-6 w-6 shrink-0'
                          )}
                          aria-hidden="true"
                        />
                        {item.name}
                      </Link>
                    </li>
                  ))}
                </ul>
              </li>
            </ul>
          </nav>
        </div>
      </div>

      <div className="lg:pl-72">
        {/* Top navigation */}
        <div className="sticky top-0 z-40 flex h-16 shrink-0 items-center gap-x-4 border-b border-gray-200 bg-white px-4 shadow-sm sm:gap-x-6 sm:px-6 lg:px-8">
          <button
            type="button"
            className="-m-2.5 p-2.5 text-gray-700 lg:hidden"
            onClick={() => setSidebarOpen(true)}
          >
            <span className="sr-only">Open sidebar</span>
            <Bars3Icon className="h-6 w-6" aria-hidden="true" />
          </button>

          <div className="flex flex-1 gap-x-4 self-stretch lg:gap-x-6">
            <div className="flex flex-1"></div>
            <div className="flex items-center gap-x-4 lg:gap-x-6">
              <UserProfile />
            </div>
          </div>
        </div>

        <main>{children}</main>
      </div>
    </div>
  );
}

================
File: src/components/objectives/ObjectiveForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Select } from '@/components/ui/Select';
import { Badge } from '@/components/ui/Badge';
import { objectiveService } from '@/lib/supabase/objectives';
import { categoryService } from '@/lib/supabase/categories';
import type { Objective, Category } from '@/types/database';
import { Save, Plus, X } from 'lucide-react';

interface ObjectiveFormProps {
  objective?: Objective;
  onSuccess?: () => void;
}

const BLOOM_LEVELS: { value: string; label: string }[] = [
  { value: 'remember', label: 'Remember' },
  { value: 'understand', label: 'Understand' },
  { value: 'apply', label: 'Apply' },
  { value: 'analyze', label: 'Analyze' },
  { value: 'evaluate', label: 'Evaluate' },
  { value: 'create', label: 'Create' },
];

export function ObjectiveForm({ objective, onSuccess }: ObjectiveFormProps) {
  const router = useRouter();
  const isEditing = !!objective;
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [newTag, setNewTag] = useState('');
  
  const [formData, setFormData] = useState({
    title: objective?.title || '',
    description: objective?.description || '',
    category_id: objective?.category_id || '',
    bloom_level: objective?.bloom_level || 'understand',
    measurable: objective?.measurable ?? true,
    tags: objective?.tags || [],
    is_template: objective?.is_template || false,
    metadata: objective?.metadata || {},
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'objective' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.title.trim()) newErrors.title = 'Title is required';
    if (!formData.description.trim()) newErrors.description = 'Description is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const objectiveData = {
        ...formData,
        category_id: formData.category_id || undefined,
      };

      if (isEditing) {
        await objectiveService.updateObjective({ id: objective!.id, ...objectiveData });
      } else {
        await objectiveService.createObjective(objectiveData);
      }

      if (onSuccess) {
        onSuccess();
      } else {
        router.push('/objectives');
        router.refresh();
      }
    } catch (error: any) {
      console.error('Failed to save objective:', error);
      setErrors({ submit: error.message || 'Failed to save objective. Please try again.' });
    } finally {
      setLoading(false);
    }
  };

  const addTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()]
      }));
      setNewTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };


  return (
    <div className="space-y-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Objective' : 'Create New Objective'}
        </h1>
        <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
          {isEditing ? 'Update objective details' : 'Create a reusable teaching objective for course and lesson planning'}
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {errors.submit && (
          <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
            {errors.submit}
          </div>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="col-span-2">
            <Input
              label="Objective Title"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              placeholder="e.g., Students will be able to analyze literary themes"
              required
              error={errors.title}
            />
          </div>

          <div className="col-span-2">
            <Textarea
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Detailed description of what students should achieve..."
              rows={3}
              required
              error={errors.description}
            />
          </div>

          <div>
            <Select
              label="Category"
              value={formData.category_id}
              onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
              options={[
                { value: '', label: 'No category' },
                ...categories.map(c => ({ value: c.id, label: c.name }))
              ]}
              placeholder="Select a category..."
            />
          </div>

          <div>
            <Select
              label="Bloom's Taxonomy Level"
              value={formData.bloom_level}
              onChange={(e) => setFormData({ ...formData, bloom_level: e.target.value })}
              options={BLOOM_LEVELS}
              required
            />
          </div>

          <div className="flex items-center">
            <label className="flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={formData.measurable}
                onChange={(e) => setFormData({ ...formData, measurable: e.target.checked })}
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Measurable Objective</span>
            </label>
          </div>

          <div className="flex items-center">
            <label className="flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={formData.is_template}
                onChange={(e) => setFormData({ ...formData, is_template: e.target.checked })}
                className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Template Objective</span>
            </label>
          </div>
        </div>

        {/* Tags */}
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Tags
          </label>
          <div className="flex flex-wrap gap-2 mb-2">
            {formData.tags.map((tag, index) => (
              <Badge key={index} variant="outline">
                {tag}
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-1 hover:text-red-600"
                >
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            ))}
          </div>
          <div className="flex gap-2">
            <Input
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              placeholder="Add a tag..."
              onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
            />
            <Button type="button" variant="outline" onClick={addTag}>
              <Plus className="h-4 w-4" />
            </Button>
          </div>
        </div>


        <div className="flex justify-end space-x-4 mt-6">
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => router.push('/objectives')}
          >
            Cancel
          </Button>
          <Button type="submit" loading={loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Objective' : 'Create Objective'}
          </Button>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/relationships/CourseBookManager.tsx
================
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/Button'
import { Modal } from '@/components/ui/Modal'
import { SearchBox } from '@/components/ui/SearchBox'
import { Table } from '@/components/ui/Table'
import { Badge } from '@/components/ui/Badge'
import { courseBookService } from '@/lib/services/relationships'
import { bookService } from '@/lib/supabase/books'
import { Book, Loader2 } from 'lucide-react'

interface CourseBookManagerProps {
  courseId: string
  onUpdate?: () => void
}

export function CourseBookManager({ courseId, onUpdate }: CourseBookManagerProps) {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedBooks, setSelectedBooks] = useState<string[]>([])
  const [courseBooks, setCourseBooks] = useState<any[]>([])
  const [availableBooks, setAvailableBooks] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [loadingBooks, setLoadingBooks] = useState(false)

  // Load course books
  const loadCourseBooks = async () => {
    try {
      const books = await courseBookService.getCourseBooksWithDetails(courseId)
      setCourseBooks(books || [])
    } catch (error) {
      console.error('Failed to load course books:', error)
    }
  }

  // Load available books with search and filters
  const loadAvailableBooks = useCallback(async (search = '') => {
    setLoadingBooks(true)
    try {
      // Use server-side search with limit for better performance
      const books = await bookService.getBooks({
        search: search.trim(),
        limit: 100 // Limit results for performance
      })
      // Filter out books already in the course
      const courseBooksIds = courseBooks.map(cb => cb.book_id)
      const available = books.filter(book => !courseBooksIds.includes(book.id))
      setAvailableBooks(available)
    } catch (error) {
      console.error('Failed to load available books:', error)
    } finally {
      setLoadingBooks(false)
    }
  }, [courseBooks])

  // Initial load
  useEffect(() => {
    loadCourseBooks()
  }, [courseId])

  // Open modal and load data
  const openModal = async () => {
    setIsModalOpen(true)
    setSelectedBooks([])
    setSearchQuery('')
    await loadAvailableBooks('')
  }

  // Debounced search handler
  useEffect(() => {
    if (!isModalOpen) return
    
    const timeoutId = setTimeout(() => {
      loadAvailableBooks(searchQuery)
    }, 300) // 300ms debounce

    return () => clearTimeout(timeoutId)
  }, [searchQuery, isModalOpen, loadAvailableBooks])

  // Add selected books to course
  const handleAddBooks = async () => {
    if (selectedBooks.length === 0) return

    setLoading(true)
    try {
      await courseBookService.bulkAddBooksToCourse(courseId, selectedBooks)
      setSelectedBooks([])
      await loadCourseBooks()
      onUpdate?.()
      setIsModalOpen(false)
    } catch (error) {
      console.error('Failed to add books:', error)
    } finally {
      setLoading(false)
    }
  }

  // Remove book from course
  const handleRemoveBook = async (bookId: string) => {
    if (!confirm('Are you sure you want to remove this book from the course?')) return

    try {
      await courseBookService.removeBookFromCourse(courseId, bookId)
      await loadCourseBooks()
      onUpdate?.()
    } catch (error) {
      console.error('Failed to remove book:', error)
    }
  }

  // Toggle book required status
  const handleToggleRequired = async (bookId: string, currentRequired: boolean) => {
    try {
      await courseBookService.updateCourseBook(courseId, bookId, {
        isRequired: !currentRequired
      })
      await loadCourseBooks()
    } catch (error) {
      console.error('Failed to update book:', error)
    }
  }

  // Toggle book selection
  const toggleBookSelection = (bookId: string) => {
    if (selectedBooks.includes(bookId)) {
      setSelectedBooks(selectedBooks.filter(id => id !== bookId))
    } else {
      setSelectedBooks([...selectedBooks, bookId])
    }
  }

  // No need for client-side filtering since we're using server-side search
  const filteredBooks = availableBooks
  
  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium">Course Books</h3>
          <Button onClick={openModal} size="sm">
            <Book className="h-4 w-4 mr-2" />
            Manage Books
          </Button>
        </div>

        {courseBooks.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-3">
            {courseBooks.map((courseBook) => (
              <div
                key={courseBook.id}
                className="border rounded-lg p-2 hover:shadow-md transition-shadow group relative"
              >
                {courseBook.book?.cover_image_url && (
                  <img
                    src={courseBook.book.cover_image_url}
                    alt={courseBook.book.title}
                    className="w-full h-24 object-cover rounded mb-2"
                  />
                )}
                <div className="space-y-1">
                  <h4 className="font-medium text-xs line-clamp-2" title={courseBook.book?.title}>
                    {courseBook.book?.title}
                  </h4>
                  {courseBook.book?.author && (
                    <p className="text-xs text-gray-600 dark:text-gray-400 line-clamp-1" title={courseBook.book.author}>
                      {courseBook.book.author}
                    </p>
                  )}
                  <div className="flex items-center justify-between">
                    <Badge
                      variant={courseBook.is_required ? 'default' : 'secondary'}
                      className="cursor-pointer text-xs px-1 py-0.5"
                      onClick={() => handleToggleRequired(courseBook.book_id, courseBook.is_required)}
                    >
                      {courseBook.is_required ? 'Req' : 'Opt'}
                    </Badge>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleRemoveBook(courseBook.book_id)}
                      className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-red-600 hover:text-red-700"
                    >
                      ×
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 dark:text-gray-400 text-center py-8">
            No books added to this course yet.
          </p>
        )}
      </div>

      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Add Books to Course"
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            value={searchQuery}
            onSearch={setSearchQuery}
            placeholder="Search books by title, author, or ISBN..."
          />

          {loadingBooks ? (
            <div className="flex justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : filteredBooks.length > 0 ? (
            <div className="max-h-96 overflow-y-auto">
              <Table
                responsive={false}
                size="sm"
                className="w-full"
                columns={[
                  {
                    key: 'select',
                    label: (
                      <input
                        type="checkbox"
                        checked={filteredBooks.length > 0 && filteredBooks.every(book => selectedBooks.includes(book.id))}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedBooks(filteredBooks.map(book => book.id))
                          } else {
                            setSelectedBooks([])
                          }
                        }}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                    ),
                    render: (book) => (
                      <input
                        type="checkbox"
                        checked={selectedBooks.includes(book.id)}
                        onChange={() => toggleBookSelection(book.id)}
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                    )
                  },
                  { 
                    key: 'title', 
                    label: 'Title',
                    render: (book) => (
                      <div className="max-w-xs">
                        <p className="font-medium truncate" title={book.title}>{book.title}</p>
                        {book.isbn && (
                          <p className="text-xs text-gray-500 truncate">ISBN: {book.isbn}</p>
                        )}
                      </div>
                    )
                  },
                  { 
                    key: 'author', 
                    label: 'Author',
                    render: (book) => (
                      <div className="max-w-32">
                        <span className="truncate block" title={book.author}>
                          {book.author || '-'}
                        </span>
                      </div>
                    )
                  },
                  {
                    key: 'category',
                    label: 'Category',
                    render: (book) => (
                      <div className="max-w-24">
                        <span className="truncate block" title={book.category?.name}>
                          {book.category?.name || '-'}
                        </span>
                      </div>
                    )
                  },
                  {
                    key: 'type',
                    label: 'Type',
                    render: (book) => (
                      <Badge variant="warning" className="text-xs whitespace-nowrap">
                        {book.content_type || 'text'}
                      </Badge>
                    )
                  }
                ]}
                data={filteredBooks}
              />
            </div>
          ) : (
            <p className="text-center py-8 text-gray-500 dark:text-gray-400">
              {searchQuery ? 'No books found matching your search.' : 'No available books to add.'}
            </p>
          )}

          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {selectedBooks.length} book{selectedBooks.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsModalOpen(false)}>
                Cancel
              </Button>
              <Button
                onClick={handleAddBooks}
                disabled={selectedBooks.length === 0 || loading}
                loading={loading}
              >
                Add Books
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </>
  )
}

================
File: src/components/relationships/CourseLessonManager.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { lessonService } from '@/lib/supabase/lessons';
import { bookService } from '@/lib/supabase/books';
import { vocabularyService } from '@/lib/supabase/vocabulary';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Modal } from '@/components/ui/Modal';
import { Spinner } from '@/components/ui/Spinner';
import { 
  Calendar, 
  Clock, 
  MapPin, 
  BookOpen,
  Languages,
  Target,
  Wrench,
  FileText,
  Plus,
  Edit,
  Trash2,
  ExternalLink
} from 'lucide-react';
import type { Lesson } from '@/types/schedule';
import type { Book } from '@/types/database';

interface CourseLessonManagerProps {
  courseId: string;
}

export function CourseLessonManager({ courseId }: CourseLessonManagerProps) {
  const router = useRouter();
  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedLesson, setSelectedLesson] = useState<Lesson | null>(null);
  const [showLessonModal, setShowLessonModal] = useState(false);
  const [availableBooks, setAvailableBooks] = useState<Book[]>([]);
  const [availableVocabGroups, setAvailableVocabGroups] = useState<any[]>([]);

  useEffect(() => {
    loadLessons();
    loadCourseContent();
  }, [courseId]);

  const loadLessons = async () => {
    try {
      setLoading(true);
      const data = await lessonService.getCourseLessons(courseId);
      setLessons(data);
    } catch (error) {
      console.error('Failed to load course lessons:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadCourseContent = async () => {
    try {
      // Load books and vocabulary groups that could be assigned to lessons
      const [books, vocabGroups] = await Promise.all([
        bookService.getBooks({ limit: 100 }),
        vocabularyService.getVocabularyGroups({})
      ]);
      setAvailableBooks(books);
      setAvailableVocabGroups(vocabGroups);
    } catch (error) {
      console.error('Failed to load course content:', error);
    }
  };

  const handleLessonClick = (lesson: Lesson) => {
    setSelectedLesson(lesson);
    setShowLessonModal(true);
  };

  const formatTime = (time: string) => {
    try {
      return new Date(`2000-01-01T${time}`).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
    } catch {
      return time;
    }
  };

  const formatDate = (date: string) => {
    try {
      return new Date(date).toLocaleDateString([], {
        weekday: 'short',
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    } catch {
      return date;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'cancelled': return 'danger';
      case 'scheduled': return 'info';
      default: return 'default';
    }
  };

  const addBookToLesson = async (lessonId: string, bookId: string) => {
    try {
      await lessonService.addBookToLesson(lessonId, bookId, {
        position: 0,
        is_required: true
      });
      await loadLessons();
    } catch (error) {
      console.error('Failed to add book to lesson:', error);
    }
  };

  const removeBookFromLesson = async (lessonId: string, bookId: string) => {
    try {
      await lessonService.removeBookFromLesson(lessonId, bookId);
      await loadLessons();
    } catch (error) {
      console.error('Failed to remove book from lesson:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center py-8">
        <Spinner size="lg" />
      </div>
    );
  }

  if (lessons.length === 0) {
    return (
      <div className="text-center py-12">
        <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
          No lessons yet
        </h3>
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Lessons will be automatically created when you add schedules to this course
        </p>
        <Button 
          className="mt-4" 
          variant="outline"
          onClick={() => router.push(`/courses/${courseId}?tab=schedule`)}
        >
          <Plus className="h-4 w-4 mr-2" />
          Go to Schedules
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium">Course Lessons</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {lessons.length} lesson{lessons.length !== 1 ? 's' : ''} from course schedules
          </p>
        </div>
      </div>

      <div className="grid gap-4">
        {lessons.map((lesson) => (
          <Card
            key={lesson.id}
            className="hover:shadow-md transition-shadow cursor-pointer"
            onClick={() => handleLessonClick(lesson)}
          >
            <Card.Content className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h4 className="font-medium text-lg">
                      {lesson.title || `Lesson ${lesson.lesson_number || ''}`}
                    </h4>
                    <Badge variant={getStatusColor(lesson.status)} size="sm">
                      {lesson.status}
                    </Badge>
                  </div>
                  
                  {lesson.description && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                      {lesson.description}
                    </p>
                  )}
                  
                  <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400 mb-3">
                    <div className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      <span>{formatDate(lesson.date)}</span>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      <span>{formatTime(lesson.start_time)} - {formatTime(lesson.end_time)}</span>
                    </div>
                    
                    {lesson.location && (
                      <div className="flex items-center gap-1">
                        <MapPin className="h-3 w-3" />
                        <span>{lesson.location}</span>
                      </div>
                    )}
                    
                    {lesson.schedule && (
                      <div className="flex items-center gap-1">
                        <span>Schedule: {lesson.schedule.name}</span>
                      </div>
                    )}
                  </div>

                  {/* Content indicators */}
                  <div className="flex flex-wrap gap-2">
                    {(lesson as any).lesson_books && (lesson as any).lesson_books.length > 0 && (
                      <Badge variant="outline" size="sm">
                        <BookOpen className="h-3 w-3 mr-1" />
                        {(lesson as any).lesson_books.length} book{(lesson as any).lesson_books.length !== 1 ? 's' : ''}
                      </Badge>
                    )}
                    {(lesson as any).lesson_vocabulary_groups && (lesson as any).lesson_vocabulary_groups.length > 0 && (
                      <Badge variant="outline" size="sm">
                        <Languages className="h-3 w-3 mr-1" />
                        {(lesson as any).lesson_vocabulary_groups.length} vocab group{(lesson as any).lesson_vocabulary_groups.length !== 1 ? 's' : ''}
                      </Badge>
                    )}
                    {(lesson as any).lesson_objectives && (lesson as any).lesson_objectives.length > 0 && (
                      <Badge variant="outline" size="sm">
                        <Target className="h-3 w-3 mr-1" />
                        {(lesson as any).lesson_objectives.length} objective{(lesson as any).lesson_objectives.length !== 1 ? 's' : ''}
                      </Badge>
                    )}
                    {(lesson as any).lesson_methods && (lesson as any).lesson_methods.length > 0 && (
                      <Badge variant="outline" size="sm">
                        <Wrench className="h-3 w-3 mr-1" />
                        {(lesson as any).lesson_methods.length} method{(lesson as any).lesson_methods.length !== 1 ? 's' : ''}
                      </Badge>
                    )}
                    {(lesson as any).lesson_tasks && (lesson as any).lesson_tasks.length > 0 && (
                      <Badge variant="outline" size="sm">
                        <FileText className="h-3 w-3 mr-1" />
                        {(lesson as any).lesson_tasks.length} task{(lesson as any).lesson_tasks.length !== 1 ? 's' : ''}
                      </Badge>
                    )}
                  </div>
                </div>
                
                <ExternalLink className="h-5 w-5 text-gray-400 flex-shrink-0 ml-4" />
              </div>
            </Card.Content>
          </Card>
        ))}
      </div>

      {/* Lesson Detail Modal */}
      <Modal
        isOpen={showLessonModal}
        onClose={() => setShowLessonModal(false)}
        title={selectedLesson?.title || `Lesson ${selectedLesson?.lesson_number || ''}`}
        size="lg"
      >
        {selectedLesson && (
          <div className="space-y-6">
            <div>
              <h4 className="font-medium mb-2">Lesson Details</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">Date:</span>
                  <span className="ml-2">{formatDate(selectedLesson.date)}</span>
                </div>
                <div>
                  <span className="text-gray-500">Time:</span>
                  <span className="ml-2">{formatTime(selectedLesson.start_time)} - {formatTime(selectedLesson.end_time)}</span>
                </div>
                <div>
                  <span className="text-gray-500">Status:</span>
                  <Badge variant={getStatusColor(selectedLesson.status)} size="sm" className="ml-2">
                    {selectedLesson.status}
                  </Badge>
                </div>
                {selectedLesson.location && (
                  <div>
                    <span className="text-gray-500">Location:</span>
                    <span className="ml-2">{selectedLesson.location}</span>
                  </div>
                )}
              </div>
              {selectedLesson.description && (
                <div className="mt-4">
                  <span className="text-gray-500">Description:</span>
                  <p className="mt-1">{selectedLesson.description}</p>
                </div>
              )}
            </div>

            {/* Content sections will be added here */}
            <div className="text-center py-8 text-gray-500">
              Lesson content management interface coming soon...
              <br />
              <span className="text-sm">This will allow you to assign books, vocabulary groups, objectives, methods, and tasks to lessons.</span>
            </div>
          </div>
        )}
        
        <div className="flex justify-end gap-2 mt-6">
          <Button variant="outline" onClick={() => setShowLessonModal(false)}>
            Close
          </Button>
          <Button onClick={() => router.push(`/lessons/${selectedLesson?.id}`)}>
            <Edit className="h-4 w-4 mr-2" />
            Edit Lesson
          </Button>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/relationships/CourseLessonsWithSchedules.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { scheduleService } from '@/lib/supabase/schedules';
import { lessonService } from '@/lib/supabase/lessons';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { 
  Calendar, 
  Clock, 
  MapPin, 
  Users,
  ChevronRight,
  Plus,
  ExternalLink
} from 'lucide-react';

interface CourseLessonsWithSchedulesProps {
  courseId: string;
}

export function CourseLessonsWithSchedules({ courseId }: CourseLessonsWithSchedulesProps) {
  const router = useRouter();
  const [schedules, setSchedules] = useState<any[]>([]);
  const [selectedSchedule, setSelectedSchedule] = useState<string | null>(null);
  const [lessons, setLessons] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [lessonsLoading, setLessonsLoading] = useState(false);

  useEffect(() => {
    loadSchedules();
  }, [courseId]);

  useEffect(() => {
    if (selectedSchedule) {
      loadLessonsForSchedule(selectedSchedule);
    } else {
      setLessons([]);
    }
  }, [selectedSchedule]);

  const loadSchedules = async () => {
    setLoading(true);
    try {
      const courseSchedules = await scheduleService.getSchedules({ course_id: courseId });
      setSchedules(courseSchedules);
      
      // Auto-select first schedule if available
      if (courseSchedules.length > 0) {
        setSelectedSchedule(courseSchedules[0].id);
      }
    } catch (error) {
      console.error('Failed to load schedules:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadLessonsForSchedule = async (scheduleId: string) => {
    setLessonsLoading(true);
    try {
      const scheduleLessons = await lessonService.getScheduleLessons(scheduleId);
      // Sort lessons by date and time
      scheduleLessons.sort((a, b) => {
        const dateCompare = new Date(a.date).getTime() - new Date(b.date).getTime();
        if (dateCompare !== 0) return dateCompare;
        return a.start_time.localeCompare(b.start_time);
      });
      setLessons(scheduleLessons);
    } catch (error) {
      console.error('Failed to load lessons:', error);
    } finally {
      setLessonsLoading(false);
    }
  };

  const formatTime = (time: string) => {
    try {
      return new Date(`2000-01-01T${time}`).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
    } catch {
      return time;
    }
  };

  const formatDate = (date: string) => {
    try {
      return new Date(date).toLocaleDateString([], {
        weekday: 'short',
        month: 'short',
        day: 'numeric'
      });
    } catch {
      return date;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'cancelled': return 'danger';
      default: return 'default';
    }
  };

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100 mx-auto"></div>
      </div>
    );
  }

  if (schedules.length === 0) {
    return (
      <div className="text-center py-16">
        <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
          No schedules yet
        </h3>
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Create a teaching schedule for this course to see lessons
        </p>
        <Button 
          className="mt-4" 
          size="sm"
          onClick={() => router.push(`/schedules/new?courseId=${courseId}`)}
        >
          <Plus className="h-4 w-4 mr-2" />
          Create Schedule
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Schedule Selector */}
      <div>
        <h3 className="text-lg font-medium mb-3">Select Schedule</h3>
        <div className="grid gap-3">
          {schedules.map((schedule) => (
            <div
              key={schedule.id}
              className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                selectedSchedule === schedule.id
                  ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
              }`}
              onClick={() => setSelectedSchedule(schedule.id)}
            >
              <div className="flex items-center gap-3">
                <input
                  type="radio"
                  checked={selectedSchedule === schedule.id}
                  onChange={() => setSelectedSchedule(schedule.id)}
                  className="text-blue-600"
                />
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-1">
                    <h5 className="font-medium">{schedule.name}</h5>
                    <Badge variant={schedule.is_active ? 'success' : 'secondary'} size="sm">
                      {schedule.is_active ? 'Active' : 'Inactive'}
                    </Badge>
                  </div>
                  
                  <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                    <div className="flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      <span>
                        {new Date(schedule.start_date).toLocaleDateString()} - 
                        {schedule.end_date ? new Date(schedule.end_date).toLocaleDateString() : 'Ongoing'}
                      </span>
                    </div>
                    
                    <div className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      <span>{formatTime(schedule.default_start_time)}</span>
                    </div>
                    
                    {schedule.location && (
                      <div className="flex items-center gap-1">
                        <MapPin className="h-3 w-3" />
                        <span>{schedule.location}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Lessons Display */}
      {selectedSchedule && (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-medium">
              Lessons from {schedules.find(s => s.id === selectedSchedule)?.name}
            </h3>
            {lessons.length > 0 && (
              <span className="text-sm text-gray-500">{lessons.length} lesson{lessons.length !== 1 ? 's' : ''}</span>
            )}
          </div>

          {lessonsLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900 dark:border-gray-100 mx-auto"></div>
            </div>
          ) : lessons.length === 0 ? (
            <div className="text-center py-8 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <Clock className="h-8 w-8 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-600 dark:text-gray-400">No lessons found for this schedule</p>
            </div>
          ) : (
            <div className="space-y-3">
              {lessons.map((lesson) => (
                <Card
                  key={lesson.id}
                  className="hover:shadow-md transition-shadow cursor-pointer"
                  onClick={() => router.push(`/lessons/${lesson.id}/edit`)}
                >
                  <Card.Content className="p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-2">
                          <h4 className="font-medium">
                            Lesson {lesson.lesson_number}: {lesson.topic}
                          </h4>
                          <Badge variant={getStatusColor(lesson.status)} size="sm">
                            {lesson.status}
                          </Badge>
                        </div>
                        
                        {lesson.description && (
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                            {lesson.description}
                          </p>
                        )}
                        
                        <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                          <div className="flex items-center gap-1">
                            <Calendar className="h-3 w-3" />
                            <span>{formatDate(lesson.date)}</span>
                          </div>
                          
                          <div className="flex items-center gap-1">
                            <Clock className="h-3 w-3" />
                            <span>{formatTime(lesson.start_time)} - {formatTime(lesson.end_time)}</span>
                          </div>
                          
                          {lesson.location && (
                            <div className="flex items-center gap-1">
                              <MapPin className="h-3 w-3" />
                              <span>{lesson.location}</span>
                            </div>
                          )}
                          
                          {lesson.max_students && (
                            <div className="flex items-center gap-1">
                              <Users className="h-3 w-3" />
                              <span>Max {lesson.max_students}</span>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <ExternalLink className="h-5 w-5 text-gray-400 flex-shrink-0 ml-4" />
                    </div>
                  </Card.Content>
                </Card>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

================
File: src/components/relationships/CourseMethodManager.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { methodService } from '@/lib/supabase/methods';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Modal } from '@/components/ui/Modal';
import { Input } from '@/components/ui/Input';
import { SearchBox } from '@/components/ui/SearchBox';
import { Spinner } from '@/components/ui/Spinner';
import { 
  Settings,
  Plus,
  Trash2,
  Search,
  ExternalLink
} from 'lucide-react';

interface CourseMethodManagerProps {
  courseId: string;
  onUpdate?: () => void;
}

export function CourseMethodManager({ courseId, onUpdate }: CourseMethodManagerProps) {
  const router = useRouter();
  const [methods, setMethods] = useState<any[]>([]);
  const [courseMethods, setCourseMethods] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [adding, setAdding] = useState(false);
  const [selectedMethods, setSelectedMethods] = useState<string[]>([]);

  useEffect(() => {
    loadData();
  }, [courseId]);

  const loadData = async () => {
    setLoading(true);
    try {
      const [allMethods, courseMethodRelations] = await Promise.all([
        methodService.getMethodsWithBelongings({}),
        methodService.getCourseMethods(courseId)
      ]);
      
      setMethods(allMethods);
      setCourseMethods(courseMethodRelations);
    } catch (error) {
      console.error('Failed to load methods:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredMethods = methods.filter(method => 
    !courseMethods.some(cm => cm.method.id === method.id) &&
    (method.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
     method.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
     method.tags?.some((tag: string) => tag.toLowerCase().includes(searchTerm.toLowerCase())))
  );

  const handleAddMethods = async () => {
    if (selectedMethods.length === 0) return;

    setAdding(true);
    try {
      for (const methodId of selectedMethods) {
        await methodService.addMethodToCourse(courseId, methodId, {
          position: courseMethods.length + selectedMethods.indexOf(methodId)
        });
      }
      
      setShowAddModal(false);
      setSelectedMethods([]);
      setSearchTerm('');
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to add methods to course:', error);
    } finally {
      setAdding(false);
    }
  };

  const handleRemoveMethod = async (relationId: string) => {
    try {
      await methodService.removeMethodFromCourse(relationId);
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to remove method from course:', error);
    }
  };

  const toggleMethodSelection = (methodId: string) => {
    setSelectedMethods(prev => 
      prev.includes(methodId)
        ? prev.filter(id => id !== methodId)
        : [...prev, methodId]
    );
  };

  if (loading) {
    return (
      <div className="flex justify-center py-8">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Course Methods
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {courseMethods.length} method{courseMethods.length !== 1 ? 's' : ''} assigned to this course
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Methods
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.push('/methods/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create New
          </Button>
        </div>
      </div>

      {/* Course Methods List */}
      {courseMethods.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <Settings className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
            No methods assigned
          </h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Add teaching methods to guide instructional approaches for this course
          </p>
          <Button 
            className="mt-4" 
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Methods
          </Button>
        </div>
      ) : (
        <div className="grid gap-4">
          {courseMethods
            .sort((a, b) => a.position - b.position)
            .map((courseMethod) => (
              <Card key={courseMethod.id} className="hover:shadow-md transition-shadow">
                <Card.Content className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h4 className="font-medium text-lg">
                          {courseMethod.method.name}
                        </h4>
                        {courseMethod.method.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: courseMethod.method.category.color ? `${courseMethod.method.category.color}20` : undefined,
                              color: courseMethod.method.category.color || undefined,
                            }}
                          >
                            {courseMethod.method.category.name}
                          </span>
                        )}
                      </div>
                      
                      {courseMethod.method.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {courseMethod.method.description}
                        </p>
                      )}
                      
                      {courseMethod.method.tags && courseMethod.method.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {courseMethod.method.tags.map((tag: string, index: number) => (
                            <Badge key={index} variant="secondary" size="sm">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-2 ml-4">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => router.push(`/methods/${courseMethod.method.id}/edit`)}
                        leftIcon={<ExternalLink className="h-4 w-4" />}
                      >
                        Edit
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveMethod(courseMethod.id)}
                        leftIcon={<Trash2 className="h-4 w-4" />}
                        className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                </Card.Content>
              </Card>
            ))}
        </div>
      )}

      {/* Add Methods Modal */}
      <Modal
        isOpen={showAddModal}
        onClose={() => {
          setShowAddModal(false);
          setSelectedMethods([]);
          setSearchTerm('');
        }}
        title="Add Methods to Course"
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            placeholder="Search methods..."
            onSearch={setSearchTerm}
            defaultValue={searchTerm}
          />

          <div className="max-h-96 overflow-y-auto space-y-2">
            {filteredMethods.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {searchTerm ? 'No methods found matching your search.' : 'All available methods are already added to this course.'}
              </div>
            ) : (
              filteredMethods.map((method) => (
                <div
                  key={method.id}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                    selectedMethods.includes(method.id)
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                  onClick={() => toggleMethodSelection(method.id)}
                >
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      checked={selectedMethods.includes(method.id)}
                      onChange={() => toggleMethodSelection(method.id)}
                      className="mt-1"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium">{method.name}</h5>
                        {method.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: method.category.color ? `${method.category.color}20` : undefined,
                              color: method.category.color || undefined,
                            }}
                          >
                            {method.category.name}
                          </span>
                        )}
                      </div>
                      {method.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          {method.description}
                        </p>
                      )}
                      {method.tags && method.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {method.tags.map((tag: string, index: number) => (
                            <Badge key={index} variant="outline" size="sm">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        <div className="flex justify-between items-center mt-6">
          <span className="text-sm text-gray-600">
            {selectedMethods.length} method{selectedMethods.length !== 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowAddModal(false);
                setSelectedMethods([]);
                setSearchTerm('');
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddMethods}
              disabled={selectedMethods.length === 0 || adding}
              leftIcon={adding ? <Spinner size="sm" /> : <Plus className="h-4 w-4" />}
            >
              {adding ? 'Adding...' : `Add ${selectedMethods.length} Method${selectedMethods.length !== 1 ? 's' : ''}`}
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/relationships/CourseObjectiveManager.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { objectiveService } from '@/lib/supabase/objectives';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Modal } from '@/components/ui/Modal';
import { Input } from '@/components/ui/Input';
import { SearchBox } from '@/components/ui/SearchBox';
import { Select } from '@/components/ui/Select';
import { Spinner } from '@/components/ui/Spinner';
import { 
  Target,
  Plus,
  Trash2,
  Search,
  ExternalLink,
  X
} from 'lucide-react';

interface CourseObjectiveManagerProps {
  courseId: string;
  onUpdate?: () => void;
}

export function CourseObjectiveManager({ courseId, onUpdate }: CourseObjectiveManagerProps) {
  const router = useRouter();
  const [objectives, setObjectives] = useState<any[]>([]);
  const [courseObjectives, setCourseObjectives] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [adding, setAdding] = useState(false);
  const [selectedObjectives, setSelectedObjectives] = useState<string[]>([]);

  useEffect(() => {
    loadData();
  }, [courseId]);

  const loadData = async () => {
    setLoading(true);
    try {
      const [allObjectives, courseObjectiveRelations] = await Promise.all([
        objectiveService.getObjectives({}),
        objectiveService.getCourseObjectives(courseId)
      ]);
      
      setObjectives(allObjectives);
      setCourseObjectives(courseObjectiveRelations);
    } catch (error) {
      console.error('Failed to load objectives:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredObjectives = objectives.filter(objective => 
    !courseObjectives.some(co => co.objective.id === objective.id) &&
    (objective.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
     objective.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
     objective.tags?.some((tag: string) => tag.toLowerCase().includes(searchTerm.toLowerCase())))
  );

  const handleAddObjectives = async () => {
    if (selectedObjectives.length === 0) return;

    setAdding(true);
    try {
      for (const objectiveId of selectedObjectives) {
        await objectiveService.addObjectiveToCourse(courseId, objectiveId, {
          position: courseObjectives.length + selectedObjectives.indexOf(objectiveId)
        });
      }
      
      setShowAddModal(false);
      setSelectedObjectives([]);
      setSearchTerm('');
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to add objectives to course:', error);
    } finally {
      setAdding(false);
    }
  };

  const handleRemoveObjective = async (relationId: string) => {
    try {
      await objectiveService.removeObjectiveFromCourse(relationId);
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to remove objective from course:', error);
    }
  };

  const toggleObjectiveSelection = (objectiveId: string) => {
    setSelectedObjectives(prev => 
      prev.includes(objectiveId)
        ? prev.filter(id => id !== objectiveId)
        : [...prev, objectiveId]
    );
  };

  if (loading) {
    return (
      <div className="flex justify-center py-8">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium flex items-center gap-2">
            <Target className="h-5 w-5" />
            Course Objectives
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {courseObjectives.length} objective{courseObjectives.length !== 1 ? 's' : ''} assigned to this course
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Objectives
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.push('/objectives/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create New
          </Button>
        </div>
      </div>

      {/* Course Objectives List */}
      {courseObjectives.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
            No objectives assigned
          </h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Add learning objectives to help students understand what they will achieve
          </p>
          <Button 
            className="mt-4" 
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Objectives
          </Button>
        </div>
      ) : (
        <div className="grid gap-4">
          {courseObjectives
            .sort((a, b) => a.position - b.position)
            .map((courseObjective) => (
              <Card key={courseObjective.id} className="hover:shadow-md transition-shadow">
                <Card.Content className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h4 className="font-medium text-lg">
                          {courseObjective.objective.title}
                        </h4>
                        {courseObjective.objective.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: courseObjective.objective.category.color ? `${courseObjective.objective.category.color}20` : undefined,
                              color: courseObjective.objective.category.color || undefined,
                            }}
                          >
                            {courseObjective.objective.category.name}
                          </span>
                        )}
                      </div>
                      
                      {courseObjective.objective.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {courseObjective.objective.description}
                        </p>
                      )}
                      
                      {courseObjective.objective.tags && courseObjective.objective.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2">
                          {courseObjective.objective.tags.map((tag: string, index: number) => (
                            <Badge key={index} variant="secondary" size="sm">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center gap-2 ml-4">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => router.push(`/objectives/${courseObjective.objective.id}/edit`)}
                        leftIcon={<ExternalLink className="h-4 w-4" />}
                      >
                        Edit
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveObjective(courseObjective.id)}
                        leftIcon={<Trash2 className="h-4 w-4" />}
                        className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                </Card.Content>
              </Card>
            ))}
        </div>
      )}

      {/* Add Objectives Modal */}
      <Modal
        isOpen={showAddModal}
        onClose={() => {
          setShowAddModal(false);
          setSelectedObjectives([]);
          setSearchTerm('');
        }}
        title="Add Objectives to Course"
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            placeholder="Search objectives..."
            onSearch={setSearchTerm}
            defaultValue={searchTerm}
          />

          <div className="max-h-96 overflow-y-auto space-y-2">
            {filteredObjectives.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {searchTerm ? 'No objectives found matching your search.' : 'All available objectives are already added to this course.'}
              </div>
            ) : (
              filteredObjectives.map((objective) => (
                <div
                  key={objective.id}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                    selectedObjectives.includes(objective.id)
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                  onClick={() => toggleObjectiveSelection(objective.id)}
                >
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      checked={selectedObjectives.includes(objective.id)}
                      onChange={() => toggleObjectiveSelection(objective.id)}
                      className="mt-1"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium">{objective.title}</h5>
                        {objective.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: objective.category.color ? `${objective.category.color}20` : undefined,
                              color: objective.category.color || undefined,
                            }}
                          >
                            {objective.category.name}
                          </span>
                        )}
                      </div>
                      {objective.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          {objective.description}
                        </p>
                      )}
                      {objective.tags && objective.tags.length > 0 && (
                        <div className="flex flex-wrap gap-1">
                          {objective.tags.map((tag: string, index: number) => (
                            <Badge key={index} variant="outline" size="sm">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        <div className="flex justify-between items-center mt-6">
          <span className="text-sm text-gray-600">
            {selectedObjectives.length} objective{selectedObjectives.length !== 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowAddModal(false);
                setSelectedObjectives([]);
                setSearchTerm('');
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddObjectives}
              disabled={selectedObjectives.length === 0 || adding}
              leftIcon={adding ? <Spinner size="sm" /> : <Plus className="h-4 w-4" />}
            >
              {adding ? 'Adding...' : `Add ${selectedObjectives.length} Objective${selectedObjectives.length !== 1 ? 's' : ''}`}
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/relationships/CourseScheduleList.tsx
================
'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { scheduleService } from '@/lib/supabase/schedules'
import { Button } from '@/components/ui/Button'
import { Badge } from '@/components/ui/Badge'
import { Card } from '@/components/ui/Card'
import { 
  Calendar, 
  Clock, 
  MapPin, 
  Users,
  ChevronRight,
  Plus 
} from 'lucide-react'

interface CourseScheduleListProps {
  courseId: string
}

export function CourseScheduleList({ courseId }: CourseScheduleListProps) {
  const router = useRouter()
  const [schedules, setSchedules] = useState<any[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadSchedules()
  }, [courseId])

  const loadSchedules = async () => {
    setLoading(true)
    try {
      const courseSchedules = await scheduleService.getSchedules({ course_id: courseId })
      setSchedules(courseSchedules)
    } catch (error) {
      console.error('Failed to load schedules:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatTime = (time: string) => {
    try {
      return new Date(`2000-01-01T${time}`).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    } catch {
      return time
    }
  }

  const formatDate = (date: string) => {
    try {
      return new Date(date).toLocaleDateString([], {
        weekday: 'short',
        month: 'short',
        day: 'numeric'
      })
    } catch {
      return date
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success'
      case 'cancelled': return 'danger'
      default: return 'default'
    }
  }

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 dark:border-gray-100 mx-auto"></div>
      </div>
    )
  }

  if (schedules.length === 0) {
    return (
      <div className="text-center py-16">
        <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-4" />
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
          No schedules yet
        </h3>
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Create a teaching schedule for this course
        </p>
        <Button 
          className="mt-4" 
          size="sm"
          onClick={() => router.push(`/schedules/new?courseId=${courseId}`)}
        >
          <Plus className="h-4 w-4 mr-2" />
          Create Schedule
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Schedule Summary */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium">Course Schedules</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {schedules.length} schedule{schedules.length !== 1 ? 's' : ''} for this course
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.push(`/schedules?courseId=${courseId}&action=attach`)}
          >
            <Plus className="h-4 w-4 mr-2" />
            Attach Existing
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.push(`/schedules/new?courseId=${courseId}`)}
          >
            <Plus className="h-4 w-4 mr-2" />
            New Schedule
          </Button>
        </div>
      </div>

      {/* Schedules List */}
      {schedules.length > 0 && (
        <div className="space-y-4">
          <h4 className="font-medium text-gray-900 dark:text-gray-100">Active Schedules</h4>
          <div className="grid gap-4">
            {schedules.map((schedule) => (
              <Card
                key={schedule.id}
                className="hover:shadow-md transition-shadow cursor-pointer"
                onClick={() => router.push(`/schedules/${schedule.id}`)}
              >
                <Card.Content className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h5 className="font-medium">{schedule.name}</h5>
                        <Badge variant={schedule.is_active ? 'success' : 'secondary'} size="sm">
                          {schedule.is_active ? 'Active' : 'Inactive'}
                        </Badge>
                      </div>
                      
                      {schedule.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {schedule.description}
                        </p>
                      )}
                      
                      <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          <span>
                            {new Date(schedule.start_date).toLocaleDateString()} - 
                            {schedule.end_date ? new Date(schedule.end_date).toLocaleDateString() : 'Ongoing'}
                          </span>
                        </div>
                        
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          <span>{formatTime(schedule.default_start_time)}</span>
                        </div>
                        
                        {schedule.location && (
                          <div className="flex items-center gap-1">
                            <MapPin className="h-3 w-3" />
                            <span>{schedule.location}</span>
                          </div>
                        )}
                        
                        {schedule.max_students && (
                          <div className="flex items-center gap-1">
                            <Users className="h-3 w-3" />
                            <span>Max {schedule.max_students}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <ChevronRight className="h-5 w-5 text-gray-400 flex-shrink-0 ml-4" />
                  </div>
                </Card.Content>
              </Card>
            ))}
          </div>
        </div>
      )}

    </div>
  )
}

================
File: src/components/relationships/CourseTaskManager.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { taskService } from '@/lib/supabase/tasks';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Modal } from '@/components/ui/Modal';
import { Input } from '@/components/ui/Input';
import { SearchBox } from '@/components/ui/SearchBox';
import { Spinner } from '@/components/ui/Spinner';
import { 
  FileText,
  Plus,
  Trash2,
  Search,
  ExternalLink
} from 'lucide-react';

interface CourseTaskManagerProps {
  courseId: string;
  onUpdate?: () => void;
}

export function CourseTaskManager({ courseId, onUpdate }: CourseTaskManagerProps) {
  const router = useRouter();
  const [tasks, setTasks] = useState<any[]>([]);
  const [courseTasks, setCourseTasks] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [adding, setAdding] = useState(false);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);

  useEffect(() => {
    loadData();
  }, [courseId]);

  const loadData = async () => {
    setLoading(true);
    try {
      const [allTasks, courseTaskRelations] = await Promise.all([
        taskService.getTasks({}),
        taskService.getCourseTasks(courseId)
      ]);
      
      setTasks(allTasks);
      setCourseTasks(courseTaskRelations);
    } catch (error) {
      console.error('Failed to load tasks:', error);
    } finally {
      setLoading(false);
    }
  };

  const filteredTasks = tasks.filter(task => 
    !courseTasks.some(ct => ct.task.id === task.id) &&
    (task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
     task.description?.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleAddTasks = async () => {
    if (selectedTasks.length === 0) return;

    setAdding(true);
    try {
      for (const taskId of selectedTasks) {
        await taskService.addTaskToCourse(courseId, taskId, {
          position: courseTasks.length + selectedTasks.indexOf(taskId)
        });
      }
      
      setShowAddModal(false);
      setSelectedTasks([]);
      setSearchTerm('');
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to add tasks to course:', error);
    } finally {
      setAdding(false);
    }
  };

  const handleRemoveTask = async (relationId: string) => {
    try {
      await taskService.removeTaskFromCourse(relationId);
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to remove task from course:', error);
    }
  };

  const toggleTaskSelection = (taskId: string) => {
    setSelectedTasks(prev => 
      prev.includes(taskId)
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority) {
      case 'urgent': return 'danger';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'secondary';
      default: return 'default';
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center py-8">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-medium flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Course Tasks
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            {courseTasks.length} task{courseTasks.length !== 1 ? 's' : ''} assigned to this course
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Tasks
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => router.push('/tasks/new')}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Create New
          </Button>
        </div>
      </div>

      {/* Course Tasks List */}
      {courseTasks.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 dark:bg-gray-800 rounded-lg">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
            No tasks assigned
          </h3>
          <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Add learning tasks and assignments for students to complete
          </p>
          <Button 
            className="mt-4" 
            size="sm"
            onClick={() => setShowAddModal(true)}
            leftIcon={<Plus className="h-4 w-4" />}
          >
            Add Tasks
          </Button>
        </div>
      ) : (
        <div className="grid gap-4">
          {courseTasks
            .sort((a, b) => a.position - b.position)
            .map((courseTask) => (
              <Card key={courseTask.id} className="hover:shadow-md transition-shadow">
                <Card.Content className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h4 className="font-medium text-lg">
                          {courseTask.task.title}
                        </h4>
                        {courseTask.task.priority && (
                          <Badge variant={getPriorityColor(courseTask.task.priority)} size="sm">
                            {courseTask.task.priority}
                          </Badge>
                        )}
                        {courseTask.task.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: courseTask.task.category.color ? `${courseTask.task.category.color}20` : undefined,
                              color: courseTask.task.category.color || undefined,
                            }}
                          >
                            {courseTask.task.category.name}
                          </span>
                        )}
                      </div>
                      
                      {courseTask.task.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {courseTask.task.description}
                        </p>
                      )}
                      
                      <div className="flex items-center gap-4">
                        {courseTask.task.points && (
                          <span className="text-sm text-gray-600 dark:text-gray-400">
                            Points: {courseTask.task.points}
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2 ml-4">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => router.push(`/tasks/${courseTask.task.id}/edit`)}
                        leftIcon={<ExternalLink className="h-4 w-4" />}
                      >
                        View
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveTask(courseTask.id)}
                        leftIcon={<Trash2 className="h-4 w-4" />}
                        className="text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20"
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                </Card.Content>
              </Card>
            ))}
        </div>
      )}

      {/* Add Tasks Modal */}
      <Modal
        isOpen={showAddModal}
        onClose={() => {
          setShowAddModal(false);
          setSelectedTasks([]);
          setSearchTerm('');
        }}
        title="Add Tasks to Course"
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            placeholder="Search tasks..."
            onSearch={setSearchTerm}
            defaultValue={searchTerm}
          />

          <div className="max-h-96 overflow-y-auto space-y-2">
            {filteredTasks.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {searchTerm ? 'No tasks found matching your search.' : 'All available tasks are already added to this course.'}
              </div>
            ) : (
              filteredTasks.map((task) => (
                <div
                  key={task.id}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                    selectedTasks.includes(task.id)
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                  }`}
                  onClick={() => toggleTaskSelection(task.id)}
                >
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      checked={selectedTasks.includes(task.id)}
                      onChange={() => toggleTaskSelection(task.id)}
                      className="mt-1"
                    />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h5 className="font-medium">{task.title}</h5>
                        {task.priority && (
                          <Badge variant={getPriorityColor(task.priority)} size="sm">
                            {task.priority}
                          </Badge>
                        )}
                        {task.category && (
                          <span
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: task.category.color ? `${task.category.color}20` : undefined,
                              color: task.category.color || undefined,
                            }}
                          >
                            {task.category.name}
                          </span>
                        )}
                      </div>
                      {task.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          {task.description}
                        </p>
                      )}
                      {task.points && (
                        <span className="text-sm text-gray-600 dark:text-gray-400">
                          Points: {task.points}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        <div className="flex justify-between items-center mt-6">
          <span className="text-sm text-gray-600">
            {selectedTasks.length} task{selectedTasks.length !== 1 ? 's' : ''} selected
          </span>
          <div className="flex gap-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowAddModal(false);
                setSelectedTasks([]);
                setSearchTerm('');
              }}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddTasks}
              disabled={selectedTasks.length === 0 || adding}
              leftIcon={adding ? <Spinner size="sm" /> : <Plus className="h-4 w-4" />}
            >
              {adding ? 'Adding...' : `Add ${selectedTasks.length} Task${selectedTasks.length !== 1 ? 's' : ''}`}
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
}

================
File: src/components/relationships/CourseVocabularyManager.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/Button'
import { Modal } from '@/components/ui/Modal'
import { SearchBox } from '@/components/ui/SearchBox'
import { Badge } from '@/components/ui/Badge'
import { courseVocabularyService } from '@/lib/services/relationships'
import { vocabularyService } from '@/lib/supabase/vocabulary'
import { BookOpen, Languages, Loader2, X } from 'lucide-react'

interface CourseVocabularyManagerProps {
  courseId: string
  onUpdate?: () => void
}

export function CourseVocabularyManager({ courseId, onUpdate }: CourseVocabularyManagerProps) {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedGroups, setSelectedGroups] = useState<string[]>([])
  const [courseGroups, setCourseGroups] = useState<any[]>([])
  const [availableGroups, setAvailableGroups] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [loadingGroups, setLoadingGroups] = useState(false)
  const [stats, setStats] = useState<any>(null)

  // Load course vocabulary groups
  const loadCourseGroups = async () => {
    try {
      const groups = await courseVocabularyService.getCourseVocabularyGroups(courseId)
      setCourseGroups(groups || [])
      
      // Load stats
      const vocabStats = await courseVocabularyService.getCourseVocabularyStats(courseId)
      setStats(vocabStats)
    } catch (error) {
      console.error('Failed to load course vocabulary groups:', error)
    }
  }

  // Load available vocabulary groups
  const loadAvailableGroups = async () => {
    setLoadingGroups(true)
    try {
      const groups = await vocabularyService.getVocabularyGroups()
      // Filter out groups already in the course
      const courseGroupIds = courseGroups.map(cg => cg.vocabulary_group_id)
      const available = groups.filter(group => !courseGroupIds.includes(group.id))
      setAvailableGroups(available)
    } catch (error) {
      console.error('Failed to load available groups:', error)
    } finally {
      setLoadingGroups(false)
    }
  }

  useEffect(() => {
    loadCourseGroups()
  }, [courseId])

  // Open modal and load data
  const openModal = async () => {
    setIsModalOpen(true)
    setSelectedGroups([])
    setSearchQuery('')
    await loadAvailableGroups()
  }

  // Add selected groups to course
  const handleAddGroups = async () => {
    if (selectedGroups.length === 0) return

    setLoading(true)
    try {
      await courseVocabularyService.bulkAddVocabularyGroupsToCourse(courseId, selectedGroups)
      setSelectedGroups([])
      await loadCourseGroups()
      onUpdate?.()
      setIsModalOpen(false)
    } catch (error) {
      console.error('Failed to add vocabulary groups:', error)
    } finally {
      setLoading(false)
    }
  }

  // Remove group from course
  const handleRemoveGroup = async (groupId: string) => {
    if (!confirm('Are you sure you want to remove this vocabulary group from the course?')) return

    try {
      await courseVocabularyService.removeVocabularyGroupFromCourse(courseId, groupId)
      await loadCourseGroups()
      onUpdate?.()
    } catch (error) {
      console.error('Failed to remove vocabulary group:', error)
    }
  }

  // Toggle group selection
  const toggleGroupSelection = (groupId: string) => {
    if (selectedGroups.includes(groupId)) {
      setSelectedGroups(selectedGroups.filter(id => id !== groupId))
    } else {
      setSelectedGroups([...selectedGroups, groupId])
    }
  }

  // Filter available groups based on search
  const filteredGroups = availableGroups.filter(group =>
    group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    group.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    group.language?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    group.target_language?.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'success'
      case 'intermediate': return 'warning'
      case 'advanced': return 'danger'
      case 'expert': return 'secondary'
      default: return 'default'
    }
  }

  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-lg font-medium">Vocabulary Groups</h3>
            {stats && stats.totalWords > 0 && (
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                Total words: {stats.totalWords}
              </p>
            )}
          </div>
          <Button onClick={openModal} size="sm">
            <Languages className="h-4 w-4 mr-2" />
            Manage Vocabulary
          </Button>
        </div>

        {courseGroups.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3">
            {courseGroups.map((courseGroup) => {
              const group = courseGroup.vocabulary_group
              const wordCount = group?.vocabulary_group_items?.length || 0
              
              return (
                <div
                  key={courseGroup.id}
                  className="border rounded-lg p-3 hover:shadow-md transition-shadow group relative"
                >
                  <div className="space-y-2">
                    <div className="flex items-start justify-between">
                      <h4 className="font-medium text-sm line-clamp-2" title={group?.name}>
                        {group?.name}
                      </h4>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveGroup(courseGroup.vocabulary_group_id)}
                        className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-red-600 hover:text-red-700"
                      >
                        ×
                      </Button>
                    </div>
                    
                    <div className="flex items-center gap-1 flex-wrap">
                      <Badge variant={getDifficultyColor(group?.difficulty)} className="text-xs px-1 py-0.5">
                        {group?.difficulty}
                      </Badge>
                      {group?.language && group?.target_language && (
                        <Badge variant="outline" className="text-xs px-1 py-0.5">
                          {group.language}→{group.target_language}
                        </Badge>
                      )}
                    </div>
                    
                    {group?.description && (
                      <p className="text-xs text-gray-600 dark:text-gray-400 line-clamp-2" title={group.description}>
                        {group.description}
                      </p>
                    )}
                    
                    <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <span>{wordCount} word{wordCount !== 1 ? 's' : ''}</span>
                      {group?.tags && group.tags.length > 0 && (
                        <span>{group.tags.length} tag{group.tags.length !== 1 ? 's' : ''}</span>
                      )}
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        ) : (
          <p className="text-gray-500 dark:text-gray-400 text-center py-8">
            No vocabulary groups added to this course yet.
          </p>
        )}

        {stats && stats.totalWords > 0 && (
          <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <h4 className="font-medium mb-3">Vocabulary Statistics</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p className="text-gray-600 dark:text-gray-400 mb-2">By Difficulty:</p>
                <ul className="space-y-1">
                  {Object.entries(stats.byDifficulty).map(([level, count]) => (
                    <li key={level} className="flex justify-between">
                      <span className="capitalize text-gray-700 dark:text-gray-300">{level}:</span>
                      <span className="font-medium">{count as number}</span>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400 mb-2">By Part of Speech:</p>
                <ul className="space-y-1">
                  {Object.entries(stats.byPartOfSpeech).slice(0, 5).map(([pos, count]) => (
                    <li key={pos} className="flex justify-between">
                      <span className="capitalize text-gray-700 dark:text-gray-300">{pos}:</span>
                      <span className="font-medium">{count as number}</span>
                    </li>
                  ))}
                  {Object.keys(stats.byPartOfSpeech).length > 5 && (
                    <li className="text-gray-500 dark:text-gray-400 text-xs">
                      +{Object.keys(stats.byPartOfSpeech).length - 5} more
                    </li>
                  )}
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>

      <Modal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        title="Add Vocabulary Groups"
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            value={searchQuery}
            onSearch={setSearchQuery}
            placeholder="Search vocabulary groups by name, description, or language..."
          />

          {loadingGroups ? (
            <div className="flex justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
            </div>
          ) : filteredGroups.length > 0 ? (
            <div className="max-h-96 overflow-y-auto space-y-2">
              {filteredGroups.map((group) => (
                <div
                  key={group.id}
                  className={`p-3 border rounded-lg cursor-pointer transition-all ${
                    selectedGroups.includes(group.id)
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                  }`}
                  onClick={() => toggleGroupSelection(group.id)}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3 flex-1">
                      <input
                        type="checkbox"
                        checked={selectedGroups.includes(group.id)}
                        onChange={() => {}}
                        className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                        onClick={(e) => e.stopPropagation()}
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h5 className="font-medium">{group.name}</h5>
                          <Badge variant={getDifficultyColor(group.difficulty)} size="sm">
                            {group.difficulty}
                          </Badge>
                          {group.language && group.target_language && (
                            <Badge variant="outline" size="sm">
                              {group.language} → {group.target_language}
                            </Badge>
                          )}
                        </div>
                        {group.description && (
                          <p className="text-sm text-gray-600 dark:text-gray-400">{group.description}</p>
                        )}
                        <div className="flex items-center gap-4 mt-1 text-xs text-gray-500 dark:text-gray-400">
                          <span>{group.vocabulary_group_items?.length || 0} words</span>
                          {group.tags && group.tags.length > 0 && (
                            <span>{group.tags.length} tags</span>
                          )}
                        </div>
                      </div>
                    </div>
                    <BookOpen className="h-4 w-4 text-gray-400 mt-1" />
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center py-8 text-gray-500 dark:text-gray-400">
              {searchQuery ? 'No vocabulary groups found matching your search.' : 'No available vocabulary groups to add.'}
            </p>
          )}

          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {selectedGroups.length} group{selectedGroups.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setIsModalOpen(false)}>
                Cancel
              </Button>
              <Button
                onClick={handleAddGroups}
                disabled={selectedGroups.length === 0 || loading}
                loading={loading}
              >
                Add Groups
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </>
  )
}

================
File: src/components/relationships/index.ts
================
// Export all relationship components
export { CourseBookManager } from './CourseBookManager'
export { CourseVocabularyManager } from './CourseVocabularyManager'
export { LessonContentManager } from './LessonContentManager'
export { CourseScheduleList } from './CourseScheduleList'
export { CourseLessonManager } from './CourseLessonManager'
export { CourseLessonsWithSchedules } from './CourseLessonsWithSchedules'
export { CourseObjectiveManager } from './CourseObjectiveManager'
export { CourseMethodManager } from './CourseMethodManager'
export { CourseTaskManager } from './CourseTaskManager'

================
File: src/components/relationships/LessonBookManager.tsx
================
'use client'

import { useState, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/Button'
import { Modal } from '@/components/ui/Modal'
import { SearchBox } from '@/components/ui/SearchBox'
import { Table } from '@/components/ui/Table'
import { Badge } from '@/components/ui/Badge'
import { Input } from '@/components/ui/Input'
import { lessonService } from '@/lib/supabase/lessons'
import { bookService } from '@/lib/supabase/books'
import { courseBookService } from '@/lib/services/relationships'
import { Book, Loader2 } from 'lucide-react'

interface LessonBookManagerProps {
  lessonId: string
  courseId?: string
  onUpdate?: () => void
}

export function LessonBookManager({ lessonId, courseId, onUpdate }: LessonBookManagerProps) {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedBooks, setSelectedBooks] = useState<string[]>([])
  const [lessonBooks, setLessonBooks] = useState<any[]>([])
  const [availableBooks, setAvailableBooks] = useState<any[]>([])
  const [loading, setLoading] = useState(false)
  const [loadingBooks, setLoadingBooks] = useState(false)

  // Load lesson books
  const loadLessonBooks = async () => {
    try {
      const lesson = await lessonService.getLesson(lessonId)
      setLessonBooks(lesson?.lesson_books || [])
    } catch (error) {
      console.error('Failed to load lesson books:', error)
    }
  }

  // Load available books with search and filters
  const loadAvailableBooks = useCallback(async (search = '') => {
    setLoadingBooks(true)
    try {
      let books: any[] = []
      
      if (courseId) {
        // Get books from the course if courseId is provided
        const courseBooks = await courseBookService.getCourseBooksWithDetails(courseId)
        books = courseBooks?.map(cb => cb.book) || []
      } else {
        // Get all books if no courseId
        books = await bookService.getBooks({
          search: search.trim(),
          limit: 100
        })
      }
      
      // Filter out books already in the lesson
      const lessonBookIds = lessonBooks.map(lb => lb.book_id)
      const available = books.filter(book => !lessonBookIds.includes(book.id))
      setAvailableBooks(available)
    } catch (error) {
      console.error('Failed to load available books:', error)
    } finally {
      setLoadingBooks(false)
    }
  }, [lessonBooks, courseId])

  // Initial load
  useEffect(() => {
    loadLessonBooks()
  }, [lessonId])

  // Open modal and load data
  const openModal = async () => {
    setIsModalOpen(true)
    setSelectedBooks([])
    setSearchQuery('')
    await loadAvailableBooks('')
  }

  // Debounced search handler
  useEffect(() => {
    if (!isModalOpen) return
    
    const timeoutId = setTimeout(() => {
      loadAvailableBooks(searchQuery)
    }, 300) // 300ms debounce

    return () => clearTimeout(timeoutId)
  }, [searchQuery, isModalOpen, loadAvailableBooks])

  // Add selected books to lesson
  const handleAddBooks = async () => {
    if (selectedBooks.length === 0) return

    setLoading(true)
    try {
      for (const bookId of selectedBooks) {
        await lessonService.addBookToLesson(lessonId, bookId)
      }
      setSelectedBooks([])
      await loadLessonBooks()
      onUpdate?.()
      setIsModalOpen(false)
    } catch (error) {
      console.error('Failed to add books:', error)
    } finally {
      setLoading(false)
    }
  }

  // Remove book from lesson
  const handleRemoveBook = async (bookId: string) => {
    if (!confirm('Are you sure you want to remove this book from the lesson?')) return

    try {
      await lessonService.removeBookFromLesson(lessonId, bookId)
      await loadLessonBooks()
      onUpdate?.()
    } catch (error) {
      console.error('Failed to remove book:', error)
    }
  }

  // Toggle book selection
  const toggleBookSelection = (bookId: string) => {
    if (selectedBooks.includes(bookId)) {
      setSelectedBooks(selectedBooks.filter(id => id !== bookId))
    } else {
      setSelectedBooks([...selectedBooks, bookId])
    }
  }

  const filteredBooks = availableBooks
  
  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium">Lesson Books</h3>
          <Button onClick={openModal} size="sm">
            <Book className="h-4 w-4 mr-2" />
            Manage Books
          </Button>
        </div>

        {lessonBooks.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-3">
            {lessonBooks.map((lessonBook) => (
              <div
                key={lessonBook.id}
                className="border rounded-lg p-2 hover:shadow-md transition-shadow group relative"
              >
                {lessonBook.book?.cover_image_url && (
                  <img
                    src={lessonBook.book.cover_image_url}
                    alt={lessonBook.book.title}
                    className="w-full h-24 object-cover rounded mb-2"
                  />
                )}
                <div className="space-y-1">
                  <h4 className="font-medium text-xs line-clamp-2" title={lessonBook.book?.title}>
                    {lessonBook.book?.title}
                  </h4>
                  {lessonBook.book?.author && (
                    <p className="text-xs text-gray-600 dark:text-gray-400 line-clamp-1" title={lessonBook.book.author}>
                      {lessonBook.book.author}
                    </p>
                  )}
                  {(lessonBook.pages_from || lessonBook.pages_to) && (
                    <p className="text-xs text-blue-600">
                      Pages: {lessonBook.pages_from || ''}{lessonBook.pages_from && lessonBook.pages_to ? '-' : ''}{lessonBook.pages_to || ''}
                    </p>
                  )}
                  <div className="flex items-center justify-end">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleRemoveBook(lessonBook.book_id)}
                      className="opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 p-0 text-red-600 hover:text-red-700"
                    >
                      ×
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className="text-gray-500 dark:text-gray-400 text-center py-8">
            No books added to this lesson yet.
          </p>
        )}
      </div>

      <Modal
        title="Add Books to Lesson"
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            value={searchQuery}
            onChange={setSearchQuery}
            placeholder={courseId ? "Search course books..." : "Search all books..."}
          />

          {loadingBooks ? (
            <div className="flex justify-center py-8">
              <Loader2 className="h-6 w-6 animate-spin" />
            </div>
          ) : filteredBooks.length > 0 ? (
            <div className="max-h-96 overflow-y-auto">
              <Table>
                <Table.Header>
                  <Table.Row>
                    <Table.HeaderCell className="w-12">
                      <input
                        type="checkbox"
                        checked={selectedBooks.length === filteredBooks.length && filteredBooks.length > 0}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedBooks(filteredBooks.map(book => book.id))
                          } else {
                            setSelectedBooks([])
                          }
                        }}
                      />
                    </Table.HeaderCell>
                    <Table.HeaderCell>Book</Table.HeaderCell>
                    <Table.HeaderCell>Author</Table.HeaderCell>
                    <Table.HeaderCell>Category</Table.HeaderCell>
                    <Table.HeaderCell>Type</Table.HeaderCell>
                  </Table.Row>
                </Table.Header>
                <Table.Body>
                  {filteredBooks.map((book) => (
                    <Table.Row key={book.id}>
                      <Table.Cell>
                        <input
                          type="checkbox"
                          checked={selectedBooks.includes(book.id)}
                          onChange={() => toggleBookSelection(book.id)}
                        />
                      </Table.Cell>
                      <Table.Cell>
                        <div className="flex items-center space-x-3">
                          {book.cover_image_url && (
                            <img
                              src={book.cover_image_url}
                              alt={book.title}
                              className="w-8 h-8 object-cover rounded"
                            />
                          )}
                          <span className="font-medium">{book.title}</span>
                        </div>
                      </Table.Cell>
                      <Table.Cell>{book.author || '-'}</Table.Cell>
                      <Table.Cell>
                        {book.category && (
                          <Badge variant="outline">{book.category}</Badge>
                        )}
                      </Table.Cell>
                      <Table.Cell>
                        {book.content_type && (
                          <Badge variant="secondary">{book.content_type}</Badge>
                        )}
                      </Table.Cell>
                    </Table.Row>
                  ))}
                </Table.Body>
              </Table>
            </div>
          ) : (
            <p className="text-center py-8 text-gray-500">
              {courseId ? "No course books available to add" : "No books found"}
            </p>
          )}

          <div className="flex justify-end space-x-2 pt-4 border-t">
            <Button variant="outline" onClick={() => setIsModalOpen(false)}>
              Cancel
            </Button>
            <Button
              onClick={handleAddBooks}
              disabled={selectedBooks.length === 0}
              loading={loading}
            >
              Add {selectedBooks.length} Book{selectedBooks.length !== 1 ? 's' : ''}
            </Button>
          </div>
        </div>
      </Modal>
    </>
  )
}

================
File: src/components/relationships/LessonContentManager.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/Tabs'
import { Button } from '@/components/ui/Button'
import { Badge } from '@/components/ui/Badge'
import { Modal } from '@/components/ui/Modal'
import { SearchBox } from '@/components/ui/SearchBox'
import { lessonRelationshipService } from '@/lib/services/relationships'
import { objectiveService } from '@/lib/supabase/objectives'
import { methodService } from '@/lib/supabase/methods'
import { taskService } from '@/lib/supabase/tasks'
import { bookService } from '@/lib/supabase/books'
import { vocabularyService } from '@/lib/supabase/vocabulary'
import { 
  Target, 
  Lightbulb, 
  ClipboardList, 
  Book, 
  Languages,
  Plus,
  X,
  Clock,
  Users,
  Calendar,
  Loader2
} from 'lucide-react'

interface LessonContentManagerProps {
  lessonId: string
  onUpdate?: () => void
}

interface TabContent {
  objectives: any[]
  methods: any[]
  tasks: any[]
  books: any[]
  vocabulary: any[]
}

export function LessonContentManager({ lessonId, onUpdate }: LessonContentManagerProps) {
  const [activeTab, setActiveTab] = useState('objectives')
  const [content, setContent] = useState<TabContent>({
    objectives: [],
    methods: [],
    tasks: [],
    books: [],
    vocabulary: []
  })
  const [loading, setLoading] = useState(true)
  const [modalOpen, setModalOpen] = useState(false)
  const [modalType, setModalType] = useState<keyof TabContent>('objectives')
  const [searchQuery, setSearchQuery] = useState('')
  const [availableItems, setAvailableItems] = useState<any[]>([])
  const [selectedItems, setSelectedItems] = useState<string[]>([])
  const [loadingModal, setLoadingModal] = useState(false)
  const [savingItems, setSavingItems] = useState(false)

  // Load all lesson content
  const loadLessonContent = async () => {
    setLoading(true)
    try {
      const lessonContent = await lessonRelationshipService.getLessonContent(lessonId)
      setContent(lessonContent)
    } catch (error) {
      console.error('Failed to load lesson content:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadLessonContent()
  }, [lessonId])

  // Load available items based on type
  const loadAvailableItems = async (type: keyof TabContent) => {
    setLoadingModal(true)
    try {
      let items: any[] = []
      const currentIds = content[type].map(item => {
        switch (type) {
          case 'objectives': return item.objective_id
          case 'methods': return item.method_id
          case 'tasks': return item.task_id
          case 'books': return item.book_id
          case 'vocabulary': return item.vocabulary_id
          default: return null
        }
      }).filter(Boolean)

      switch (type) {
        case 'objectives':
          const objectives = await objectiveService.getObjectives()
          items = objectives.filter(obj => !currentIds.includes(obj.id))
          break
        case 'methods':
          const methods = await methodService.getMethods()
          items = methods.filter(method => !currentIds.includes(method.id))
          break
        case 'tasks':
          const tasks = await taskService.getTasks()
          items = tasks.filter(task => !currentIds.includes(task.id))
          break
        case 'books':
          const books = await bookService.getBooks()
          items = books.filter(book => !currentIds.includes(book.id))
          break
        case 'vocabulary':
          const vocabulary = await vocabularyService.getVocabulary()
          items = vocabulary.filter(vocab => !currentIds.includes(vocab.id))
          break
      }

      setAvailableItems(items)
    } catch (error) {
      console.error(`Failed to load available ${type}:`, error)
    } finally {
      setLoadingModal(false)
    }
  }

  // Handle opening add modal
  const openAddModal = async (type: keyof TabContent) => {
    setModalType(type)
    setModalOpen(true)
    setSearchQuery('')
    setSelectedItems([])
    await loadAvailableItems(type)
  }

  // Handle removing items
  const handleRemove = async (type: keyof TabContent, itemId: string) => {
    if (!confirm(`Are you sure you want to remove this ${type.slice(0, -1)}?`)) return

    try {
      switch (type) {
        case 'objectives':
          await lessonRelationshipService.removeObjectiveFromLesson(lessonId, itemId)
          break
        case 'methods':
          await lessonRelationshipService.removeMethodFromLesson(lessonId, itemId)
          break
        case 'tasks':
          await lessonRelationshipService.removeTaskFromLesson(lessonId, itemId)
          break
        case 'books':
          await lessonRelationshipService.removeBookFromLesson(lessonId, itemId)
          break
        case 'vocabulary':
          await lessonRelationshipService.removeVocabularyFromLesson(lessonId, itemId)
          break
      }
      await loadLessonContent()
      onUpdate?.()
    } catch (error) {
      console.error(`Failed to remove ${type}:`, error)
    }
  }

  // Handle adding selected items
  const handleAddItems = async () => {
    if (selectedItems.length === 0) return

    setSavingItems(true)
    try {
      switch (modalType) {
        case 'objectives':
          await lessonRelationshipService.bulkAddObjectivesToLesson(lessonId, selectedItems)
          break
        case 'methods':
          await lessonRelationshipService.bulkAddMethodsToLesson(
            lessonId,
            selectedItems.map(id => ({ methodId: id }))
          )
          break
        case 'tasks':
          await lessonRelationshipService.bulkAddTasksToLesson(
            lessonId,
            selectedItems.map(id => ({ taskId: id }))
          )
          break
        case 'books':
          for (const bookId of selectedItems) {
            await lessonRelationshipService.addBookToLesson(lessonId, bookId)
          }
          break
        case 'vocabulary':
          for (const vocabId of selectedItems) {
            await lessonRelationshipService.addVocabularyToLesson(lessonId, vocabId)
          }
          break
      }
      await loadLessonContent()
      onUpdate?.()
      setModalOpen(false)
    } catch (error) {
      console.error(`Failed to add ${modalType}:`, error)
    } finally {
      setSavingItems(false)
    }
  }

  // Toggle item selection
  const toggleItemSelection = (itemId: string) => {
    if (selectedItems.includes(itemId)) {
      setSelectedItems(selectedItems.filter(id => id !== itemId))
    } else {
      setSelectedItems([...selectedItems, itemId])
    }
  }

  // Filter items based on search
  const getFilteredItems = () => {
    if (!searchQuery) return availableItems

    return availableItems.filter(item => {
      const searchLower = searchQuery.toLowerCase()
      switch (modalType) {
        case 'objectives':
          return item.title?.toLowerCase().includes(searchLower) ||
                 item.description?.toLowerCase().includes(searchLower)
        case 'methods':
          return item.name?.toLowerCase().includes(searchLower) ||
                 item.description?.toLowerCase().includes(searchLower)
        case 'tasks':
          return item.title?.toLowerCase().includes(searchLower) ||
                 item.description?.toLowerCase().includes(searchLower)
        case 'books':
          return item.title?.toLowerCase().includes(searchLower) ||
                 item.author?.toLowerCase().includes(searchLower) ||
                 item.isbn?.toLowerCase().includes(searchLower)
        case 'vocabulary':
          return item.word?.toLowerCase().includes(searchLower) ||
                 item.translation?.toLowerCase().includes(searchLower)
        default:
          return true
      }
    })
  }

  const tabs = [
    {
      key: 'objectives',
      label: 'Objectives',
      icon: <Target className="h-4 w-4" />,
      count: content.objectives.length
    },
    {
      key: 'methods',
      label: 'Methods',
      icon: <Lightbulb className="h-4 w-4" />,
      count: content.methods.length
    },
    {
      key: 'tasks',
      label: 'Tasks',
      icon: <ClipboardList className="h-4 w-4" />,
      count: content.tasks.length
    },
    {
      key: 'books',
      label: 'Books',
      icon: <Book className="h-4 w-4" />,
      count: content.books.length
    },
    {
      key: 'vocabulary',
      label: 'Vocabulary',
      icon: <Languages className="h-4 w-4" />,
      count: content.vocabulary.length
    }
  ]

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex justify-center py-8">
          <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
        </div>
      )
    }

    const currentContent = content[activeTab as keyof TabContent]

    if (currentContent.length === 0) {
      return (
        <div className="text-center py-8">
          <p className="text-gray-500 dark:text-gray-400 mb-4">
            No {activeTab} added to this lesson yet.
          </p>
          <Button onClick={() => openAddModal(activeTab as keyof TabContent)}>
            <Plus className="h-4 w-4 mr-2" />
            Add {activeTab}
          </Button>
        </div>
      )
    }

    switch (activeTab) {
      case 'objectives':
        return (
          <div className="space-y-3">
            {content.objectives.map((item) => (
              <div key={item.id} className="flex items-start justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800">
                <div className="flex-1">
                  <h4 className="font-medium">{item.objective?.title}</h4>
                  {item.objective?.description && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.objective.description}</p>
                  )}
                  <div className="flex items-center gap-2 mt-2">
                    {item.objective?.bloom_level && (
                      <Badge variant="outline" size="sm">
                        {item.objective.bloom_level}
                      </Badge>
                    )}
                    {item.objective?.category && (
                      <Badge variant="secondary" size="sm">
                        {item.objective.category}
                      </Badge>
                    )}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemove('objectives', item.objective_id)}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )

      case 'methods':
        return (
          <div className="space-y-3">
            {content.methods.map((item) => (
              <div key={item.id} className="flex items-start justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800">
                <div className="flex-1">
                  <h4 className="font-medium">{item.method?.name}</h4>
                  {item.method?.description && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.method.description}</p>
                  )}
                  <div className="flex items-center gap-4 mt-2 text-sm text-gray-500 dark:text-gray-400">
                    <span className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {item.duration_override || item.method?.duration_minutes} min
                    </span>
                    {item.method?.group_size_min && item.method?.group_size_max && (
                      <span className="flex items-center gap-1">
                        <Users className="h-3 w-3" />
                        {item.method.group_size_min}-{item.method.group_size_max}
                      </span>
                    )}
                    {item.method?.category && (
                      <Badge variant="outline" size="sm">
                        {item.method.category}
                      </Badge>
                    )}
                  </div>
                  {item.notes && (
                    <p className="text-sm text-blue-600 dark:text-blue-400 mt-2">Note: {item.notes}</p>
                  )}
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemove('methods', item.method_id)}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )

      case 'tasks':
        return (
          <div className="space-y-3">
            {content.tasks.map((item) => (
              <div key={item.id} className="flex items-start justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h4 className="font-medium">{item.task?.title}</h4>
                    {item.is_homework && (
                      <Badge variant="warning" size="sm">Homework</Badge>
                    )}
                  </div>
                  {item.task?.description && (
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.task.description}</p>
                  )}
                  <div className="flex items-center gap-4 mt-2 text-sm text-gray-500 dark:text-gray-400">
                    <span className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {item.duration_override || item.task?.duration_minutes} min
                    </span>
                    {item.task?.difficulty && (
                      <Badge variant="outline" size="sm">{item.task.difficulty}</Badge>
                    )}
                    {item.due_date && (
                      <span className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        Due: {new Date(item.due_date).toLocaleDateString()}
                      </span>
                    )}
                  </div>
                  {item.notes && (
                    <p className="text-sm text-blue-600 dark:text-blue-400 mt-2">Note: {item.notes}</p>
                  )}
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemove('tasks', item.task_id)}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )

      case 'books':
        return (
          <div className="space-y-3">
            {content.books.map((item) => (
              <div key={item.id} className="flex items-start justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800">
                <div className="flex items-center gap-3 flex-1">
                  {item.book?.cover_image_url && (
                    <img
                      src={item.book.cover_image_url}
                      alt={item.book.title}
                      className="w-12 h-16 object-cover rounded"
                    />
                  )}
                  <div className="flex-1">
                    <h4 className="font-medium">{item.book?.title}</h4>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{item.book?.author}</p>
                    {(item.pages_from || item.pages_to) && (
                      <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                        Pages: {item.pages_from || '?'} - {item.pages_to || '?'}
                      </p>
                    )}
                    {item.notes && (
                      <p className="text-sm text-blue-600 dark:text-blue-400 mt-1">Note: {item.notes}</p>
                    )}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemove('books', item.book_id)}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )

      case 'vocabulary':
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {content.vocabulary.map((item) => (
              <div key={item.id} className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800">
                <div className="flex-1">
                  <h4 className="font-medium">{item.vocabulary?.word}</h4>
                  {item.vocabulary?.translation && (
                    <p className="text-sm text-gray-600 dark:text-gray-400">{item.vocabulary.translation}</p>
                  )}
                  <div className="flex items-center gap-2 mt-1">
                    {item.vocabulary?.part_of_speech && (
                      <Badge variant="outline" size="sm">
                        {item.vocabulary.part_of_speech}
                      </Badge>
                    )}
                    {item.vocabulary?.difficulty && (
                      <Badge variant="secondary" size="sm">
                        {item.vocabulary.difficulty}
                      </Badge>
                    )}
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleRemove('vocabulary', item.vocabulary_id)}
                  className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )

      default:
        return null
    }
  }

  // Render modal content based on type
  const renderModalContent = () => {
    const filteredItems = getFilteredItems()

    if (loadingModal) {
      return (
        <div className="flex justify-center py-8">
          <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
        </div>
      )
    }

    if (filteredItems.length === 0) {
      return (
        <p className="text-center py-8 text-gray-500 dark:text-gray-400">
          {searchQuery ? `No ${modalType} found matching your search.` : `No available ${modalType} to add.`}
        </p>
      )
    }

    switch (modalType) {
      case 'objectives':
        return (
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedItems.includes(item.id)
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                }`}
                onClick={() => toggleItemSelection(item.id)}
              >
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => {}}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                  <div className="flex-1">
                    <h5 className="font-medium">{item.title}</h5>
                    {item.description && (
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.description}</p>
                    )}
                    <div className="flex items-center gap-2 mt-2">
                      {item.bloom_level && (
                        <Badge variant="outline" size="sm">{item.bloom_level}</Badge>
                      )}
                      {item.category && (
                        <Badge variant="secondary" size="sm">{item.category}</Badge>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )

      case 'methods':
        return (
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedItems.includes(item.id)
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                }`}
                onClick={() => toggleItemSelection(item.id)}
              >
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => {}}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                  <div className="flex-1">
                    <h5 className="font-medium">{item.name}</h5>
                    {item.description && (
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.description}</p>
                    )}
                    <div className="flex items-center gap-3 mt-2 text-sm text-gray-500">
                      <span className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {item.duration_minutes} min
                      </span>
                      {item.group_size_min && item.group_size_max && (
                        <span className="flex items-center gap-1">
                          <Users className="h-3 w-3" />
                          {item.group_size_min}-{item.group_size_max}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )

      case 'tasks':
        return (
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedItems.includes(item.id)
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                }`}
                onClick={() => toggleItemSelection(item.id)}
              >
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => {}}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                  <div className="flex-1">
                    <h5 className="font-medium">{item.title}</h5>
                    {item.description && (
                      <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{item.description}</p>
                    )}
                    <div className="flex items-center gap-3 mt-2">
                      <span className="text-sm text-gray-500">
                        <Clock className="h-3 w-3 inline mr-1" />
                        {item.duration_minutes} min
                      </span>
                      {item.difficulty && (
                        <Badge variant="outline" size="sm">{item.difficulty}</Badge>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )

      case 'books':
        return (
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedItems.includes(item.id)
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                }`}
                onClick={() => toggleItemSelection(item.id)}
              >
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => {}}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                  {item.cover_image_url && (
                    <img
                      src={item.cover_image_url}
                      alt={item.title}
                      className="w-12 h-16 object-cover rounded"
                    />
                  )}
                  <div className="flex-1">
                    <h5 className="font-medium">{item.title}</h5>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{item.author}</p>
                    {item.isbn && (
                      <p className="text-xs text-gray-500 mt-1">ISBN: {item.isbn}</p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )

      case 'vocabulary':
        return (
          <div className="space-y-2 max-h-96 overflow-y-auto">
            {filteredItems.map((item) => (
              <div
                key={item.id}
                className={`p-3 border rounded-lg cursor-pointer transition-all ${
                  selectedItems.includes(item.id)
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'hover:bg-gray-50 dark:hover:bg-gray-800'
                }`}
                onClick={() => toggleItemSelection(item.id)}
              >
                <div className="flex items-start gap-3">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => {}}
                    className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                  <div className="flex-1">
                    <h5 className="font-medium">{item.word}</h5>
                    {item.translation && (
                      <p className="text-sm text-gray-600 dark:text-gray-400">{item.translation}</p>
                    )}
                    <div className="flex items-center gap-2 mt-1">
                      {item.part_of_speech && (
                        <Badge variant="outline" size="sm">{item.part_of_speech}</Badge>
                      )}
                      {item.difficulty && (
                        <Badge variant="secondary" size="sm">{item.difficulty}</Badge>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">Lesson Content</h3>
        <Button 
          size="sm" 
          onClick={() => openAddModal(activeTab as keyof TabContent)}
          disabled={loading}
        >
          <Plus className="h-4 w-4 mr-2" />
          Add {activeTab.slice(0, -1)}
        </Button>
      </div>

      {/* <Tabs
        tabs={tabs.map(tab => ({
          ...tab,
          label: (
            <span className="flex items-center gap-2">
              {tab.icon}
              {tab.label}
              {tab.count > 0 && (
                <Badge variant="secondary" className="ml-1">
                  {tab.count}
                </Badge>
              )}
            </span>
          )
        }))}
        activeTab={activeTab}
        onChange={setActiveTab}
      /> */}
      <Tabs value={activeTab} onValueChange={setActiveTab}> {/* */}
        <TabsList className="w-full justify-start overflow-x-auto"> {/* */}
          {tabs.map((tab) => (
            <TabsTrigger key={tab.key} value={tab.key}> {/* */}
              <span className="flex items-center gap-2"> {/* */}
                {tab.icon} {/* */}
                {tab.label} {/* */}
                {tab.count > 0 && ( /* */
                  <Badge variant="secondary" className="ml-1"> {/* */}
                    {tab.count} {/* */}
                  </Badge>
                )}
              </span>
            </TabsTrigger>
          ))}
        </TabsList>

        {tabs.map((tab) => (
          <TabsContent key={tab.key} value={tab.key}>
            {renderContent()}
          </TabsContent>
        ))}
      </Tabs>


      {/* Add Content Modal */}
      <Modal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        title={`Add ${modalType.charAt(0).toUpperCase() + modalType.slice(1)} to Lesson`}
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            value={searchQuery}
            onSearch={setSearchQuery}
            placeholder={`Search ${modalType}...`}
          />

          {renderModalContent()}

          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {selectedItems.length} {modalType.slice(0, -1)}{selectedItems.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setModalOpen(false)}>
                Cancel
              </Button>
              <Button
                onClick={handleAddItems}
                disabled={selectedItems.length === 0 || savingItems}
                loading={savingItems}
              >
                Add {modalType}
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </div>
  )
}

================
File: src/components/relationships/LessonTaskManager.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { taskService } from '@/lib/supabase/tasks';
import { lessonService } from '@/lib/supabase/lessons';
import { Button } from '@/components/ui/Button';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { Modal } from '@/components/ui/Modal';
import { Input } from '@/components/ui/Input';
import { SearchBox } from '@/components/ui/SearchBox';
import { Spinner } from '@/components/ui/Spinner';
import { 
  FileText,
  Plus,
  Trash2,
  Search,
  ExternalLink,
  Clock,
  Calendar
} from 'lucide-react';

interface LessonTaskManagerProps {
  lessonId: string;
  courseId?: string;
  onUpdate?: () => void;
}

export function LessonTaskManager({ lessonId, courseId, onUpdate }: LessonTaskManagerProps) {
  const router = useRouter();
  const [tasks, setTasks] = useState<any[]>([]);
  const [lessonTasks, setLessonTasks] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [adding, setAdding] = useState(false);
  const [selectedTasks, setSelectedTasks] = useState<string[]>([]);

  useEffect(() => {
    loadData();
  }, [lessonId]);

  const loadData = async () => {
    setLoading(true);
    try {
      const [allTasks, lesson] = await Promise.all([
        courseId ? taskService.getCourseTasks(courseId) : taskService.getTasks({}),
        lessonService.getLesson(lessonId)
      ]);
      
      setTasks(allTasks);
      setLessonTasks(lesson?.lesson_tasks || []);
    } catch (error) {
      console.error('Failed to load data:', error);
    } finally {
      setLoading(false);
    }
  };

  const availableTasks = tasks.filter(task => 
    !lessonTasks.some(lt => lt.task_id === task.id) &&
    task.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleAddTasks = async () => {
    if (selectedTasks.length === 0) return;
    
    setAdding(true);
    try {
      for (let i = 0; i < selectedTasks.length; i++) {
        const taskId = selectedTasks[i];
        const position = lessonTasks.length + i; // Add to end
        await taskService.addTaskToLesson(lessonId, taskId, { position });
      }
      
      await loadData();
      setSelectedTasks([]);
      setShowAddModal(false);
      onUpdate?.();
    } catch (error) {
      console.error('Failed to add tasks:', error);
      alert('Failed to add tasks');
    } finally {
      setAdding(false);
    }
  };

  const handleRemoveTask = async (relationId: string) => {
    if (!confirm('Remove this task from the lesson?')) return;

    try {
      await taskService.removeTaskFromLesson(relationId);
      await loadData();
      onUpdate?.();
    } catch (error) {
      console.error('Failed to remove task:', error);
      alert('Failed to remove task');
    }
  };

  const toggleTaskSelection = (taskId: string) => {
    setSelectedTasks(prev => 
      prev.includes(taskId) 
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const getPriorityColor = (priority?: string) => {
    switch (priority?.toLowerCase()) {
      case 'high': return 'destructive';
      case 'medium': return 'warning';
      case 'low': return 'secondary';
      default: return 'outline';
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center py-8">
        <Spinner size="lg" />
      </div>
    );
  }

  return (
    <>
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium">Lesson Tasks</h3>
          <div className="flex gap-2">
            <Button onClick={() => setShowAddModal(true)} size="sm">
              <Plus className="h-4 w-4 mr-2" />
              Add Tasks
            </Button>
            <Button 
              onClick={() => router.push('/tasks/new')} 
              variant="outline" 
              size="sm"
            >
              <FileText className="h-4 w-4 mr-2" />
              Create New
            </Button>
          </div>
        </div>

        {lessonTasks.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2">
            {lessonTasks.map((lessonTask) => (
              <Card key={lessonTask.id} className="relative">
                <Card.Content className="p-4">
                  <div className="flex justify-between items-start mb-3">
                    <div className="flex-1">
                      <h4 className="font-medium mb-1">{lessonTask.task?.title}</h4>
                      {lessonTask.task?.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-2">
                          {lessonTask.task.description}
                        </p>
                      )}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleRemoveTask(lessonTask.id)}
                      className="text-red-600 hover:text-red-700 p-1"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>

                  <div className="flex flex-wrap gap-2 mb-3">
                    {lessonTask.task?.priority && (
                      <Badge variant={getPriorityColor(lessonTask.task.priority)}>
                        {lessonTask.task.priority}
                      </Badge>
                    )}
                    {lessonTask.is_homework && (
                      <Badge variant="secondary">Homework</Badge>
                    )}
                    {lessonTask.task?.points && (
                      <Badge variant="outline">{lessonTask.task.points} pts</Badge>
                    )}
                  </div>

                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <div className="flex items-center gap-4">
                      {(lessonTask.task?.duration_minutes || lessonTask.duration_override) && (
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          <span>~{lessonTask.duration_override || lessonTask.task?.duration_minutes} min</span>
                        </div>
                      )}
                      {lessonTask.due_date && (
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          <span>Due: {new Date(lessonTask.due_date).toLocaleDateString()}</span>
                        </div>
                      )}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => router.push(`/tasks/${lessonTask.task_id}`)}
                      className="p-1"
                    >
                      <ExternalLink className="h-3 w-3" />
                    </Button>
                  </div>
                </Card.Content>
              </Card>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">
              No tasks assigned
            </h3>
            <p className="text-gray-600 dark:text-gray-400 mb-4">
              Start by adding tasks to this lesson.
            </p>
            <Button onClick={() => setShowAddModal(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Add Tasks
            </Button>
          </div>
        )}
      </div>

      <Modal
        title={`Add Tasks to Lesson${courseId ? ' (from course)' : ''}`}
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        size="lg"
      >
        <div className="space-y-4">
          <SearchBox
            value={searchTerm}
            onChange={setSearchTerm}
            placeholder="Search tasks..."
          />

          {availableTasks.length > 0 ? (
            <div className="max-h-96 overflow-y-auto space-y-2">
              {availableTasks.map((task) => (
                <div
                  key={task.id}
                  className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                    selectedTasks.includes(task.id)
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'
                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'
                  }`}
                  onClick={() => toggleTaskSelection(task.id)}
                >
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      checked={selectedTasks.includes(task.id)}
                      onChange={() => toggleTaskSelection(task.id)}
                      className="mt-1"
                    />
                    <div className="flex-1">
                      <h4 className="font-medium mb-1">{task.title}</h4>
                      {task.description && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-2">
                          {task.description}
                        </p>
                      )}
                      <div className="flex flex-wrap gap-1">
                        {task.priority && (
                          <Badge variant={getPriorityColor(task.priority)} className="text-xs">
                            {task.priority}
                          </Badge>
                        )}
                        {task.category?.name && (
                          <Badge variant="outline" className="text-xs">
                            {task.category.name}
                          </Badge>
                        )}
                        {task.points && (
                          <Badge variant="secondary" className="text-xs">
                            {task.points} pts
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center py-8 text-gray-500">
              {courseId ? "No course tasks available to add" : "No tasks found"}
            </p>
          )}

          <div className="flex justify-end space-x-2 pt-4 border-t">
            <Button variant="outline" onClick={() => setShowAddModal(false)}>
              Cancel
            </Button>
            <Button
              onClick={handleAddTasks}
              disabled={selectedTasks.length === 0}
              loading={adding}
            >
              Add {selectedTasks.length} Task{selectedTasks.length !== 1 ? 's' : ''}
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
}

================
File: src/components/schedules/LessonDetailModal.tsx
================
'use client';

import React from 'react';
import { Modal, Button, Badge } from '@/components/ui';
import { Lesson } from '@/types/schedule';
import { Clock, Info, Book, Edit } from 'lucide-react';

interface LessonDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  lesson: Lesson | null;
  onEdit: (lesson: Lesson) => void;
}

export function LessonDetailModal({ isOpen, onClose, lesson, onEdit }: LessonDetailModalProps) {
  if (!lesson) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={lesson.title} size="lg">
      <div className="space-y-4">
        <div>
          <h3 className="font-medium text-gray-800">Lesson Details</h3>
          <p className="mt-2 text-sm text-gray-600">{lesson.description || 'No description provided.'}</p>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
            <div className="flex items-start gap-3">
                <Clock className="h-4 w-4 text-gray-400 mt-0.5"/>
                <div>
                    <p className="font-medium text-gray-500">Time</p>
                    <p>{new Date(lesson.date).toLocaleDateString()} at {lesson.start_time} - {lesson.end_time}</p>
                </div>
            </div>
            <div className="flex items-start gap-3">
                <Info className="h-4 w-4 text-gray-400 mt-0.5"/>
                <div>
                    <p className="font-medium text-gray-500">Status</p>
                    <Badge variant={lesson.status === 'completed' ? 'success' : 'default'} size="sm">{lesson.status}</Badge>
                </div>
            </div>
        </div>

        {lesson.description && (
             <div className="pt-2">
                <h4 className="font-medium text-gray-800">Description</h4>
                <p className="mt-1 text-sm text-gray-600 whitespace-pre-wrap">{lesson.description}</p>
            </div>
        )}

      </div>
      <div className="mt-6 flex justify-end gap-3">
        <Button variant="outline" onClick={onClose}>Close</Button>
        <Button onClick={() => onEdit(lesson)} leftIcon={<Edit className="h-4 w-4"/>}>Edit Lesson</Button>
      </div>
    </Modal>
  );
}

================
File: src/components/schedules/LessonForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Select } from '@/components/ui/Select';
import { Badge } from '@/components/ui/Badge';
import { useAuth } from '@/contexts/AuthContext';
import { scheduleService } from '@/lib/supabase/schedules';
import { lessonService } from '@/lib/supabase/lessons';
import type { Lesson, Schedule } from '@/types/schedule';
import type { LessonStatus } from '@/types/database';
import { Plus, X } from 'lucide-react';

interface LessonFormProps {
  scheduleId?: string;
  lesson?: Lesson | null;
  onSuccess?: () => void;
}

const LESSON_STATUS_OPTIONS: { value: LessonStatus; label: string }[] = [
  { value: 'draft', label: 'Draft' },
  { value: 'scheduled', label: 'Scheduled' },
  { value: 'completed', label: 'Completed' },
  { value: 'cancelled', label: 'Cancelled' },
];

const initialFormData = {
    schedule_id: '',
    title: '',
    description: '',
    date: new Date().toISOString().split('T')[0],
    start_time: '09:00',
    end_time: '10:00',
    duration_minutes: 60,
    location: '',
    status: 'scheduled' as LessonStatus,
    notes: '',
    homework: '',
    resources: [] as string[],
};

export function LessonForm({ scheduleId, lesson, onSuccess }: LessonFormProps) {
  const router = useRouter();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [schedules, setSchedules] = useState<Schedule[]>([]);
  const [formData, setFormData] = useState(initialFormData);
  
  const [newResource, setNewResource] = useState('');

  const isEditing = !!(lesson && lesson.id);

  useEffect(() => {
    loadSchedules();
  }, []);

  // *** THIS IS THE CORE FIX ***
  // This useEffect now reliably populates the form when a lesson is passed for editing.
  useEffect(() => {
    if (lesson && isEditing) {
      setFormData({
        schedule_id: lesson.schedule_id,
        title: lesson.title || '',
        description: lesson.description || '',
        date: lesson.date,
        start_time: lesson.start_time,
        end_time: lesson.end_time,
        duration_minutes: lesson.duration_minutes || 60,
        location: lesson.location || '',
        status: lesson.status,
        notes: lesson.description || '',
        homework: '',
        resources: [],
      });
    } else {
      setFormData({ ...initialFormData, schedule_id: scheduleId || '' });
    }
  }, [lesson]);

  const loadSchedules = async () => {
    if (user) {
      try {
        const data = await scheduleService.getSchedules({ user_id: user.id });
        setSchedules(data || []);
      } catch (error) {
        console.error('Error loading schedules:', error);
      }
    }
  };

  const calculateEndTime = (startTime: string, duration: number) => {
    if(!startTime || !duration) return;
    const [hours, minutes] = startTime.split(':').map(Number);
    const startDate = new Date();
    startDate.setHours(hours, minutes, 0, 0);
    startDate.setMinutes(startDate.getMinutes() + duration);
    
    const endTime = startDate.toTimeString().slice(0, 5);
    setFormData(prev => ({ ...prev, end_time: endTime }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) return;
    setLoading(true);
    try {
      // Get the course_id from the schedule
      const selectedSchedule = schedules.find(s => s.id === formData.schedule_id);
      if (!selectedSchedule) {
        throw new Error("Please select a valid schedule");
      }

      const lessonData = { 
        ...formData, 
        user_id: user.id,
        course_id: selectedSchedule.course_id
      };

      if (isEditing) {
        if (!lesson) throw new Error("Lesson to update is missing.");
        await lessonService.updateLesson(lesson.id, lessonData);
      } else {
        await lessonService.createLesson(lessonData);
      }

      if (onSuccess) {
        onSuccess();
      }
    } catch (error: any) {
      console.error('Error saving lesson:', error);
      alert('Error saving lesson. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  // ... (Other handlers like handleStartTimeChange remain the same)
  const handleStartTimeChange = (value: string) => { setFormData(prev => ({ ...prev, start_time: value })); calculateEndTime(value, formData.duration_minutes); };
  const handleDurationChange = (value: number) => { setFormData(prev => ({ ...prev, duration_minutes: value })); calculateEndTime(formData.start_time, value); };
  const handleAddResource = () => { if (newResource.trim()) { setFormData(prev => ({ ...prev, resources: [...(prev.resources || []), newResource.trim()] })); setNewResource(''); } };
  const handleRemoveResource = (index: number) => { setFormData(prev => ({ ...prev, resources: (prev.resources || []).filter((_, i) => i !== index) })); };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {!isEditing && (
          <div className="col-span-2">
            <Select
                label="Schedule"
                value={formData.schedule_id}
                onChange={(e) => setFormData({ ...formData, schedule_id: e.target.value })}
                required
                options={schedules.map(s => ({ 
                    value: s.id, 
                    label: `${s.name}${s.course ? ` (${s.course.title})` : ''}` 
                }))}
            />
          </div>
        )}

        <div className="col-span-2"><Input label="Lesson Title" value={formData.title} onChange={(e) => setFormData({ ...formData, title: e.target.value })} required /></div>
        <div className="col-span-2"><Textarea label="Description" value={formData.description || ''} onChange={(e) => setFormData({ ...formData, description: e.target.value })} rows={3} /></div>
        <div><Input type="date" label="Date" value={formData.date} onChange={(e) => setFormData({ ...formData, date: e.target.value })} required /></div>
        <div><Select label="Status" value={formData.status} onChange={(e) => setFormData({ ...formData, status: e.target.value as any })} options={LESSON_STATUS_OPTIONS} /></div>
        <div><Input type="time" label="Start Time" value={formData.start_time} onChange={(e) => handleStartTimeChange(e.target.value)} required /></div>
        <div><Input type="number" label="Duration (minutes)" value={formData.duration_minutes} onChange={(e) => handleDurationChange(parseInt(e.target.value))} required /></div>
        <div><Input type="time" label="End Time" value={formData.end_time} readOnly disabled helperText="Auto-calculated" /></div>
        <div><Input label="Location" value={formData.location || ''} onChange={(e) => setFormData({ ...formData, location: e.target.value })} /></div>
        <div className="col-span-2"><Textarea label="Teaching Notes" value={formData.notes || ''} onChange={(e) => setFormData({ ...formData, notes: e.target.value })} rows={3} /></div>
        <div className="col-span-2"><Textarea label="Homework Assignment" value={formData.homework || ''} onChange={(e) => setFormData({ ...formData, homework: e.target.value })} rows={3} /></div>
        <div className="col-span-2">
          <label className="block text-sm font-medium text-gray-700 mb-2">Resources & Links</label>
          <div className="space-y-2">
            <div className="flex gap-2"><Input value={newResource} onChange={(e) => setNewResource(e.target.value)} onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddResource())} /><Button type="button" onClick={handleAddResource} size="sm"><Plus className="h-4 w-4"/></Button></div>
            <div className="flex flex-wrap gap-2">
              {(formData.resources || []).map((resource, index) => (
                <Badge key={index} variant="secondary" className="flex items-center gap-1">
                  {resource}
                  <button type="button" onClick={() => handleRemoveResource(index)} className="ml-1 text-gray-500 hover:text-gray-700"><X className="h-3 w-3" /></button>
                </Badge>
              ))}
            </div>
          </div>
        </div>
      </div>
      <div className="flex justify-end space-x-4 mt-6">
        <Button type="button" variant="outline" onClick={onSuccess || (() => router.back())}>Cancel</Button>
        <Button type="submit" loading={loading}>{isEditing ? 'Update Lesson' : 'Create Lesson'}</Button>
      </div>
    </form>
  );
}

================
File: src/components/schedules/ScheduleCalendar.tsx
================
'use client';

import React from 'react';
import { Calendar, dateFnsLocalizer, Views, Event } from 'react-big-calendar';
import {format} from 'date-fns/format';
import {parse} from 'date-fns/parse';
import {startOfWeek} from 'date-fns/startOfWeek';
import {getDay} from 'date-fns/getDay';
import {enUS} from 'date-fns/locale/en-US';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { scheduleService } from '@/lib/supabase/schedules';
import { Schedule, Lesson } from '@/types/schedule';

const locales = {
  'en-US': enUS,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
});

interface ScheduleCalendarProps {
  schedule: Schedule;
  // This new prop will handle the click event
  onSelectLesson: (lesson: Lesson) => void;
}

export function ScheduleCalendar({ schedule, onSelectLesson }: ScheduleCalendarProps) {
  const [currentDate, setCurrentDate] = React.useState(new Date());
  const [currentView, setCurrentView] = React.useState(Views.MONTH);

  if (!schedule.lessons) {
    return <div className="p-8 text-center text-gray-500">No lessons to display in calendar.</div>;
  }
  
  const events = scheduleService.transformToCalendarEvents(schedule.lessons);

  const handleEventSelect = (event: Event) => {
    // The lesson data is stored in the event's resource property
    if (event.resource) {
      onSelectLesson(event.resource.lesson as Lesson);
    }
  };

  const handleNavigate = (date: Date) => {
    setCurrentDate(date);
  };

  const handleViewChange = (view: any) => {
    setCurrentView(view);
  };

  return (
    <div className="h-[600px]">
      <Calendar
        localizer={localizer}
        events={events}
        startAccessor="start"
        endAccessor="end"
        style={{ height: '100%' }}
        views={[Views.MONTH, Views.WEEK, Views.DAY]}
        view={currentView}
        date={currentDate}
        onNavigate={handleNavigate}
        onView={handleViewChange}
        popup
        onSelectEvent={handleEventSelect}
        tooltipAccessor={(event: any) => event.resource?.description || event.title}
      />
    </div>
  );
}

================
File: src/components/schedules/ScheduleForm.tsx
================
'use client';

import { useState, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Textarea } from '@/components/ui/Textarea';
import { Select } from '@/components/ui/Select';
import { Card } from '@/components/ui/Card';
import { Badge } from '@/components/ui/Badge';
import { SHARED_USER_ID } from '@/lib/constants/shared';
import { scheduleService } from '@/lib/supabase/schedules';
import { courseService } from '@/lib/supabase/courses';
import type { Schedule, RecurrenceType, DayOfWeek } from '@/types/schedule';
import type { Course } from '@/types/database';
import { Save, Calendar, Clock, BookOpen } from 'lucide-react';

interface ScheduleFormProps {
  schedule?: Schedule;
  onSuccess?: () => void;
}

const RECURRENCE_TYPES: { value: RecurrenceType; label: string }[] = [
  { value: 'none', label: 'No Recurrence (One-time)' },
  { value: 'daily', label: 'Daily' },
  { value: 'weekly', label: 'Weekly' },
  { value: 'biweekly', label: 'Bi-weekly' },
  { value: 'monthly', label: 'Monthly' },
];

const DAYS_OF_WEEK: { value: DayOfWeek; label: string }[] = [
  { value: 'monday', label: 'Monday' },
  { value: 'tuesday', label: 'Tuesday' },
  { value: 'wednesday', label: 'Wednesday' },
  { value: 'thursday', label: 'Thursday' },
  { value: 'friday', label: 'Friday' },
  { value: 'saturday', label: 'Saturday' },
  { value: 'sunday', label: 'Sunday' },
];

const TIMEZONES = [
  { value: 'UTC', label: 'UTC' },
  { value: 'America/New_York', label: 'Eastern Time (US)' },
  { value: 'America/Chicago', label: 'Central Time (US)' },
  { value: 'America/Denver', label: 'Mountain Time (US)' },
  { value: 'America/Los_Angeles', label: 'Pacific Time (US)' },
  { value: 'Europe/London', label: 'London' },
  { value: 'Europe/Paris', label: 'Paris' },
  { value: 'Asia/Tokyo', label: 'Tokyo' },
  { value: 'Asia/Shanghai', label: 'Shanghai' },
  { value: 'Australia/Sydney', label: 'Sydney' },
];

export function ScheduleForm({ schedule, onSuccess }: ScheduleFormProps) {
  const router = useRouter();
  const isEditing = !!schedule;
  const [loading, setLoading] = useState(false);
  const [courses, setCourses] = useState<Course[]>([]);
  const [formData, setFormData] = useState({
    course_id: schedule?.course_id || '',
    name: schedule?.name || '',
    description: schedule?.description || '',
    start_date: schedule?.start_date || new Date().toISOString().split('T')[0],
    end_date: schedule?.end_date || '',
    recurrence_type: schedule?.recurrence_type || 'weekly' as RecurrenceType,
    recurrence_days: schedule?.recurrence_days || ['monday', 'wednesday', 'friday'] as DayOfWeek[],
    default_start_time: schedule?.default_start_time || '09:00',
    default_duration_minutes: schedule?.default_duration_minutes || 60,
    timezone: schedule?.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone || 'UTC',
    location: schedule?.location || '',
    max_students: schedule?.max_students || 20,
    is_active: schedule?.is_active !== false,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  useEffect(() => {
    loadCourses();
  }, []);

  const loadCourses = async () => {
    try {
      const data = await courseService.getCourses({});
      setCourses(data);
    } catch (error) {
      console.error('Failed to load courses:', error);
    }
  };
  
  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.name.trim()) newErrors.name = 'Schedule name is required';
    if (!formData.course_id) newErrors.course_id = 'A course must be selected';
    if (!formData.start_date) newErrors.start_date = 'Start date is required';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm()) return;

    setLoading(true);
    try {
      const scheduleData = {
        ...formData,
        user_id: SHARED_USER_ID,
        // Explicitly set max_students to number | undefined to match Partial<Schedule>
        max_students: formData.max_students === null ? undefined : formData.max_students,
        default_duration_minutes: formData.default_duration_minutes,
      };

      if (isEditing) {
        await scheduleService.updateSchedule(schedule!.id, scheduleData);
      } else {
        await scheduleService.createSchedule(scheduleData);
      }

      if (onSuccess) {
        onSuccess();
      } else {
        router.push('/schedules');
        router.refresh();
      }
    } catch (error: any) {
      console.error('Failed to save schedule:', error);
      setErrors({ submit: error.message || 'Failed to save schedule. Please try again.' });
    } finally {
      setLoading(false);
    }
  };

  const handleDayToggle = (day: DayOfWeek) => {
    setFormData(prev => ({
      ...prev,
      recurrence_days: prev.recurrence_days.includes(day)
        ? prev.recurrence_days.filter(d => d !== day)
        : [...prev.recurrence_days, day]
    }));
  };

  // Calculate lesson preview
  const lessonPreview = useMemo(() => {
    if (formData.recurrence_type === 'none' || !formData.start_date || !formData.recurrence_days.length) {
      return { count: formData.recurrence_type === 'none' ? 1 : 0, totalDuration: formData.default_duration_minutes };
    }

    const startDate = new Date(`${formData.start_date}T00:00:00Z`);
    const endDate = formData.end_date 
      ? new Date(`${formData.end_date}T00:00:00Z`)
      : new Date(startDate.getFullYear() + 1, startDate.getMonth(), startDate.getDate());

    let currentDate = new Date(startDate);
    let lessonCount = 0;
    
    const dayMap: DayOfWeek[] = [
      'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'
    ];

    while (currentDate <= endDate) {
      const dayOfWeek = dayMap[currentDate.getUTCDay()];
      if (formData.recurrence_days.includes(dayOfWeek)) {
        lessonCount++;
      }
      // Move to next day
      currentDate.setUTCDate(currentDate.getUTCDate() + 1);
    }

    return {
      count: lessonCount,
      totalDuration: lessonCount * formData.default_duration_minutes
    };
  }, [formData.start_date, formData.end_date, formData.recurrence_days, formData.recurrence_type, formData.default_duration_minutes]);

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours === 0) return `${mins}m`;
    if (mins === 0) return `${hours}h`;
    return `${hours}h ${mins}m`;
  };

  return (
    <div className="space-y-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Schedule' : 'Create New Schedule'}
        </h1>
        <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
          {isEditing ? 'Update your schedule details' : 'Set up a recurring schedule that will automatically generate lessons'}
        </p>
      </div>

      {/* Lesson Preview Card */}
      {formData.start_date && (formData.recurrence_type === 'none' || formData.recurrence_days.length > 0) && (
        <Card className="bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800">
          <Card.Content className="p-4">
            <div className="flex items-center gap-2 mb-3">
              <BookOpen className="h-5 w-5 text-blue-600 dark:text-blue-400" />
              <h3 className="font-medium text-blue-900 dark:text-blue-100">Lesson Preview</h3>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                  <span className="text-sm text-blue-800 dark:text-blue-200">Lessons to be created:</span>
                </div>
                <Badge variant="info" size="sm">
                  {lessonPreview.count} lesson{lessonPreview.count !== 1 ? 's' : ''}
                </Badge>
              </div>
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                  <span className="text-sm text-blue-800 dark:text-blue-200">Total duration:</span>
                </div>
                <Badge variant="info" size="sm">
                  {formatDuration(lessonPreview.totalDuration)}
                </Badge>
              </div>
            </div>
            {formData.recurrence_type !== 'none' && (
              <p className="text-xs text-blue-700 dark:text-blue-300 mt-3">
                Based on {formData.start_date} to {formData.end_date || 'one year from start'} • {formData.recurrence_days.length} day{formData.recurrence_days.length !== 1 ? 's' : ''} per week • {formData.default_duration_minutes} minutes each
              </p>
            )}
          </Card.Content>
        </Card>
      )}

      <form onSubmit={handleSubmit} className="space-y-6">
        {errors.submit && (
          <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
            {errors.submit}
          </div>
        )}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="col-span-2">
          <Select
            label="Course"
            value={formData.course_id}
            onChange={(e) => setFormData({ ...formData, course_id: e.target.value })}
            required
            error={errors.course_id}
            options={courses.map(c => ({ value: c.id, label: c.title }))}
            placeholder="Select a course..."
          />
        </div>
        <div className="col-span-2">
          <Input
            label="Schedule Name"
            value={formData.name}
            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            placeholder="e.g., Morning Classes, Evening Sessions"
            required
            error={errors.name}
          />
        </div>
        <div className="col-span-2">
          <Textarea
            label="Description"
            value={formData.description || ''}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            placeholder="Describe this schedule..."
            rows={3}
          />
        </div>
        <div>
          <Input
            type="date"
            label="Start Date"
            value={formData.start_date}
            onChange={(e) => setFormData({ ...formData, start_date: e.target.value })}
            required
            error={errors.start_date}
          />
        </div>
        <div>
          <Input
            type="date"
            label="End Date (Optional)"
            value={formData.end_date}
            onChange={(e) => setFormData({ ...formData, end_date: e.target.value })}
            helperText="Leave empty for ongoing schedule"
          />
        </div>
        <div>
          <Select
            label="Recurrence"
            value={formData.recurrence_type}
            onChange={(e) => setFormData({ ...formData, recurrence_type: e.target.value as RecurrenceType })}
            options={RECURRENCE_TYPES}
          />
        </div>
        {formData.recurrence_type !== 'none' && (
          <div className="col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">Class Days</label>
            <div className="flex flex-wrap gap-2">
              {DAYS_OF_WEEK.map((day) => (
                <button
                  key={day.value}
                  type="button"
                  onClick={() => handleDayToggle(day.value)}
                  className={`px-4 py-2 rounded-md transition-colors ${
                    formData.recurrence_days?.includes(day.value)
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                  }`}
                >
                  {day.label}
                </button>
              ))}
            </div>
          </div>
        )}
        <div>
          <Input
            type="time"
            label="Default Start Time"
            value={formData.default_start_time}
            onChange={(e) => setFormData({ ...formData, default_start_time: e.target.value })}
            required
          />
        </div>
        <div>
          <Input
            type="number"
            label="Duration (minutes)"
            value={formData.default_duration_minutes}
            onChange={(e) => setFormData({ ...formData, default_duration_minutes: parseInt(e.target.value) })}
            min="15"
            max="480"
            required
          />
        </div>
        <div>
          <Select
            label="Timezone"
            value={formData.timezone}
            onChange={(e) => setFormData({ ...formData, timezone: e.target.value })}
            options={TIMEZONES}
          />
        </div>
        <div>
          <Input
            label="Location"
            value={formData.location}
            onChange={(e) => setFormData({ ...formData, location: e.target.value })}
            placeholder="e.g., Room 101, Online, etc."
          />
        </div>
        <div>
          <Input
            type="number"
            label="Maximum Students"
            value={formData.max_students}
            onChange={(e) => setFormData({ ...formData, max_students: parseInt(e.target.value) })}
            min="1"
            max="1000"
          />
        </div>
        <div className="flex items-center">
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={formData.is_active}
              onChange={(e) => setFormData({ ...formData, is_active: e.target.checked })}
              className="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <span className="text-sm font-medium text-gray-700">Active Schedule</span>
          </label>
        </div>
      </div>
      <div className="flex justify-end space-x-4 mt-6">
          <Button type="button" variant="outline" onClick={() => router.push('/schedules')}>Cancel</Button>
          <Button type="submit" loading={loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Schedule' : 'Create Schedule'}
          </Button>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/ui/Badge.tsx
================
'use client';

import React from 'react';
import { cn } from '@/lib/utils';

export interface BadgeProps extends React.HTMLAttributes<HTMLSpanElement> {
  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger' | 'info' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  rounded?: boolean;
  dot?: boolean;
}

const variantClasses = {
  default: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
  primary: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
  secondary: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',
  success: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
  warning: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
  danger: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300',
  info: 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-300',
  outline: 'bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800',
};

const sizeClasses = {
  sm: 'px-2 py-0.5 text-xs',
  md: 'px-2.5 py-0.5 text-sm',
  lg: 'px-3 py-1 text-base',
};

const dotSizeClasses = {
  sm: 'h-1.5 w-1.5',
  md: 'h-2 w-2',
  lg: 'h-2.5 w-2.5',
};

export const Badge: React.FC<BadgeProps> = ({
  variant = 'default',
  size = 'md',
  rounded = false,
  dot = false,
  className,
  children,
  ...props
}) => {
  return (
    <span
      className={cn(
        'inline-flex items-center font-medium',
        rounded ? 'rounded-full' : 'rounded',
        variantClasses[variant],
        sizeClasses[size],
        className
      )}
      {...props}
    >
      {dot && (
        <span
          className={cn(
            'rounded-full bg-current opacity-75 mr-1.5',
            dotSizeClasses[size]
          )}
        />
      )}
      {children}
    </span>
  );
};

Badge.displayName = 'Badge';

================
File: src/components/ui/BelongingSelector.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Search, BookOpen, GraduationCap } from 'lucide-react';
import { Button } from './Button';
import { Modal } from './Modal';
import { Input } from './Input';
import { SearchBox } from './SearchBox';
import { Badge } from './Badge';
import { Spinner } from './Spinner';
import { courseService } from '@/lib/supabase/courses';
import { lessonService } from '@/lib/supabase/lessons';
import { useAuth } from '@/contexts/AuthContext';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

export interface BelongingItem {
  id: string;
  title: string;
  type: 'course' | 'lesson';
  metadata?: any;
}

interface BelongingSelectorProps {
  selectedCourses: string[];
  selectedLessons: string[];
  onCoursesChange: (courseIds: string[]) => void;
  onLessonsChange: (lessonIds: string[]) => void;
  disabled?: boolean;
}

export function BelongingSelector({
  selectedCourses,
  selectedLessons,
  onCoursesChange,
  onLessonsChange,
  disabled = false
}: BelongingSelectorProps) {
  const { user } = useAuth();
  const [showModal, setShowModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [courses, setCourses] = useState<any[]>([]);
  const [lessons, setLessons] = useState<any[]>([]);
  const [tempSelectedCourses, setTempSelectedCourses] = useState<string[]>([]);
  const [tempSelectedLessons, setTempSelectedLessons] = useState<string[]>([]);

  useEffect(() => {
    // Load data immediately when component mounts to display selected items
    loadData();
  }, []);

  useEffect(() => {
    if (showModal) {
      setTempSelectedCourses(selectedCourses);
      setTempSelectedLessons(selectedLessons);
    }
  }, [showModal, selectedCourses, selectedLessons]);

  const loadData = async () => {
    if (!user) {
      console.log('User not authenticated, skipping data load');
      return;
    }

    try {
      setLoading(true);
      console.log('Loading courses and lessons for user:', user.id);
      
      const supabase = createClientComponentClient();
      
      const [coursesResult, lessonsResult, schedulesResult] = await Promise.all([
        courseService.getCourses({}),
        // Get up to 60 lessons for selection
        supabase
          .from('lessons')
          .select('*')
          .limit(60)
          .order('created_at', { ascending: false }),
        // Also check schedules table structure
        supabase
          .from('schedules')
          .select('*')
          .limit(3)
      ]);
      
      console.log('Courses loaded:', coursesResult.length);
      console.log('Lessons query result:', lessonsResult);
      
      // Debug: Check courses structure too
      if (coursesResult && coursesResult.length > 0) {
        console.log('Sample course structure:', coursesResult[0]);
      }
      
      if (lessonsResult.error) {
        console.error('Lessons query error:', lessonsResult.error);
        throw lessonsResult.error;
      }
      
      if (schedulesResult.error) {
        console.error('Schedules query error:', schedulesResult.error);
      } else if (schedulesResult.data && schedulesResult.data.length > 0) {
        console.log('Sample schedule structure:', schedulesResult.data[0]);
        console.log('Schedule fields:', Object.keys(schedulesResult.data[0]));
      }
      
      setCourses(coursesResult || []);
      setLessons(lessonsResult.data || []);
      
      // Debug: Log the actual structure of lessons to see available fields
      if (lessonsResult.data && lessonsResult.data.length > 0) {
        console.log('Actual lesson structure:', lessonsResult.data[0]);
        console.log('All lesson fields:', Object.keys(lessonsResult.data[0]));
      }
      
    } catch (error) {
      console.error('Failed to load courses and lessons:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCourseToggle = (courseId: string) => {
    const newSelection = tempSelectedCourses.includes(courseId)
      ? tempSelectedCourses.filter(id => id !== courseId)
      : [...tempSelectedCourses, courseId];
    
    console.log('Course selection changed:', {
      courseId,
      newSelection,
      availableLessons: lessons.length,
      lessonsWithDirectCourseId: lessons.filter(l => l.course_id).length,
      lessonsWithScheduleCourseId: lessons.filter(l => l.schedule?.course_id || l.schedule?.course?.id).length
    });
    
    setTempSelectedCourses(newSelection);
  };

  const handleLessonToggle = (lessonId: string) => {
    setTempSelectedLessons(prev =>
      prev.includes(lessonId)
        ? prev.filter(id => id !== lessonId)
        : [...prev, lessonId]
    );
  };

  const handleSave = () => {
    onCoursesChange(tempSelectedCourses);
    onLessonsChange(tempSelectedLessons);
    setShowModal(false);
  };

  const handleCancel = () => {
    setTempSelectedCourses(selectedCourses);
    setTempSelectedLessons(selectedLessons);
    setShowModal(false);
  };

  const filteredCourses = courses.filter(course =>
    course.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const filteredLessons = lessons.filter(lesson => {
    const title = lesson.topic || lesson.title || `Lesson ${lesson.lesson_number}`;
    const matchesSearch = title.toLowerCase().includes(searchTerm.toLowerCase());
    
    // If no courses are selected, show all lessons
    if (tempSelectedCourses.length === 0) {
      return matchesSearch;
    }
    
    // Get course ID from lesson directly or from schedule relationship
    const lessonCourseId = lesson.course_id || lesson.schedule?.course_id || lesson.schedule?.course?.id;
    
    // If courses are selected, only show lessons that belong to those courses
    const shouldInclude = matchesSearch && lessonCourseId && tempSelectedCourses.includes(lessonCourseId);
    
    // Debug logging
    if (tempSelectedCourses.length > 0) {
      console.log('Filtering lesson:', {
        lessonTitle: title,
        lessonCourseId,
        directCourseId: lesson.course_id,
        scheduleCourseId: lesson.schedule?.course_id || lesson.schedule?.course?.id,
        tempSelectedCourses,
        matchesSearch,
        shouldInclude
      });
    }
    
    return shouldInclude;
  });

  const selectedCoursesData = courses.filter(c => selectedCourses.includes(c.id));
  const selectedLessonsData = lessons.filter(l => selectedLessons.includes(l.id));
  const totalSelected = selectedCourses.length + selectedLessons.length;

  return (
    <>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {totalSelected} item{totalSelected !== 1 ? 's' : ''} selected 
            ({selectedCourses.length} course{selectedCourses.length !== 1 ? 's' : ''}, {selectedLessons.length} lesson{selectedLessons.length !== 1 ? 's' : ''})
          </p>
          <Button
            type="button"
            variant="outline"
            onClick={() => setShowModal(true)}
            disabled={disabled}
          >
            Select Courses & Lessons
          </Button>
        </div>

        {totalSelected > 0 && (
          <div className="space-y-3">
            {/* Selected Courses */}
            {selectedCoursesData.length > 0 && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Courses ({selectedCoursesData.length})
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {selectedCoursesData.map((course) => (
                    <div
                      key={course.id}
                      className="flex items-center space-x-3 p-3 border rounded-lg bg-gray-50 dark:bg-gray-800"
                    >
                      <GraduationCap className="h-4 w-4 text-blue-600 flex-shrink-0" />
                      <div className="flex-1 min-w-0">
                        <h5 className="font-medium text-sm line-clamp-1" title={course.title}>
                          {course.title}
                        </h5>
                        {course.short_description && (
                          <p className="text-xs text-gray-600 line-clamp-1" title={course.short_description}>
                            {course.short_description}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Selected Lessons */}
            {selectedLessonsData.length > 0 && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Lessons ({selectedLessonsData.length})
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {selectedLessonsData.map((lesson) => (
                    <div
                      key={lesson.id}
                      className="flex items-center space-x-3 p-3 border rounded-lg bg-gray-50 dark:bg-gray-800"
                    >
                      <BookOpen className="h-4 w-4 text-green-600 flex-shrink-0" />
                      <div className="flex-1 min-w-0">
                        <h5 className="font-medium text-sm line-clamp-1">
                          {lesson.topic || lesson.title || `Lesson ${lesson.lesson_number}`}
                        </h5>
                        {lesson.schedule && (
                          <p className="text-xs text-gray-600 line-clamp-1">
                            Schedule: {lesson.schedule.name}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Selection Modal */}
      <Modal
        isOpen={showModal}
        onClose={handleCancel}
        title="Select Courses and Lessons"
        size="lg"
      >
        <div className="space-y-4">
          {/* Search */}
          <SearchBox
            placeholder="Search courses and lessons..."
            onSearch={setSearchTerm}
            defaultValue={searchTerm}
          />

          {loading ? (
            <div className="flex justify-center py-8">
              <Spinner />
            </div>
          ) : (
            <div className="max-h-96 overflow-y-auto space-y-6">
              {/* Courses Section */}
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-3 flex items-center">
                  <GraduationCap className="h-4 w-4 mr-2" />
                  Courses ({filteredCourses.length})
                </h3>
                {filteredCourses.length === 0 ? (
                  <p className="text-sm text-gray-500 py-4">
                    {searchTerm ? 'No courses found matching your search.' : 'No courses available.'}
                  </p>
                ) : (
                  <div className="space-y-2">
                    {filteredCourses.map((course) => (
                      <div
                        key={course.id}
                        className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                          tempSelectedCourses.includes(course.id)
                            ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                        onClick={() => handleCourseToggle(course.id)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-3 flex-1">
                            <input
                              type="checkbox"
                              checked={tempSelectedCourses.includes(course.id)}
                              onChange={() => handleCourseToggle(course.id)}
                              className="mt-1 rounded"
                            />
                            <div className="flex-1">
                              <h4 className="font-medium text-sm">{course.title}</h4>
                              {course.short_description && (
                                <p className="text-sm text-gray-600 mt-1">{course.short_description}</p>
                              )}
                              <div className="flex items-center space-x-2 mt-2">
                                <Badge variant="secondary" className="text-xs">
                                  {course.difficulty || 'beginner'}
                                </Badge>
                                {course.status && (
                                  <Badge variant={course.status === 'published' ? 'success' : 'warning'} className="text-xs">
                                    {course.status}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Lessons Section */}
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-3 flex items-center">
                  <BookOpen className="h-4 w-4 mr-2" />
                  Lessons ({filteredLessons.length})
                  {tempSelectedCourses.length > 0 && (
                    <span className="ml-2 text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded">
                      Filtered by selected courses
                    </span>
                  )}
                </h3>
                {filteredLessons.length === 0 ? (
                  <p className="text-sm text-gray-500 py-4">
                    {searchTerm ? 'No lessons found matching your search.' : 'No lessons available.'}
                  </p>
                ) : (
                  <div className="space-y-2">
                    {filteredLessons.map((lesson) => (
                      <div
                        key={lesson.id}
                        className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                          tempSelectedLessons.includes(lesson.id)
                            ? 'border-green-500 bg-green-50 dark:bg-green-900/20'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                        onClick={() => handleLessonToggle(lesson.id)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-3 flex-1">
                            <input
                              type="checkbox"
                              checked={tempSelectedLessons.includes(lesson.id)}
                              onChange={() => handleLessonToggle(lesson.id)}
                              className="mt-1 rounded"
                            />
                            <div className="flex-1">
                              <h4 className="font-medium text-sm">
                                {lesson.topic || lesson.title || `Lesson ${lesson.lesson_number}`}
                              </h4>
                              {lesson.description && (
                                <p className="text-sm text-gray-600 mt-1">{lesson.description}</p>
                              )}
                              <div className="flex items-center space-x-2 mt-2">
                                {lesson.date && (
                                  <Badge variant="secondary" className="text-xs">
                                    {new Date(lesson.date).toLocaleDateString()}
                                  </Badge>
                                )}
                                {lesson.schedule && (
                                  <Badge variant="info" className="text-xs">
                                    {lesson.schedule.name}
                                  </Badge>
                                )}
                                {lesson.course_id && (
                                  <Badge variant="outline" className="text-xs">
                                    Course: {courses.find(c => c.id === lesson.course_id)?.title || 'Unknown'}
                                  </Badge>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600">
              {tempSelectedCourses.length + tempSelectedLessons.length} item{tempSelectedCourses.length + tempSelectedLessons.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={handleCancel}>
                Cancel
              </Button>
              <Button onClick={handleSave}>
                Save Selection
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </>
  );
}

================
File: src/components/ui/Button.tsx
================
import { cn } from '@/lib/utils';
import { ButtonProps } from '@/types';
import { cva, type VariantProps } from 'class-variance-authority';
import { forwardRef } from 'react';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        primary: 'bg-primary-600 text-white hover:bg-primary-700',
        secondary: 'bg-gray-600 text-white hover:bg-gray-700',
        outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50',
        ghost: 'text-gray-700 hover:bg-gray-100',
        danger: 'bg-red-600 text-white hover:bg-red-700',
      },
      size: {
        sm: 'h-8 px-3 text-xs',
        md: 'h-10 px-4 py-2',
        lg: 'h-12 px-6 text-lg',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  }
);

export interface ButtonComponentProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  fullWidth?: boolean;
}

const Button = forwardRef<HTMLButtonElement, ButtonComponentProps>(
  ({ className, variant, size, loading, children, disabled, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        disabled={disabled || loading}
        {...props}
      >
        {loading && (
          <svg
            className="animate-spin -ml-1 mr-2 h-4 w-4"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
        )}
        {children}
      </button>
    );
  }
);

Button.displayName = 'Button';

export { Button, buttonVariants };

================
File: src/components/ui/Card.tsx
================
// File: src/components/ui/Card.tsx

import { cn } from '@/lib/utils'; 
import { forwardRef } from 'react'; 

interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode; 
}

// 1. Define the main Card component as before
const CardComponent = forwardRef<HTMLDivElement, CardProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          'bg-white overflow-hidden shadow rounded-lg border border-gray-200',
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }
);
CardComponent.displayName = 'Card'; 

// 2. Define sub-components as before
const Header = forwardRef<HTMLDivElement, CardProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('px-6 py-4 border-b border-gray-200', className)}
        {...props}
      >
        {children}
      </div>
    );
  }
);
Header.displayName = 'Header'; 

const Title = forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, children, ...props }, ref) => {
    return (
      <h3
        ref={ref}
        className={cn('text-lg font-medium text-gray-900', className)}
        {...props}
      >
        {children}
      </h3>
    );
  }
);
Title.displayName = 'Title'; 

const Content = forwardRef<HTMLDivElement, CardProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div ref={ref} className={cn('px-6 py-4', className)} {...props}>
        {children}
      </div>
    );
  }
);
Content.displayName = 'Content'; 

const Footer = forwardRef<HTMLDivElement, CardProps>(
  ({ className, children, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('px-6 py-4 bg-gray-50 border-t border-gray-200', className)}
        {...props}
      >
        {children}
      </div>
    );
  }
);
Footer.displayName = 'Footer'; 

// 3. Combine them into a single object for export
export const Card = Object.assign(CardComponent, {
  Header,
  Title,
  Content,
  Footer,
});

================
File: src/components/ui/FilterPanel.tsx
================
'use client';

import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Filter, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from './Button';

export interface FilterOption {
  value: string;
  label: string;
  count?: number;
}

export interface FilterGroup {
  id: string;
  label: string;
  type: 'checkbox' | 'radio' | 'range' | 'select';
  options?: FilterOption[];
  min?: number;
  max?: number;
  step?: number;
  value?: string | string[] | [number, number];
}

export interface FilterPanelProps {
  filters: FilterGroup[];
  values: Record<string, any>;
  onChange: (filterId: string, value: any) => void;
  onReset?: () => void;
  onApply?: () => void;
  className?: string;
  collapsible?: boolean;
  defaultCollapsed?: boolean;
  showApplyButton?: boolean;
  showResetButton?: boolean;
  title?: string;
}

export const FilterPanel: React.FC<FilterPanelProps> = ({
  filters,
  values,
  onChange,
  onReset,
  onApply,
  className,
  collapsible = true,
  defaultCollapsed = false,
  showApplyButton = false,
  showResetButton = true,
  title = 'Filters',
}) => {
  const [collapsed, setCollapsed] = useState(defaultCollapsed);
  const [expandedGroups, setExpandedGroups] = useState<Record<string, boolean>>({});

  const toggleGroup = (groupId: string) => {
    setExpandedGroups((prev) => ({
      ...prev,
      [groupId]: !prev[groupId],
    }));
  };

  const handleCheckboxChange = (filterId: string, option: string, checked: boolean) => {
    const currentValues = (values[filterId] as string[]) || [];
    const newValues = checked
      ? [...currentValues, option]
      : currentValues.filter((v) => v !== option);
    onChange(filterId, newValues);
  };

  const handleRadioChange = (filterId: string, value: string) => {
    onChange(filterId, value);
  };

  const handleRangeChange = (filterId: string, index: number, value: number) => {
    const currentValues = (values[filterId] as [number, number]) || [0, 100];
    const newValues: [number, number] = [...currentValues] as [number, number];
    newValues[index] = value;
    onChange(filterId, newValues);
  };

  const hasActiveFilters = Object.values(values).some((value) => {
    if (Array.isArray(value)) return value.length > 0;
    if (typeof value === 'string') return value !== '';
    return false;
  });

  const renderFilterGroup = (filter: FilterGroup) => {
    const isExpanded = expandedGroups[filter.id] !== false;

    return (
      <div key={filter.id} className="border-b border-gray-200 dark:border-gray-700">
        <button
          type="button"
          onClick={() => toggleGroup(filter.id)}
          className="w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
        >
          <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
            {filter.label}
          </span>
          {isExpanded ? (
            <ChevronUp className="h-4 w-4 text-gray-500" />
          ) : (
            <ChevronDown className="h-4 w-4 text-gray-500" />
          )}
        </button>

        {isExpanded && (
          <div className="px-4 pb-3">
            {filter.type === 'checkbox' && filter.options && (
              <div className="space-y-2">
                {filter.options.map((option) => (
                  <label
                    key={option.value}
                    className="flex items-center text-sm cursor-pointer"
                  >
                    <input
                      type="checkbox"
                      checked={(values[filter.id] as string[] || []).includes(option.value)}
                      onChange={(e) =>
                        handleCheckboxChange(filter.id, option.value, e.target.checked)
                      }
                      className="h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                    />
                    <span className="ml-2 text-gray-700 dark:text-gray-300">
                      {option.label}
                      {option.count !== undefined && (
                        <span className="ml-1 text-gray-500">({option.count})</span>
                      )}
                    </span>
                  </label>
                ))}
              </div>
            )}

            {filter.type === 'radio' && filter.options && (
              <div className="space-y-2">
                {filter.options.map((option) => (
                  <label
                    key={option.value}
                    className="flex items-center text-sm cursor-pointer"
                  >
                    <input
                      type="radio"
                      name={filter.id}
                      value={option.value}
                      checked={values[filter.id] === option.value}
                      onChange={() => handleRadioChange(filter.id, option.value)}
                      className="h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                    />
                    <span className="ml-2 text-gray-700 dark:text-gray-300">
                      {option.label}
                    </span>
                  </label>
                ))}
              </div>
            )}

            {filter.type === 'range' && filter.min !== undefined && filter.max !== undefined && (
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <input
                    type="number"
                    min={filter.min}
                    max={filter.max}
                    step={filter.step}
                    value={(values[filter.id] as [number, number])?.[0] || filter.min}
                    onChange={(e) =>
                      handleRangeChange(filter.id, 0, Number(e.target.value))
                    }
                    className="w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                  />
                  <span className="text-gray-500">to</span>
                  <input
                    type="number"
                    min={filter.min}
                    max={filter.max}
                    step={filter.step}
                    value={(values[filter.id] as [number, number])?.[1] || filter.max}
                    onChange={(e) =>
                      handleRangeChange(filter.id, 1, Number(e.target.value))
                    }
                    className="w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>
            )}

            {filter.type === 'select' && filter.options && (
              <select
                value={values[filter.id] || ''}
                onChange={(e) => onChange(filter.id, e.target.value)}
                className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All</option>
                {filter.options.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            )}
          </div>
        )}
      </div>
    );
  };

  const content = (
    <>
      <div className="flex items-center justify-between px-4 py-3 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center space-x-2">
          <Filter className="h-5 w-5 text-gray-500" />
          <h3 className="text-base font-medium text-gray-900 dark:text-gray-100">{title}</h3>
          {hasActiveFilters && (
            <span className="ml-2 px-2 py-0.5 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
              Active
            </span>
          )}
        </div>
        {collapsible && (
          <button
            type="button"
            onClick={() => setCollapsed(!collapsed)}
            className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
          >
            {collapsed ? (
              <ChevronDown className="h-4 w-4 text-gray-500" />
            ) : (
              <ChevronUp className="h-4 w-4 text-gray-500" />
            )}
          </button>
        )}
      </div>

      {!collapsed && (
        <>
          <div className="max-h-96 overflow-y-auto">
            {filters.map(renderFilterGroup)}
          </div>

          {(showResetButton || showApplyButton) && (
            <div className="px-4 py-3 border-t border-gray-200 dark:border-gray-700 flex items-center justify-between">
              {showResetButton && (
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={onReset}
                  disabled={!hasActiveFilters}
                >
                  <X className="h-4 w-4 mr-1" />
                  Reset
                </Button>
              )}
              {showApplyButton && (
                <Button
                  type="button"
                  size="sm"
                  onClick={onApply}
                  className="ml-auto"
                >
                  Apply Filters
                </Button>
              )}
            </div>
          )}
        </>
      )}
    </>
  );

  return (
    <div
      className={cn(
        'bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700',
        className
      )}
    >
      {content}
    </div>
  );
};

FilterPanel.displayName = 'FilterPanel';

================
File: src/components/ui/index.ts
================
// UI Components
export * from './Button';
export * from './Card';
export * from './Input';
export * from './Textarea';
export * from './Modal';
export * from './Select';
export * from './Table';
export * from './SearchBox';
export * from './FilterPanel';
export * from './Badge';
export * from './Spinner';
export * from './Pagination';
export * from './Tabs';
export * from './BelongingSelector';
export * from './RichTextTruncate';
export * from './RichTextDisplay';

================
File: src/components/ui/Input.tsx
================
import { cn } from '@/lib/utils';
import { forwardRef } from 'react';

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  helperText?: string;
}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, label, error, helperText, id, ...props }, ref) => {
    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;

    return (
      <div className="space-y-1">
        {label && (
          <label 
            htmlFor={inputId} 
            className="block text-sm font-medium text-gray-700"
          >
            {label}
            {props.required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        <input
          type={type}
          id={inputId}
          className={cn(
            'block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm',
            error && 'border-red-300 focus:border-red-500 focus:ring-red-500',
            props.disabled && 'bg-gray-50 text-gray-500 cursor-not-allowed',
            className
          )}
          ref={ref}
          {...props}
        />
        {error && (
          <p className="text-sm text-red-600" id={`${inputId}-error`}>
            {error}
          </p>
        )}
        {helperText && !error && (
          <p className="text-sm text-gray-500" id={`${inputId}-helper`}>
            {helperText}
          </p>
        )}
      </div>
    );
  }
);

Input.displayName = 'Input';

export { Input };

================
File: src/components/ui/Modal.tsx
================
'use client';

import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { X } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';
  closeOnOverlayClick?: boolean;
  closeOnEsc?: boolean;
  showCloseButton?: boolean;
  className?: string;
  overlayClassName?: string;
}

const sizeClasses = {
  sm: 'max-w-md',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  xl: 'max-w-4xl',
  full: 'max-w-full mx-4',
};

export const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  size = 'md',
  closeOnOverlayClick = true,
  closeOnEsc = true,
  showCloseButton = true,
  className,
  overlayClassName,
}) => {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleEsc = (e: KeyboardEvent) => {
      if (closeOnEsc && e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEsc);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose, closeOnEsc]);

  useEffect(() => {
    if (isOpen && modalRef.current) {
      modalRef.current.focus();
    }
  }, [isOpen]);

  if (!isOpen) return null;

  const modalContent = (
    <div
      className={cn(
        'fixed inset-0 z-50 flex items-center justify-center',
        overlayClassName
      )}
    >
      {/* Overlay */}
      <div
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={closeOnOverlayClick ? onClose : undefined}
        aria-hidden="true"
      />

      {/* Modal */}
      <div
        ref={modalRef}
        role="dialog"
        aria-modal="true"
        aria-labelledby={title ? 'modal-title' : undefined}
        tabIndex={-1}
        className={cn(
          'relative bg-white dark:bg-gray-800 rounded-lg shadow-xl',
          'w-full p-6',
          'max-h-[90vh] overflow-auto',
          'focus:outline-none',
          sizeClasses[size],
          className
        )}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        {(title || showCloseButton) && (
          <div className="flex items-center justify-between mb-4">
            {title && (
              <h2
                id="modal-title"
                className="text-lg font-semibold text-gray-900 dark:text-gray-100"
              >
                {title}
              </h2>
            )}
            {showCloseButton && (
              <button
                type="button"
                onClick={onClose}
                className="ml-auto p-1.5 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                aria-label="Close modal"
              >
                <X className="h-5 w-5" />
              </button>
            )}
          </div>
        )}

        {/* Content */}
        <div className="text-gray-700 dark:text-gray-300">{children}</div>
      </div>
    </div>
  );

  // Use portal to render modal at document root
  if (typeof window !== 'undefined') {
    return createPortal(modalContent, document.body);
  }

  return null;
};

Modal.displayName = 'Modal';

================
File: src/components/ui/Pagination.tsx
================
'use client';

import React from 'react';
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from './Button';

export interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  showFirstLast?: boolean;
  maxVisible?: number;
  className?: string;
}

export const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange,
  showFirstLast = true,
  maxVisible = 7,
  className,
}) => {
  const generatePageNumbers = () => {
    const pages: (number | string)[] = [];
    
    if (totalPages <= maxVisible) {
      // Show all pages if total pages is less than max visible
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Always show first page
      pages.push(1);
      
      if (currentPage <= 3) {
        // Near the beginning
        for (let i = 2; i <= Math.min(maxVisible - 2, totalPages - 1); i++) {
          pages.push(i);
        }
        pages.push('...');
        pages.push(totalPages);
      } else if (currentPage >= totalPages - 2) {
        // Near the end
        pages.push('...');
        for (let i = Math.max(totalPages - maxVisible + 3, 2); i <= totalPages; i++) {
          pages.push(i);
        }
      } else {
        // In the middle
        pages.push('...');
        for (let i = currentPage - 1; i <= currentPage + 1; i++) {
          pages.push(i);
        }
        pages.push('...');
        pages.push(totalPages);
      }
    }
    
    return pages;
  };

  const pageNumbers = generatePageNumbers();

  return (
    <nav
      className={cn('flex items-center justify-center space-x-1', className)}
      aria-label="Pagination"
    >
      {showFirstLast && (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onPageChange(1)}
          disabled={currentPage === 1}
          aria-label="Go to first page"
        >
          First
        </Button>
      )}
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        aria-label="Go to previous page"
      >
        <ChevronLeft className="h-4 w-4" />
      </Button>
      
      <div className="flex items-center space-x-1">
        {pageNumbers.map((page, index) => {
          if (page === '...') {
            return (
              <span
                key={`ellipsis-${index}`}
                className="px-3 py-1 text-gray-400"
              >
                <MoreHorizontal className="h-4 w-4" />
              </span>
            );
          }
          
          const pageNumber = page as number;
          const isActive = pageNumber === currentPage;
          
          return (
            <Button
              key={pageNumber}
              variant={isActive ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => onPageChange(pageNumber)}
              aria-label={`Go to page ${pageNumber}`}
              aria-current={isActive ? 'page' : undefined}
              className={cn(
                'min-w-[2rem]',
                isActive && 'pointer-events-none'
              )}
            >
              {pageNumber}
            </Button>
          );
        })}
      </div>
      
      <Button
        variant="ghost"
        size="sm"
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        aria-label="Go to next page"
      >
        <ChevronRight className="h-4 w-4" />
      </Button>
      
      {showFirstLast && (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onPageChange(totalPages)}
          disabled={currentPage === totalPages}
          aria-label="Go to last page"
        >
          Last
        </Button>
      )}
    </nav>
  );
};

Pagination.displayName = 'Pagination';

================
File: src/components/ui/RichTextDisplay.tsx
================
'use client';

import { cn } from '@/lib/utils';

interface RichTextDisplayProps {
  content: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
}

export function RichTextDisplay({
  content,
  className,
  size = 'md'
}: RichTextDisplayProps) {
  if (!content) return null;

  // Check if content is likely HTML (contains HTML tags)
  const isHtml = /<[a-z][\s\S]*>/i.test(content);
  
  const sizeClasses = {
    sm: 'text-sm',
    md: 'text-base',
    lg: 'text-lg'
  };

  if (isHtml) {
    return (
      <div
        className={cn(
          'rich-content prose max-w-none',
          sizeClasses[size],
          // Headings
          'prose-headings:text-gray-900 dark:prose-headings:text-gray-100',
          'prose-h1:text-2xl prose-h1:font-bold prose-h1:mb-4',
          'prose-h2:text-xl prose-h2:font-semibold prose-h2:mb-3',
          'prose-h3:text-lg prose-h3:font-semibold prose-h3:mb-2',
          'prose-h4:text-base prose-h4:font-semibold prose-h4:mb-2',
          'prose-h5:text-sm prose-h5:font-semibold prose-h5:mb-1',
          'prose-h6:text-sm prose-h6:font-medium prose-h6:mb-1',
          // Paragraphs and text
          'prose-p:text-gray-600 dark:prose-p:text-gray-300',
          'prose-p:mb-3 prose-p:leading-relaxed',
          'prose-strong:font-semibold prose-strong:text-gray-900 dark:prose-strong:text-gray-100',
          'prose-em:italic prose-em:text-gray-600 dark:prose-em:text-gray-300',
          // Lists
          'prose-ul:text-gray-600 dark:prose-ul:text-gray-300',
          'prose-ol:text-gray-600 dark:prose-ol:text-gray-300',
          'prose-li:text-gray-600 dark:prose-li:text-gray-300',
          'prose-li:mb-1',
          'prose-ul:list-disc prose-ul:pl-6',
          'prose-ol:list-decimal prose-ol:pl-6',
          // Links
          'prose-a:text-blue-600 dark:prose-a:text-blue-400',
          'prose-a:underline prose-a:decoration-blue-600/30',
          'hover:prose-a:decoration-blue-600',
          // Code
          'prose-code:text-gray-900 dark:prose-code:text-gray-100',
          'prose-code:bg-gray-100 dark:prose-code:bg-gray-800',
          'prose-code:px-1 prose-code:py-0.5 prose-code:rounded',
          'prose-code:text-sm prose-code:font-mono',
          // Pre and code blocks
          'prose-pre:bg-gray-100 dark:prose-pre:bg-gray-800',
          'prose-pre:text-gray-900 dark:prose-pre:text-gray-100',
          'prose-pre:p-4 prose-pre:rounded-lg prose-pre:overflow-x-auto',
          // Blockquotes
          'prose-blockquote:text-gray-600 dark:prose-blockquote:text-gray-300',
          'prose-blockquote:border-l-4 prose-blockquote:border-gray-300 dark:prose-blockquote:border-gray-600',
          'prose-blockquote:pl-4 prose-blockquote:italic',
          // Tables
          'prose-table:text-gray-600 dark:prose-table:text-gray-300',
          'prose-thead:text-gray-900 dark:prose-thead:text-gray-100',
          'prose-th:font-semibold prose-th:border-b prose-th:border-gray-300 dark:prose-th:border-gray-600',
          'prose-td:border-b prose-td:border-gray-200 dark:prose-td:border-gray-700',
          // Images
          'prose-img:rounded-lg prose-img:shadow-sm',
          // HR
          'prose-hr:border-gray-300 dark:prose-hr:border-gray-600',
          className
        )}
        dangerouslySetInnerHTML={{ __html: content }}
      />
    );
  }

  // Plain text fallback
  return (
    <div className={cn(
      sizeClasses[size],
      'text-gray-600 dark:text-gray-300',
      'leading-relaxed whitespace-pre-wrap',
      className
    )}>
      {content}
    </div>
  );
}

================
File: src/components/ui/RichTextTruncate.tsx
================
'use client';

import { useState } from 'react';
import { cn } from '@/lib/utils';

interface RichTextTruncateProps {
  content: string;
  maxLength?: number;
  maxLines?: number;
  className?: string;
  showReadMore?: boolean;
}

export function RichTextTruncate({
  content,
  maxLength = 150,
  maxLines = 3,
  className,
  showReadMore = false
}: RichTextTruncateProps) {
  const [isExpanded, setIsExpanded] = useState(false);

  if (!content) return null;

  // Function to truncate HTML content while preserving tags
  const truncateHtml = (html: string, maxLen: number): { truncated: string; isTruncated: boolean } => {
    // Remove HTML tags for length calculation
    const textContent = html.replace(/<[^>]*>/g, '');
    
    if (textContent.length <= maxLen) {
      return { truncated: html, isTruncated: false };
    }

    // Simple truncation by character count while trying to preserve some formatting
    let truncated = '';
    let textLength = 0;
    let inTag = false;
    let tagStack: string[] = [];
    
    for (let i = 0; i < html.length && textLength < maxLen; i++) {
      const char = html[i];
      
      if (char === '<') {
        inTag = true;
        truncated += char;
      } else if (char === '>') {
        inTag = false;
        truncated += char;
        
        // Track opening/closing tags
        const tagMatch = html.substring(html.lastIndexOf('<', i), i + 1).match(/<\/?([a-zA-Z]+)/);
        if (tagMatch) {
          const tag = tagMatch[1].toLowerCase();
          if (html[html.lastIndexOf('<', i) + 1] === '/') {
            // Closing tag
            const lastOpenIndex = tagStack.lastIndexOf(tag);
            if (lastOpenIndex !== -1) {
              tagStack.splice(lastOpenIndex, 1);
            }
          } else {
            // Opening tag (skip self-closing tags like <br/>)
            if (!html.substring(html.lastIndexOf('<', i), i + 1).includes('/>')) {
              tagStack.push(tag);
            }
          }
        }
      } else {
        truncated += char;
        if (!inTag) {
          textLength++;
        }
      }
    }
    
    // Close any remaining open tags
    while (tagStack.length > 0) {
      const tag = tagStack.pop();
      truncated += `</${tag}>`;
    }
    
    return { truncated: truncated + '...', isTruncated: true };
  };

  // Check if content is likely HTML (contains HTML tags)
  const isHtml = /<[a-z][\s\S]*>/i.test(content);
  
  const displayContent = isExpanded ? content : (() => {
    if (isHtml) {
      return truncateHtml(content, maxLength).truncated;
    } else {
      return content.length > maxLength 
        ? content.substring(0, maxLength) + '...'
        : content;
    }
  })();

  const isTruncated = isHtml 
    ? truncateHtml(content, maxLength).isTruncated
    : content.length > maxLength;

  const lineClampStyle = !isExpanded ? {
    display: '-webkit-box',
    WebkitLineClamp: maxLines,
    WebkitBoxOrient: 'vertical' as const,
    overflow: 'hidden',
  } : {};

  return (
    <div className={cn('text-sm text-gray-600 dark:text-gray-400', className)}>
      {isHtml ? (
        <div
          className={cn(
            'rich-content',
            '[&>*]:text-inherit',
            '[&_strong]:font-semibold [&_strong]:text-gray-900 dark:[&_strong]:text-gray-100',
            '[&_em]:italic',
            '[&_h1]:text-lg [&_h1]:font-semibold [&_h1]:text-gray-900 dark:[&_h1]:text-gray-100',
            '[&_h2]:text-base [&_h2]:font-semibold [&_h2]:text-gray-900 dark:[&_h2]:text-gray-100',
            '[&_h3]:text-sm [&_h3]:font-semibold [&_h3]:text-gray-900 dark:[&_h3]:text-gray-100',
            '[&_ul]:list-disc [&_ul]:pl-4',
            '[&_ol]:list-decimal [&_ol]:pl-4',
            '[&_li]:mb-1',
            '[&_p]:mb-2 last:[&_p]:mb-0',
            '[&_br]:leading-4'
          )}
          style={lineClampStyle}
          dangerouslySetInnerHTML={{ __html: displayContent }}
        />
      ) : (
        <p 
          className="text-sm"
          style={lineClampStyle}
        >
          {displayContent}
        </p>
      )}
      
      {showReadMore && isTruncated && (
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 text-xs mt-1 underline"
        >
          {isExpanded ? 'Show less' : 'Read more'}
        </button>
      )}
    </div>
  );
}

================
File: src/components/ui/SearchBox.tsx
================
'use client';

import React, { forwardRef, InputHTMLAttributes, useState } from 'react';
import { Search, X } from 'lucide-react';
import { cn } from '@/lib/utils';

export interface SearchBoxProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {
  onSearch?: (value: string) => void;
  onClear?: () => void;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'filled' | 'ghost';
  fullWidth?: boolean;
  showClearButton?: boolean;
  debounceDelay?: number;
}

const sizeClasses = {
  sm: 'h-8 text-sm pl-8 pr-3',
  md: 'h-10 text-base pl-10 pr-4',
  lg: 'h-12 text-lg pl-12 pr-5',
};

const iconSizeClasses = {
  sm: 'h-4 w-4',
  md: 'h-5 w-5',
  lg: 'h-6 w-6',
};

const iconPositionClasses = {
  sm: 'left-2',
  md: 'left-3',
  lg: 'left-4',
};

const variantClasses = {
  default: 'border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800',
  filled: 'border border-transparent bg-gray-100 dark:bg-gray-700',
  ghost: 'border border-transparent hover:bg-gray-100 dark:hover:bg-gray-700',
};

export const SearchBox = forwardRef<HTMLInputElement, SearchBoxProps>(
  (
    {
      onSearch,
      onClear,
      size = 'md',
      variant = 'default',
      fullWidth = false,
      showClearButton = true,
      debounceDelay = 300,
      className,
      value: controlledValue,
      onChange,
      ...props
    },
    ref
  ) => {
    const [internalValue, setInternalValue] = useState('');
    const value = controlledValue !== undefined ? controlledValue : internalValue;
    const [debounceTimer, setDebounceTimer] = useState<NodeJS.Timeout | null>(null);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const newValue = e.target.value;
      
      if (controlledValue === undefined) {
        setInternalValue(newValue);
      }
      
      onChange?.(e);

      // Debounced search
      if (onSearch) {
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
        const timer = setTimeout(() => {
          onSearch(newValue);
        }, debounceDelay);
        setDebounceTimer(timer);
      }
    };

    const handleClear = () => {
      if (controlledValue === undefined) {
        setInternalValue('');
      }
      
      // Create synthetic event for onChange
      const syntheticEvent = {
        target: { value: '' },
        currentTarget: { value: '' },
      } as React.ChangeEvent<HTMLInputElement>;
      
      onChange?.(syntheticEvent);
      onClear?.();
      onSearch?.('');
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
      if (e.key === 'Enter' && onSearch) {
        if (debounceTimer) {
          clearTimeout(debounceTimer);
        }
        onSearch(value as string);
      }
    };

    return (
      <div className={cn('relative', fullWidth && 'w-full')}>
        <div className="absolute inset-y-0 left-0 flex items-center pointer-events-none">
          <Search
            className={cn(
              'text-gray-400',
              iconSizeClasses[size],
              iconPositionClasses[size]
            )}
          />
        </div>
        
        <input
          ref={ref}
          type="search"
          value={value}
          onChange={handleChange}
          onKeyDown={handleKeyDown}
          className={cn(
            'rounded-md transition-colors duration-200',
            'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent',
            'placeholder-gray-400 dark:placeholder-gray-500',
            'text-gray-900 dark:text-gray-100',
            sizeClasses[size],
            variantClasses[variant],
            showClearButton && value && 'pr-10',
            fullWidth && 'w-full',
            className
          )}
          {...props}
        />
        
        {showClearButton && value && (
          <button
            type="button"
            onClick={handleClear}
            className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <X className={iconSizeClasses[size]} />
          </button>
        )}
      </div>
    );
  }
);

SearchBox.displayName = 'SearchBox';

================
File: src/components/ui/Select.tsx
================
'use client';

import React, { forwardRef, SelectHTMLAttributes } from 'react';
import { cn } from '@/lib/utils';

export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

export interface SelectProps extends Omit<SelectHTMLAttributes<HTMLSelectElement>, 'size'> {
  label?: string;
  error?: string;
  options: SelectOption[];
  placeholder?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'filled' | 'ghost';
  fullWidth?: boolean;
}

const sizeClasses = {
  sm: 'h-8 text-sm px-3 pr-3',
  md: 'h-10 text-base px-4 pr-4',
  lg: 'h-12 text-lg px-5 pr-5',
};

const variantClasses = {
  default: 'border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800',
  filled: 'border border-transparent bg-gray-100 dark:bg-gray-700',
  ghost: 'border border-transparent hover:bg-gray-100 dark:hover:bg-gray-700',
};

export const Select = forwardRef<HTMLSelectElement, SelectProps>(
  (
    {
      label,
      error,
      options,
      placeholder,
      size = 'md',
      variant = 'default',
      fullWidth = false,
      className,
      disabled,
      ...props
    },
    ref
  ) => {
    const selectId = props.id || props.name;

    return (
      <div className={cn('space-y-1', fullWidth && 'w-full')}>
        {label && (
          <label
            htmlFor={selectId}
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            {label}
            {props.required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        <select
          ref={ref}
          id={selectId}
          className={cn(
            'rounded-md transition-colors duration-200',
            'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent',
            'disabled:opacity-50 disabled:cursor-not-allowed',
            'text-gray-900 dark:text-gray-100',
            sizeClasses[size],
            variantClasses[variant],
            error && 'border-red-500 dark:border-red-400',
            fullWidth && 'w-full',
            className
          )}
          disabled={disabled}
          {...props}
        >
          {placeholder && (
            <option value="" disabled>
              {placeholder}
            </option>
          )}
          {options.map((option) => (
            <option
              key={option.value}
              value={option.value}
              disabled={option.disabled}
            >
              {option.label}
            </option>
          ))}
        </select>
        {error && (
          <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
        )}
      </div>
    );
  }
);

Select.displayName = 'Select';

================
File: src/components/ui/Spinner.tsx
================
'use client';

import React from 'react';
import { cn } from '@/lib/utils';

export interface SpinnerProps extends React.HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg' | 'xl';
  variant?: 'primary' | 'secondary' | 'white';
}

const sizeClasses = {
  sm: 'h-4 w-4 border-2',
  md: 'h-6 w-6 border-2',
  lg: 'h-8 w-8 border-3',
  xl: 'h-12 w-12 border-4',
};

const variantClasses = {
  primary: 'border-blue-600 border-t-transparent',
  secondary: 'border-gray-600 border-t-transparent',
  white: 'border-white border-t-transparent',
};

export const Spinner: React.FC<SpinnerProps> = ({
  size = 'md',
  variant = 'primary',
  className,
  ...props
}) => {
  return (
    <div
      className={cn(
        'animate-spin rounded-full',
        sizeClasses[size],
        variantClasses[variant],
        className
      )}
      role="status"
      aria-label="Loading"
      {...props}
    >
      <span className="sr-only">Loading...</span>
    </div>
  );
};

Spinner.displayName = 'Spinner';

================
File: src/components/ui/Table copy.tsx
================
'use client';

import React from 'react';
import { cn } from '@/lib/utils';

// Table Root Component
export interface TableProps extends React.HTMLAttributes<HTMLTableElement> {
  variant?: 'default' | 'striped' | 'bordered';
  size?: 'sm' | 'md' | 'lg';
  responsive?: boolean;
}

const variantClasses = {
  default: '',
  striped: '[&_tbody_tr:nth-child(even)]:bg-gray-50 dark:[&_tbody_tr:nth-child(even)]:bg-gray-800',
  bordered: 'border border-gray-200 dark:border-gray-700',
};

const sizeClasses = {
  sm: '[&_th]:py-2 [&_th]:px-3 [&_td]:py-2 [&_td]:px-3 text-sm',
  md: '[&_th]:py-3 [&_th]:px-4 [&_td]:py-3 [&_td]:px-4',
  lg: '[&_th]:py-4 [&_th]:px-6 [&_td]:py-4 [&_td]:px-6 text-lg',
};

export const Table: React.FC<TableProps> = ({
  variant = 'default',
  size = 'md',
  responsive = true,
  className,
  children,
  ...props
}) => {
  const table = (
    <table
      className={cn(
        'min-w-full divide-y divide-gray-200 dark:divide-gray-700',
        variantClasses[variant],
        sizeClasses[size],
        className
      )}
      {...props}
    >
      {children}
    </table>
  );

  if (responsive) {
    return (
      <div className="overflow-x-auto -mx-4 sm:-mx-6 lg:-mx-8">
        <div className="inline-block min-w-full py-2 align-middle px-4 sm:px-6 lg:px-8">
          {table}
        </div>
      </div>
    );
  }

  return table;
};

// Table Header Component
export const TableHeader: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <thead
    className={cn('bg-gray-50 dark:bg-gray-800', className)}
    {...props}
  />
);

// Table Body Component
export const TableBody: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <tbody
    className={cn(
      'bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700',
      className
    )}
    {...props}
  />
);

// Table Row Component
export const TableRow: React.FC<React.HTMLAttributes<HTMLTableRowElement>> = ({
  className,
  ...props
}) => (
  <tr
    className={cn(
      'hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors',
      className
    )}
    {...props}
  />
);

// Table Head Cell Component
export interface TableHeadProps extends React.ThHTMLAttributes<HTMLTableCellElement> {
  sortable?: boolean;
  sorted?: 'asc' | 'desc' | false;
  onSort?: () => void;
}

export const TableHead: React.FC<TableHeadProps> = ({
  sortable = false,
  sorted = false,
  onSort,
  className,
  children,
  ...props
}) => (
  <th
    className={cn(
      'text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider',
      sortable && 'cursor-pointer select-none hover:text-gray-700 dark:hover:text-gray-200',
      className
    )}
    onClick={sortable ? onSort : undefined}
    {...props}
  >
    <div className="flex items-center space-x-1">
      <span>{children}</span>
      {sortable && (
        <span className="inline-flex flex-col">
          <svg
            className={cn(
              'w-3 h-3 -mb-1',
              sorted === 'asc' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-400'
            )}
            fill="currentColor"
            viewBox="0 0 320 512"
          >
            <path d="M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41z" />
          </svg>
          <svg
            className={cn(
              'w-3 h-3 -mt-1',
              sorted === 'desc' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-400'
            )}
            fill="currentColor"
            viewBox="0 0 320 512"
          >
            <path d="M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z" />
          </svg>
        </span>
      )}
    </div>
  </th>
);

// Table Cell Component
export const TableCell: React.FC<React.TdHTMLAttributes<HTMLTableCellElement>> = ({
  className,
  ...props
}) => (
  <td
    className={cn(
      'text-gray-900 dark:text-gray-100 whitespace-nowrap',
      className
    )}
    {...props}
  />
);

// Table Footer Component
export const TableFooter: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <tfoot
    className={cn(
      'bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700',
      className
    )}
    {...props}
  />
);

// Empty State Component
export interface TableEmptyProps {
  message?: string;
  icon?: React.ReactNode;
}

export const TableEmpty: React.FC<TableEmptyProps> = ({
  message = 'No data available',
  icon,
}) => (
  <TableRow>
    <TableCell
      colSpan={100}
      className="text-center py-8 text-gray-500 dark:text-gray-400"
    >
      <div className="flex flex-col items-center space-y-2">
        {icon && <div className="text-gray-400">{icon}</div>}
        <p>{message}</p>
      </div>
    </TableCell>
  </TableRow>
);

================
File: src/components/ui/Table.tsx
================
// src/components/ui/Table.tsx

'use client'; // Client component directive

import React from 'react';
import { cn } from '@/lib/utils'; // Utility for conditional class names

// Table Root Component Props interface
export interface TableProps extends React.HTMLAttributes<HTMLTableElement> {
  variant?: 'default' | 'striped' | 'bordered'; // Visual style of the table
  size?: 'sm' | 'md' | 'lg'; // Size variant for padding and font
  responsive?: boolean; // Controls whether the table is wrapped in an overflow container
  // Columns definition for the table
  columns: {
    key: string; // Unique key to access data from each row object
    label: string | React.ReactNode; // Label to display in the table header
    render?: (item: any) => React.ReactNode; // Optional render function for custom cell content
  }[];
  data: any[]; // Array of data objects to display in the table rows
}

// CSS classes for different table variants
const variantClasses = {
  default: '',
  striped: '[&_tbody_tr:nth-child(even)]:bg-gray-50 dark:[&_tbody_tr:nth-child(even)]:bg-gray-800',
  bordered: 'border border-gray-200 dark:border-gray-700',
};

// CSS classes for different table sizes
const sizeClasses = {
  sm: '[&_th]:py-2 [&_th]:px-3 [&_td]:py-2 [&_td]:px-3 text-sm',
  md: '[&_th]:py-3 [&_th]:px-4 [&_td]:py-3 [&_td]:px-4',
  lg: '[&_th]:py-4 [&_th]:px-6 [&_td]:py-4 [&_td]:px-6 text-lg',
};

// Main Table component
export const Table: React.FC<TableProps> = ({
  variant = 'default',
  size = 'md',
  responsive = true,
  className,
  columns, // Destructure columns prop
  data, // Destructure data prop
  // Note: 'children' prop is no longer used for rendering table content directly,
  // as columns and data are used for automatic rendering.
  ...props
}) => {
  // Inner table element
  const table = (
    <table
      className={cn(
        'min-w-full divide-y divide-gray-200 dark:divide-gray-700',
        variantClasses[variant],
        sizeClasses[size],
        className
      )}
      {...props}
    >
      {/* Table Header (<thead>) - automatically rendered from columns prop */}
      <TableHeader>
        <TableRow>
          {columns.map((col) => (
            <TableHead key={col.key}>{col.label}</TableHead>
          ))}
        </TableRow>
      </TableHeader>
      {/* Table Body (<tbody>) - automatically rendered from data and columns props */}
      <TableBody>
        {data.length > 0 ? (
          data.map((row, rowIndex) => (
            // Use row.id as key if available, fallback to rowIndex
            <TableRow key={row.id || rowIndex}>
              {columns.map((col) => (
                <TableCell key={col.key}>
                  {/* Render cell content using custom render function or direct key access */}
                  {col.render ? col.render(row) : (row[col.key] || '-')}
                </TableCell>
              ))}
            </TableRow>
          ))
        ) : (
          // Display empty state if no data
          <TableEmpty colSpan={columns.length} message="No data available" />
        )}
      </TableBody>
    </table>
  );

  // Wrap table in responsive container if responsive prop is true
  if (responsive) {
    return (
      <div className="overflow-x-auto -mx-4 sm:-mx-6 lg:-mx-8">
        <div className="inline-block min-w-full py-2 align-middle px-4 sm:px-6 lg:px-8">
          {table}
        </div>
      </div>
    );
  }

  return table;
};

// Table Header Component (<thead>)
export const TableHeader: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <thead
    className={cn('bg-gray-50 dark:bg-gray-800', className)}
    {...props}
  />
);

// Table Body Component (<tbody>)
export const TableBody: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <tbody
    className={cn(
      'bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700',
      className
    )}
    {...props}
  />
);

// Table Row Component (<tr>)
export const TableRow: React.FC<React.HTMLAttributes<HTMLTableRowElement>> = ({
  className,
  ...props
}) => (
  <tr
    className={cn(
      'hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors',
      className
    )}
    {...props}
  />
);

// Table Head Cell Component (<th>) Props interface
export interface TableHeadProps extends React.ThHTMLAttributes<HTMLTableCellElement> {
  sortable?: boolean; // Indicates if the column is sortable
  sorted?: 'asc' | 'desc' | false; // Current sort direction
  onSort?: () => void; // Callback for sorting
}

// Table Head Cell Component (<th>)
export const TableHead: React.FC<TableHeadProps> = ({
  sortable = false,
  sorted = false,
  onSort,
  className,
  children,
  ...props
}) => (
  <th
    className={cn(
      'text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider',
      sortable && 'cursor-pointer select-none hover:text-gray-700 dark:hover:text-gray-200',
      className
    )}
    onClick={sortable ? onSort : undefined}
    {...props}
  >
    <div className="flex items-center space-x-1">
      <span>{children}</span>
      {sortable && (
        <span className="inline-flex flex-col">
          {/* Up arrow for ascending sort */}
          <svg
            className={cn(
              'w-3 h-3 -mb-1',
              sorted === 'asc' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-400'
            )}
            fill="currentColor"
            viewBox="0 0 320 512"
          >
            <path d="M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41z" />
          </svg>
          {/* Down arrow for descending sort */}
          <svg
            className={cn(
              'w-3 h-3 -mt-1',
              sorted === 'desc' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-400'
            )}
            fill="currentColor"
            viewBox="0 0 320 512"
          >
            <path d="M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z" />
          </svg>
        </span>
      )}
    </div>
  </th>
);

// Table Cell Component (<td>)
export const TableCell: React.FC<React.TdHTMLAttributes<HTMLTableCellElement>> = ({
  className,
  ...props
}) => (
  <td
    className={cn(
      'text-gray-900 dark:text-gray-100 whitespace-nowrap',
      className
    )}
    {...props}
  />
);

// Table Footer Component (<tfoot>)
export const TableFooter: React.FC<React.HTMLAttributes<HTMLTableSectionElement>> = ({
  className,
  ...props
}) => (
  <tfoot
    className={cn(
      'bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700',
      className
    )}
    {...props}
  />
);

// Empty State Component Props interface
export interface TableEmptyProps {
  message?: string; // Message to display when no data is available
  icon?: React.ReactNode; // Optional icon to display
  colSpan?: number; // Number of columns the empty cell should span
}

// Empty State Component (used inside TableBody when data is empty)
export const TableEmpty: React.FC<TableEmptyProps> = ({
  message = 'No data available',
  icon,
  colSpan = 1, // Default colSpan to 1
}) => (
  <TableRow>
    <TableCell
      colSpan={colSpan} // Apply colSpan to the TableCell
      className="text-center py-8 text-gray-500 dark:text-gray-400"
    >
      <div className="flex flex-col items-center space-y-2">
        {icon && <div className="text-gray-400">{icon}</div>}
        <p>{message}</p>
      </div>
    </TableCell>
  </TableRow>
);

================
File: src/components/ui/Tabs.tsx
================
'use client';

import React, { createContext, useContext, useState } from 'react';
import { cn } from '@/lib/utils';

interface TabsContextValue {
  activeTab: string;
  setActiveTab: (value: string) => void;
}

const TabsContext = createContext<TabsContextValue | undefined>(undefined);

export interface TabsProps {
  defaultValue?: string;
  value?: string;
  onValueChange?: (value: string) => void;
  className?: string;
  children: React.ReactNode;
}

export const Tabs: React.FC<TabsProps> = ({
  defaultValue,
  value,
  onValueChange,
  className,
  children,
}) => {
  const [internalValue, setInternalValue] = useState(defaultValue || '');
  const activeTab = value !== undefined ? value : internalValue;

  const setActiveTab = (newValue: string) => {
    if (value === undefined) {
      setInternalValue(newValue);
    }
    onValueChange?.(newValue);
  };

  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>
      <div className={cn('w-full', className)}>{children}</div>
    </TabsContext.Provider>
  );
};

export interface TabsListProps {
  className?: string;
  children: React.ReactNode;
}

export const TabsList: React.FC<TabsListProps> = ({ className, children }) => {
  return (
    <div
      className={cn(
        'inline-flex h-10 items-center justify-start rounded-lg bg-gray-100 dark:bg-gray-800 p-1',
        className
      )}
      role="tablist"
    >
      {children}
    </div>
  );
};

export interface TabsTriggerProps {
  value: string;
  disabled?: boolean;
  className?: string;
  children: React.ReactNode;
}

export const TabsTrigger: React.FC<TabsTriggerProps> = ({
  value,
  disabled = false,
  className,
  children,
}) => {
  const context = useContext(TabsContext);
  if (!context) throw new Error('TabsTrigger must be used within Tabs');

  const { activeTab, setActiveTab } = context;
  const isActive = activeTab === value;

  return (
    <button
      type="button"
      role="tab"
      aria-selected={isActive}
      aria-controls={`panel-${value}`}
      data-state={isActive ? 'active' : 'inactive'}
      disabled={disabled}
      onClick={() => setActiveTab(value)}
      className={cn(
        'inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5',
        'text-sm font-medium ring-offset-background transition-all',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
        'disabled:pointer-events-none disabled:opacity-50',
        isActive
          ? 'bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 shadow-sm'
          : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100',
        className
      )}
    >
      {children}
    </button>
  );
};

export interface TabsContentProps {
  value: string;
  className?: string;
  children: React.ReactNode;
}

export const TabsContent: React.FC<TabsContentProps> = ({
  value,
  className,
  children,
}) => {
  const context = useContext(TabsContext);
  if (!context) throw new Error('TabsContent must be used within Tabs');

  const { activeTab } = context;
  const isActive = activeTab === value;

  if (!isActive) return null;

  return (
    <div
      role="tabpanel"
      id={`panel-${value}`}
      aria-labelledby={`trigger-${value}`}
      tabIndex={0}
      className={cn(
        'mt-2 ring-offset-background',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
        className
      )}
    >
      {children}
    </div>
  );
};

================
File: src/components/ui/Textarea.tsx
================
import { cn } from '@/lib/utils';
import { forwardRef } from 'react';

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label?: string;
  error?: string;
  helperText?: string;
}

const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, label, error, helperText, id, ...props }, ref) => {
    const textareaId = id || `textarea-${Math.random().toString(36).substr(2, 9)}`;

    return (
      <div className="space-y-1">
        {label && (
          <label 
            htmlFor={textareaId} 
            className="block text-sm font-medium text-gray-700"
          >
            {label}
            {props.required && <span className="text-red-500 ml-1">*</span>}
          </label>
        )}
        <textarea
          id={textareaId}
          className={cn(
            'block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm',
            error && 'border-red-300 focus:border-red-500 focus:ring-red-500',
            props.disabled && 'bg-gray-50 text-gray-500 cursor-not-allowed',
            className
          )}
          ref={ref}
          {...props}
        />
        {error && (
          <p className="text-sm text-red-600" id={`${textareaId}-error`}>
            {error}
          </p>
        )}
        {helperText && !error && (
          <p className="text-sm text-gray-500" id={`${textareaId}-helper`}>
            {helperText}
          </p>
        )}
      </div>
    );
  }
);

Textarea.displayName = 'Textarea';

export { Textarea };

================
File: src/components/vocabulary/index.ts
================
export { VocabularyForm } from './VocabularyForm';
export { VocabularyGroupForm } from './VocabularyGroupForm';

================
File: src/components/vocabulary/VocabularyForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Save, X, Plus, Volume2 } from 'lucide-react';
import { Vocabulary, DifficultyLevel, VocabularyGroup, Book } from '@/types/database';
import { vocabularyService, CreateVocabularyData, UpdateVocabularyData } from '@/lib/supabase/vocabulary';
import { 
  Button, Card, Input, Textarea, Select, Badge, Spinner 
} from '@/components/ui';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/contexts/AuthContext';

interface VocabularyFormProps {
  initialData?: Vocabulary;
  onSave?: (formData: Omit<Vocabulary, "id" | "created_at" | "updated_at">) => Promise<void>;
  isLoading?: boolean;
  onCancel?: () => void;
}

export function VocabularyForm({ initialData, onSave, isLoading, onCancel }: VocabularyFormProps) {
  const router = useRouter();
  const { user } = useAuth();
  const supabase = createClientComponentClient();
  const isEditing = !!initialData;
  const [loading, setLoading] = useState(false);

  const [formData, setFormData] = useState({
    word: initialData?.word || '',
    translation: initialData?.translation || '',
    pronunciation: initialData?.pronunciation || '',
    part_of_speech: initialData?.part_of_speech || '',
    definition: initialData?.definition || '',
    example_sentence: initialData?.example_sentence || '',
    example_translation: initialData?.example_translation || '',
    notes: initialData?.notes || '',
    difficulty: initialData?.difficulty || 'beginner' as DifficultyLevel,
    audio_url: initialData?.audio_url || '',
    image_url: initialData?.image_url || '',
    tags: initialData?.tags || [],
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newTag, setNewTag] = useState('');
  
  // Relationships
  const [availableGroups, setAvailableGroups] = useState<VocabularyGroup[]>([]);
  const [availableBooks, setAvailableBooks] = useState<Book[]>([]);
  const [selectedGroups, setSelectedGroups] = useState<string[]>([]);
  const [selectedBooks, setSelectedBooks] = useState<string[]>([]);

  useEffect(() => {
    loadAvailableOptions();
    if (isEditing && initialData) {
      loadExistingRelationships();
    }
  }, []);

  const loadAvailableOptions = async () => {
    try {
      // Load available groups
      const { data: groups } = await supabase
        .from('vocabulary_groups')
        .select('id, name, language, difficulty, is_public, user_id, created_at, updated_at')
        .order('name');
      
      // Load available books
      const { data: books } = await supabase
        .from('books')
        .select('id, title, user_id, created_at, updated_at, content_type, language, is_public')
        .order('title');

      setAvailableGroups(groups as VocabularyGroup[] || []);
      setAvailableBooks(books as Book[] || []);
    } catch (error) {
      console.error('Failed to load available options:', error);
    }
  };

  const loadExistingRelationships = async () => {
    if (!initialData) return;

    try {
      // Load existing group relationships
      const { data: groupRelations } = await supabase
        .from('vocabulary_group_items')
        .select('vocabulary_group_id')
        .eq('vocabulary_id', initialData.id);

      // Load existing book relationships (we need to create this table)
      const { data: bookRelations } = await supabase
        .from('vocabulary_books')
        .select('book_id')
        .eq('vocabulary_id', initialData.id);

      setSelectedGroups(groupRelations?.map(r => r.vocabulary_group_id) || []);
      setSelectedBooks(bookRelations?.map(r => r.book_id) || []);
    } catch (error) {
      console.error('Failed to load existing relationships:', error);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.word.trim()) {
      newErrors.word = 'Word is required';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm() || !user) return;
    
    if (onSave) {
      // Use external onSave handler
      await onSave({ ...formData, user_id: user.id });
    } else {
      // Use internal logic for standalone form
      setLoading(true);
      try {
        let vocabularyId: string;
        
        if (isEditing) {
          await vocabularyService.updateVocabulary({ id: initialData.id, ...formData } as UpdateVocabularyData);
          vocabularyId = initialData.id;
        } else {
          const newVocabulary = await vocabularyService.createVocabulary(formData as CreateVocabularyData);
          vocabularyId = newVocabulary.id;
        }
        
        // Save relationships
        await saveRelationships(vocabularyId);
        
        router.push('/vocabulary');
        router.refresh();
      } catch (error: any) {
        console.error('Failed to save vocabulary:', error);
        setErrors({ submit: error.message || 'Failed to save vocabulary. Please try again.' });
      } finally {
        setLoading(false);
      }
    }
  };

  const saveRelationships = async (vocabularyId: string) => {
    try {
      // Save group relationships
      if (isEditing) {
        // Remove existing group relationships
        await supabase
          .from('vocabulary_group_items')
          .delete()
          .eq('vocabulary_id', vocabularyId);
      }

      // Add new group relationships
      if (selectedGroups.length > 0) {
        const groupItems = selectedGroups.map((groupId, index) => ({
          vocabulary_group_id: groupId,
          vocabulary_id: vocabularyId,
          position: index
        }));

        await supabase
          .from('vocabulary_group_items')
          .insert(groupItems);
      }

      // Save book relationships (when we create the table)
      if (isEditing) {
        // Remove existing book relationships
        await supabase
          .from('vocabulary_books')
          .delete()
          .eq('vocabulary_id', vocabularyId);
      }

      // Add new book relationships
      if (selectedBooks.length > 0) {
        const bookItems = selectedBooks.map(bookId => ({
          vocabulary_id: vocabularyId,
          book_id: bookId
        }));

        await supabase
          .from('vocabulary_books')
          .insert(bookItems);
      }
    } catch (error) {
      console.error('Failed to save relationships:', error);
      // Note: We could make this non-fatal and just show a warning
    }
  };

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({ ...formData, tags: [...formData.tags, newTag.trim()] });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({ ...formData, tags: formData.tags.filter(t => t !== tag) });
  };

  const difficultyLevels = vocabularyService.getDifficultyLevels();
  const partsOfSpeech = vocabularyService.getPartsOfSpeechOptions();

  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={() => router.back()}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back
        </Button>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Vocabulary' : 'Add New Vocabulary'}
        </h1>
      </div>

      {errors.submit && (
        <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
          {errors.submit}
        </div>
      )}

      <div className="space-y-6">
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Basic Information</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="Word"
                value={formData.word}
                onChange={(e) => setFormData({ ...formData, word: e.target.value })}
                error={errors.word}
                placeholder="Enter the word"
                required
              />
              <Input
                label="Translation"
                value={formData.translation}
                onChange={(e) => setFormData({ ...formData, translation: e.target.value })}
                placeholder="Enter translation"
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Input
                label="Pronunciation"
                value={formData.pronunciation}
                onChange={(e) => setFormData({ ...formData, pronunciation: e.target.value })}
                placeholder="e.g., /həˈloʊ/"
              />
              <Select
                label="Part of Speech"
                value={formData.part_of_speech}
                onChange={(e) => setFormData({ ...formData, part_of_speech: e.target.value })}
                options={[
                  { value: '', label: 'Select part of speech' },
                  ...partsOfSpeech
                ]}
              />
            </div>

            <Textarea
              label="Definition"
              value={formData.definition}
              onChange={(e) => setFormData({ ...formData, definition: e.target.value })}
              placeholder="Enter the definition of the word"
              rows={3}
            />
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Examples & Usage</h2></Card.Header>
          <Card.Content className="space-y-4">
            <Textarea
              label="Example Sentence"
              value={formData.example_sentence}
              onChange={(e) => setFormData({ ...formData, example_sentence: e.target.value })}
              placeholder="Enter an example sentence using this word"
              rows={2}
            />
            
            <Textarea
              label="Example Translation"
              value={formData.example_translation}
              onChange={(e) => setFormData({ ...formData, example_translation: e.target.value })}
              placeholder="Enter the translation of the example sentence"
              rows={2}
            />

            <Textarea
              label="Notes"
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              placeholder="Additional notes, usage tips, or context"
              rows={3}
            />
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Media & Classification</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Input
                  label="Audio URL"
                  type="url"
                  value={formData.audio_url}
                  onChange={(e) => setFormData({ ...formData, audio_url: e.target.value })}
                  placeholder="https://example.com/audio.mp3"
                />
                {formData.audio_url && (
                  <div className="mt-2 flex items-center gap-2">
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      leftIcon={<Volume2 className="h-4 w-4" />}
                      onClick={() => {
                        const audio = new Audio(formData.audio_url);
                        audio.play().catch(console.error);
                      }}
                    >
                      Test Audio
                    </Button>
                  </div>
                )}
              </div>
              
              <Input
                label="Image URL"
                type="url"
                value={formData.image_url}
                onChange={(e) => setFormData({ ...formData, image_url: e.target.value })}
                placeholder="https://example.com/image.jpg"
              />
            </div>

            <Select
              label="Difficulty Level"
              value={formData.difficulty}
              onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as DifficultyLevel })}
              options={difficultyLevels.map(level => ({
                value: level.value,
                label: level.label
              }))}
            />

            {formData.image_url && (
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Image Preview
                </label>
                <div className="w-32 h-32 border rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-800">
                  <img
                    src={formData.image_url}
                    alt={formData.word}
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      const target = e.target as HTMLImageElement;
                      target.style.display = 'none';
                    }}
                  />
                </div>
              </div>
            )}
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Relationships</h2></Card.Header>
          <Card.Content className="space-y-6">
            {/* Vocabulary Groups */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Vocabulary Groups
              </label>
              <div className="space-y-2">
                {availableGroups.map((group) => (
                  <label key={group.id} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={selectedGroups.includes(group.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedGroups([...selectedGroups, group.id]);
                        } else {
                          setSelectedGroups(selectedGroups.filter(id => id !== group.id));
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-sm">{group.name}</span>
                  </label>
                ))}
              </div>
              {selectedGroups.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-gray-600">
                    Selected {selectedGroups.length} group{selectedGroups.length !== 1 ? 's' : ''}
                  </p>
                </div>
              )}
            </div>

            {/* Books */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Related Books
              </label>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {availableBooks.map((book) => (
                  <label key={book.id} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      checked={selectedBooks.includes(book.id)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedBooks([...selectedBooks, book.id]);
                        } else {
                          setSelectedBooks(selectedBooks.filter(id => id !== book.id));
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-sm">{book.title}</span>
                  </label>
                ))}
              </div>
              {selectedBooks.length > 0 && (
                <div className="mt-2">
                  <p className="text-sm text-gray-600">
                    Selected {selectedBooks.length} book{selectedBooks.length !== 1 ? 's' : ''}
                  </p>
                </div>
              )}
            </div>
          </Card.Content>
        </Card>
        
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Tags</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="flex gap-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="Add a tag"
                onKeyPress={(e) => { if (e.key === 'Enter') { e.preventDefault(); handleAddTag(); }}}
              />
              <Button type="button" onClick={handleAddTag} leftIcon={<Plus className="h-4 w-4" />}>Add</Button>
            </div>
            {formData.tags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.tags.map((tag) => (
                  <Badge key={tag} variant="secondary" className="px-3 py-1">
                    {tag}
                    <button type="button" onClick={() => handleRemoveTag(tag)} className="ml-2 hover:text-red-500">
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                ))}
              </div>
            )}
          </Card.Content>
        </Card>

        <div className="flex justify-end gap-3">
          <Button type="button" variant="outline" onClick={onCancel || (() => router.push('/vocabulary'))}>Cancel</Button>
          <Button type="submit" loading={isLoading !== undefined ? isLoading : loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Vocabulary' : 'Create Vocabulary'}
          </Button>
        </div>
      </div>
    </form>
  );
}

================
File: src/components/vocabulary/VocabularyGroupForm.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { ArrowLeft, Save, X, Plus, Upload, FileText, Book, Search } from 'lucide-react';
import { VocabularyGroup, Category, DifficultyLevel, Book as BookType } from '@/types/database';
import { vocabularyService, CreateVocabularyGroupData, UpdateVocabularyGroupData } from '@/lib/supabase/vocabulary';
import { categoryService } from '@/lib/supabase/categories';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { useAuth } from '@/contexts/AuthContext';
import { 
  Button, Card, Input, Textarea, Select, Badge, Modal, Spinner 
} from '@/components/ui';

interface VocabularyGroupFormProps {
  initialData?: VocabularyGroup;
  onSave?: (formData: Omit<VocabularyGroup, "id" | "created_at" | "updated_at">) => Promise<void>;
  isLoading?: boolean;
  onCancel?: () => void;
}

export function VocabularyGroupForm({ initialData, onSave, isLoading, onCancel }: VocabularyGroupFormProps) {
  const router = useRouter();
  const { user } = useAuth();
  const supabase = createClientComponentClient();
  const isEditing = !!initialData;
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);

  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#6b7280');

  // Batch vocabulary creation
  const [batchVocabulary, setBatchVocabulary] = useState('');
  const [batchProcessing, setBatchProcessing] = useState(false);
  const [batchPreview, setBatchPreview] = useState<any[]>([]);
  const [showBatchPreview, setShowBatchPreview] = useState(false);

  // Book relationships
  const [availableBooks, setAvailableBooks] = useState<BookType[]>([]);
  const [selectedBooks, setSelectedBooks] = useState<string[]>([]);
  const [showBookModal, setShowBookModal] = useState(false);
  const [bookSearchTerm, setBookSearchTerm] = useState('');

  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    description: initialData?.description || '',
    category_id: initialData?.category_id || '',
    language: initialData?.language || 'en',
    target_language: initialData?.target_language || '',
    difficulty: initialData?.difficulty || 'beginner' as DifficultyLevel,
    tags: initialData?.tags || [],
    is_public: initialData?.is_public || false,
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [newTag, setNewTag] = useState('');

  useEffect(() => {
    loadCategories();
    loadAvailableBooks();
    if (isEditing && initialData) {
      loadExistingBookRelationships();
    }
  }, []);

  const loadAvailableBooks = async () => {
    try {
      const { data, error } = await supabase
        .from('books')
        .select('id, title, author, cover_image_url')
        .order('title');

      if (error) throw error;
      setAvailableBooks(data as BookType[] || []);
    } catch (error) {
      console.error('Failed to load available books:', error);
    }
  };

  const loadExistingBookRelationships = async () => {
    if (!initialData) return;

    try {
      const { data, error } = await supabase
        .from('vocabulary_group_books')
        .select('book_id')
        .eq('vocabulary_group_id', initialData.id);

      if (error) throw error;
      setSelectedBooks(data?.map(r => r.book_id) || []);
    } catch (error) {
      console.error('Failed to load existing book relationships:', error);
    }
  };

  const loadCategories = async () => {
    try {
      const data = await categoryService.getCategories({ type: 'vocabulary' });
      setCategories(data);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.name.trim()) {
      newErrors.name = 'Group name is required';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validateForm() || !user) return;
    
    if (onSave) {
      // Use external onSave handler
      await onSave({ ...formData, user_id: user.id });
    } else {
      // Use internal logic for standalone form
      setLoading(true);
      try {
        let groupId: string;
        
        if (isEditing) {
          await vocabularyService.updateVocabularyGroup({ id: initialData.id, ...formData } as UpdateVocabularyGroupData);
          groupId = initialData.id;
        } else {
          const newGroup = await vocabularyService.createVocabularyGroup(formData as CreateVocabularyGroupData);
          groupId = newGroup.id;
        }
        
        // Process batch vocabulary if present
        if (batchVocabulary.trim() && batchPreview.length > 0) {
          await processBatchVocabulary(groupId);
        }

        // Save book relationships
        await saveBookRelationships(groupId);
        
        router.push('/vocabulary/groups');
        router.refresh();
      } catch (error: any) {
        console.error('Failed to save vocabulary group:', error);
        setErrors({ submit: error.message || 'Failed to save vocabulary group. Please try again.' });
      } finally {
        setLoading(false);
      }
    }
  };

  const parseBatchVocabulary = (text: string) => {
    const lines = text.split('\n').filter(line => line.trim());
    const parsed = [];
    
    for (const line of lines) {
      // Pattern: word,pos,definition
      // Example: area,n.,a region or part of a town, a country, or the world
      const parts = line.split(',');
      if (parts.length >= 3) {
        const word = parts[0].trim();
        const partOfSpeech = parts[1].trim();
        const definition = parts.slice(2).join(',').trim();
        
        if (word && definition) {
          parsed.push({
            word,
            part_of_speech: partOfSpeech,
            definition,
            difficulty: formData.difficulty,
            tags: formData.tags.length > 0 ? formData.tags : undefined
          });
        }
      }
    }
    
    return parsed;
  };

  const handleBatchPreview = () => {
    if (!batchVocabulary.trim()) return;
    
    const parsed = parseBatchVocabulary(batchVocabulary);
    setBatchPreview(parsed);
    setShowBatchPreview(true);
  };

  const processBatchVocabulary = async (groupId: string) => {
    if (batchPreview.length === 0) return;
    
    setBatchProcessing(true);
    try {
      const { data: user } = await supabase.auth.getUser();
      if (!user.user) throw new Error('User not authenticated');
      
      for (const vocabData of batchPreview) {
        try {
          // Check if vocabulary already exists
          const { data: existing } = await supabase
            .from('vocabulary')
            .select('id')
            .eq('word', vocabData.word)
            .eq('user_id', user.user.id)
            .single();
          
          let vocabularyId;
          
          if (existing) {
            // Use existing vocabulary
            vocabularyId = existing.id;
          } else {
            // Create new vocabulary
            const { data: newVocab, error } = await supabase
              .from('vocabulary')
              .insert({
                ...vocabData,
                user_id: user.user.id
              })
              .select('id')
              .single();
              
            if (error) throw error;
            vocabularyId = newVocab.id;
          }
          
          // Add to group (check if relationship already exists)
          const { data: existingRelation } = await supabase
            .from('vocabulary_group_items')
            .select('id')
            .eq('vocabulary_group_id', groupId)
            .eq('vocabulary_id', vocabularyId)
            .single();
          
          if (!existingRelation) {
            await supabase
              .from('vocabulary_group_items')
              .insert({
                vocabulary_group_id: groupId,
                vocabulary_id: vocabularyId,
                position: 0
              });
          }
        } catch (error) {
          console.error(`Failed to process vocabulary word "${vocabData.word}":`, error);
          // Continue with next word
        }
      }
    } catch (error) {
      console.error('Failed to process batch vocabulary:', error);
      throw error;
    } finally {
      setBatchProcessing(false);
    }
  };

  const saveBookRelationships = async (groupId: string) => {
    try {
      // Remove existing relationships if editing
      if (isEditing) {
        await supabase
          .from('vocabulary_group_books')
          .delete()
          .eq('vocabulary_group_id', groupId);
      }

      // Add new relationships
      if (selectedBooks.length > 0) {
        const bookItems = selectedBooks.map((bookId, index) => ({
          vocabulary_group_id: groupId,
          book_id: bookId,
          position: index
        }));

        await supabase
          .from('vocabulary_group_books')
          .insert(bookItems);
      }
    } catch (error) {
      console.error('Failed to save book relationships:', error);
      // Non-fatal error, continue
    }
  };

  const handleBookToggle = (bookId: string) => {
    setSelectedBooks(prev => 
      prev.includes(bookId) 
        ? prev.filter(id => id !== bookId)
        : [...prev, bookId]
    );
  };

  const filteredBooks = availableBooks.filter(book =>
    book.title.toLowerCase().includes(bookSearchTerm.toLowerCase()) ||
    (book.author && book.author.toLowerCase().includes(bookSearchTerm.toLowerCase()))
  );

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({ ...formData, tags: [...formData.tags, newTag.trim()] });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tag: string) => {
    setFormData({ ...formData, tags: formData.tags.filter(t => t !== tag) });
  };

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;

    try {
      const newCategory = await categoryService.createCategory({
        name: newCategoryName,
        type: 'vocabulary',
        color: newCategoryColor,
      });

      setIsCategoryModalOpen(false);
      setNewCategoryName('');
      await loadCategories();
      setFormData({ ...formData, category_id: newCategory.id });
      
    } catch (error) {
      console.error("Failed to create vocabulary category:", error);
    }
  };

  const difficultyLevels = vocabularyService.getDifficultyLevels();

  const commonLanguages = [
    { value: 'en', label: 'English' },
    { value: 'es', label: 'Spanish' },
    { value: 'fr', label: 'French' },
    { value: 'de', label: 'German' },
    { value: 'it', label: 'Italian' },
    { value: 'pt', label: 'Portuguese' },
    { value: 'ru', label: 'Russian' },
    { value: 'ja', label: 'Japanese' },
    { value: 'ko', label: 'Korean' },
    { value: 'zh', label: 'Chinese' },
    { value: 'ar', label: 'Arabic' },
    { value: 'hi', label: 'Hindi' },
  ];

  return (
    <form onSubmit={handleSubmit} className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <Button
          type="button"
          variant="ghost"
          size="sm"
          onClick={() => router.back()}
          leftIcon={<ArrowLeft className="h-4 w-4" />}
          className="mb-4"
        >
          Back
        </Button>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
          {isEditing ? 'Edit Vocabulary Group' : 'Create New Vocabulary Group'}
        </h1>
      </div>

      {errors.submit && (
        <div className="mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg">
          {errors.submit}
        </div>
      )}

      <div className="space-y-6">
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Basic Information</h2></Card.Header>
          <Card.Content className="space-y-4">
            <Input
              label="Group Name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              error={errors.name}
              placeholder="Enter group name"
              required
            />
            
            <Textarea
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="Describe this vocabulary group"
              rows={3}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                  Category
                </label>
                <div className="flex items-center gap-2">
                  <Select
                    className="flex-grow"
                    value={formData.category_id}
                    onChange={(e) => setFormData({ ...formData, category_id: e.target.value })}
                    options={[
                      { value: '', label: 'Select category' },
                      ...categories.map(cat => ({ value: cat.id, label: cat.name }))
                    ]}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="md"
                    onClick={() => setIsCategoryModalOpen(true)}
                    className="flex-shrink-0 !h-10"
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              <Select
                label="Difficulty Level"
                value={formData.difficulty}
                onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as DifficultyLevel })}
                options={difficultyLevels.map(level => ({
                  value: level.value,
                  label: level.label
                }))}
              />
            </div>
          </Card.Content>
        </Card>

        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Language Settings</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Select
                label="Source Language"
                value={formData.language}
                onChange={(e) => setFormData({ ...formData, language: e.target.value })}
                options={commonLanguages}
              />
              
              <Select
                label="Target Language"
                value={formData.target_language}
                onChange={(e) => setFormData({ ...formData, target_language: e.target.value })}
                options={[
                  { value: '', label: 'Select target language' },
                  ...commonLanguages
                ]}
              />
            </div>

            <div className="flex items-center space-x-2 pt-2">
              <input
                type="checkbox"
                id="is_public"
                checked={formData.is_public}
                onChange={(e) => setFormData({ ...formData, is_public: e.target.checked })}
                className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
              />
              <label htmlFor="is_public" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                Make this group publicly accessible
              </label>
            </div>
          </Card.Content>
        </Card>

        {!isEditing && (
          <Card>
            <Card.Header>
              <div className="flex items-center gap-2">
                <FileText className="h-5 w-5" />
                <h2 className="text-lg font-semibold">Batch Vocabulary Import</h2>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                Add multiple vocabulary words at once. Each line should follow the pattern: word,part_of_speech,definition
              </p>
            </Card.Header>
            <Card.Content className="space-y-4">
              <Textarea
                label="Vocabulary Data"
                value={batchVocabulary}
                onChange={(e) => setBatchVocabulary(e.target.value)}
                placeholder={`area,n.,a region or part of a town, a country, or the world
beautiful,adj.,pleasing the senses or mind aesthetically
create,v.,bring something into existence`}
                rows={8}
                className="font-mono text-sm"
              />
              
              <div className="flex items-center gap-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleBatchPreview}
                  disabled={!batchVocabulary.trim()}
                  leftIcon={<Upload className="h-4 w-4" />}
                >
                  Preview Import ({parseBatchVocabulary(batchVocabulary).length} words)
                </Button>
                {batchPreview.length > 0 && (
                  <Badge variant="success">
                    {batchPreview.length} words ready for import
                  </Badge>
                )}
              </div>

              {errors.batch && (
                <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg text-sm">
                  {errors.batch}
                </div>
              )}

              <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg text-sm text-blue-800 dark:text-blue-200">
                <p className="font-medium">Format Instructions:</p>
                <ul className="mt-1 space-y-1 text-xs">
                  <li>• Each line represents one vocabulary word</li>
                  <li>• Format: word,part_of_speech,definition</li>
                  <li>• Commas in definitions are allowed</li>
                  <li>• If a word already exists, it will only be added to this group</li>
                  <li>• All words will inherit the difficulty level and tags from this group</li>
                </ul>
              </div>
            </Card.Content>
          </Card>
        )}
        
        <Card>
          <Card.Header><h2 className="text-lg font-semibold">Tags</h2></Card.Header>
          <Card.Content className="space-y-4">
            <div className="flex gap-2">
              <Input
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                placeholder="Add a tag"
                onKeyPress={(e) => { if (e.key === 'Enter') { e.preventDefault(); handleAddTag(); }}}
              />
              <Button type="button" onClick={handleAddTag} leftIcon={<Plus className="h-4 w-4" />}>Add</Button>
            </div>
            {formData.tags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.tags.map((tag) => (
                  <Badge key={tag} variant="secondary" className="px-3 py-1">
                    {tag}
                    <button type="button" onClick={() => handleRemoveTag(tag)} className="ml-2 hover:text-red-500">
                      <X className="h-3 w-3" />
                    </button>
                  </Badge>
                ))}
              </div>
            )}
          </Card.Content>
        </Card>

        <Card>
          <Card.Header>
            <div className="flex items-center gap-2">
              <Book className="h-5 w-5" />
              <h2 className="text-lg font-semibold">Related Books</h2>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
              Associate this vocabulary group with books where these words appear
            </p>
          </Card.Header>
          <Card.Content className="space-y-4">
            <div className="flex items-center justify-between">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {selectedBooks.length} book{selectedBooks.length !== 1 ? 's' : ''} selected
              </p>
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowBookModal(true)}
              >
                Select Books
              </Button>
            </div>

            {selectedBooks.length > 0 && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {selectedBooks.map(bookId => {
                  const book = availableBooks.find(b => b.id === bookId);
                  if (!book) return null;
                  
                  return (
                    <div key={bookId} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        {book.cover_image_url && (
                          <img
                            src={book.cover_image_url}
                            alt={book.title}
                            className="w-10 h-12 object-cover rounded"
                          />
                        )}
                        <div>
                          <h4 className="font-medium text-sm">{book.title}</h4>
                          {book.author && (
                            <p className="text-xs text-gray-600">{book.author}</p>
                          )}
                        </div>
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => handleBookToggle(bookId)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  );
                })}
              </div>
            )}
          </Card.Content>
        </Card>

        <div className="flex justify-end gap-3">
          <Button type="button" variant="outline" onClick={onCancel || (() => router.push('/vocabulary/groups'))}>Cancel</Button>
          <Button type="submit" loading={isLoading !== undefined ? isLoading : loading} leftIcon={<Save className="h-4 w-4" />}>
            {isEditing ? 'Update Group' : 'Create Group'}
          </Button>
        </div>
      </div>

      <Modal
        isOpen={isCategoryModalOpen}
        onClose={() => setIsCategoryModalOpen(false)}
        title="Create New Vocabulary Category"
        size="sm"
      >
        <div className="space-y-4">
          <Input
            label="Category Name"
            value={newCategoryName}
            onChange={(e) => setNewCategoryName(e.target.value)}
            placeholder="e.g., Business, Academic, etc."
            required
          />
          <Input
            label="Category Color"
            type="color"
            value={newCategoryColor}
            onChange={(e) => setNewCategoryColor(e.target.value)}
            className="h-10"
          />
        </div>
        <div className="mt-6 flex justify-end gap-3">
          <Button variant="ghost" onClick={() => setIsCategoryModalOpen(false)}>
            Cancel
          </Button>
          <Button onClick={handleCreateCategory}>
            Create Category
          </Button>
        </div>
      </Modal>

      {/* Batch Preview Modal */}
      <Modal
        isOpen={showBatchPreview}
        onClose={() => setShowBatchPreview(false)}
        title="Batch Import Preview"
        size="lg"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              Preview of {batchPreview.length} vocabulary words to be imported
            </p>
            <Badge variant="info">
              {batchPreview.filter(w => w.word).length} new + {batchPreview.length - batchPreview.filter(w => w.word).length} existing
            </Badge>
          </div>

          <div className="max-h-96 overflow-y-auto border rounded-lg">
            <table className="w-full text-sm">
              <thead className="bg-gray-50 dark:bg-gray-800 sticky top-0">
                <tr>
                  <th className="text-left p-2 border-r">Word</th>
                  <th className="text-left p-2 border-r">Part of Speech</th>
                  <th className="text-left p-2">Definition</th>
                </tr>
              </thead>
              <tbody>
                {batchPreview.map((word, index) => (
                  <tr key={index} className="border-t hover:bg-gray-50 dark:hover:bg-gray-800">
                    <td className="p-2 border-r font-medium">{word.word}</td>
                    <td className="p-2 border-r">
                      <Badge variant="secondary" className="text-xs">
                        {word.part_of_speech}
                      </Badge>
                    </td>
                    <td className="p-2 text-gray-600 dark:text-gray-400">
                      {word.definition.length > 100 
                        ? `${word.definition.substring(0, 100)}...` 
                        : word.definition}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          <div className="p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg text-sm text-yellow-800 dark:text-yellow-200">
            <p className="font-medium">Import Notes:</p>
            <ul className="mt-1 space-y-1 text-xs">
              <li>• Words will be created with difficulty: <Badge variant="secondary" className="text-xs">{formData.difficulty}</Badge></li>
              {formData.tags.length > 0 && (
                <li>• Words will be tagged with: {formData.tags.map(tag => (
                  <Badge key={tag} variant="secondary" className="text-xs mr-1">{tag}</Badge>
                ))}</li>
              )}
              <li>• Existing words will only be added to this group (not modified)</li>
            </ul>
          </div>

          <div className="flex justify-end gap-3">
            <Button variant="outline" onClick={() => setShowBatchPreview(false)}>
              Back to Edit
            </Button>
            <Button 
              onClick={() => setShowBatchPreview(false)}
              leftIcon={<Save className="h-4 w-4" />}
            >
              Confirm Import
            </Button>
          </div>
        </div>
      </Modal>

      {/* Book Selection Modal */}
      <Modal
        isOpen={showBookModal}
        onClose={() => setShowBookModal(false)}
        title="Select Related Books"
        size="lg"
      >
        <div className="space-y-4">
          <Input
            placeholder="Search books by title or author..."
            value={bookSearchTerm}
            onChange={(e) => setBookSearchTerm(e.target.value)}
          />

          <div className="max-h-96 overflow-y-auto">
            {filteredBooks.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-500">
                  {bookSearchTerm ? 'No books found matching your search.' : 'No books available.'}
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {filteredBooks.map((book) => (
                  <div
                    key={book.id}
                    className={`border rounded-lg p-3 cursor-pointer transition-colors ${
                      selectedBooks.includes(book.id)
                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleBookToggle(book.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <input
                          type="checkbox"
                          checked={selectedBooks.includes(book.id)}
                          onChange={() => handleBookToggle(book.id)}
                          className="rounded"
                        />
                        {book.cover_image_url && (
                          <img
                            src={book.cover_image_url}
                            alt={book.title}
                            className="w-12 h-16 object-cover rounded"
                          />
                        )}
                        <div>
                          <h4 className="font-medium">{book.title}</h4>
                          {book.author && (
                            <p className="text-sm text-gray-600">{book.author}</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          <div className="flex justify-between items-center border-t pt-4">
            <p className="text-sm text-gray-600">
              {selectedBooks.length} book{selectedBooks.length !== 1 ? 's' : ''} selected
            </p>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={() => setShowBookModal(false)}>
                Cancel
              </Button>
              <Button onClick={() => setShowBookModal(false)}>
                Done
              </Button>
            </div>
          </div>
        </div>
      </Modal>
    </form>
  );
}

================
File: src/contexts/AuthContext.tsx
================
'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { createSupabaseClient } from '@/lib/supabase';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  signUp: (email: string, password: string, options?: { data?: { [key: string]: any } }) => Promise<{ user: User | null; error: any }>;
  signIn: (email: string, password: string) => Promise<{ user: User | null; error: any }>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<{ error: any }>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  
  const supabase = createSupabaseClient();

  useEffect(() => {
    // Get initial session
    const getInitialSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setSession(session);
      setUser(session?.user ?? null);
      setLoading(false);
    };

    getInitialSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        setSession(session);
        setUser(session?.user ?? null);
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, [supabase.auth]);

  const signUp = async (email: string, password: string, options?: { data?: { [key: string]: any } }) => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options,
      });
      return { user: data.user, error };
    } finally {
      setLoading(false);
    }
  };

  const signIn = async (email: string, password: string) => {
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      return { user: data.user, error };
    } finally {
      setLoading(false);
    }
  };

  const signOut = async () => {
    setLoading(true);
    try {
      await supabase.auth.signOut();
    } finally {
      setLoading(false);
    }
  };

  const resetPassword = async (email: string) => {
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${process.env.NEXT_PUBLIC_APP_URL}/auth/reset-password`,
    });
    return { error };
  };

  const value = {
    user,
    session,
    loading,
    signUp,
    signIn,
    signOut,
    resetPassword,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: src/lib/constants/shared.ts
================
// Shared constants for the application
export const SHARED_USER_ID = '4ef526fd-43a0-44fd-82e4-2ab404ef673c';

================
File: src/lib/services/relationships/course-book-service.ts
================
import { createSupabaseClient } from '@/lib/supabase'
import type { Database } from '@/types/database'

type CourseBook = Database['public']['Tables']['course_books']['Insert']
type CourseBookRow = Database['public']['Tables']['course_books']['Row']

export class CourseBookService {
  private supabase = createSupabaseClient()

  // Add a book to a course
  async addBookToCourse(courseId: string, bookId: string, options?: {
    isRequired?: boolean
    notes?: string
    position?: number
  }) {
    const { data, error } = await this.supabase
      .from('course_books')
      .insert({
        course_id: courseId,
        book_id: bookId,
        is_required: options?.isRequired ?? false,
        notes: options?.notes,
        position: options?.position ?? 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Remove a book from a course
  async removeBookFromCourse(courseId: string, bookId: string) {
    const { error } = await this.supabase
      .from('course_books')
      .delete()
      .match({ course_id: courseId, book_id: bookId })

    if (error) throw error
  }

  // Get all books for a course
  async getCourseBooksWithDetails(courseId: string) {
    const { data, error } = await this.supabase
      .from('course_books')
      .select(`
        *,
        book:books (
          id,
          title,
          author,
          isbn,
          publisher,
          publication_year,
          cover_image_url,
          content_type,
          file_url
        )
      `)
      .eq('course_id', courseId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // Get all courses using a specific book
  async getCoursesUsingBook(bookId: string) {
    const { data, error } = await this.supabase
      .from('course_books')
      .select(`
        *,
        course:courses (
          id,
          title,
          description,
          status,
          difficulty
        )
      `)
      .eq('book_id', bookId)

    if (error) throw error
    return data
  }

  // Update book association details
  async updateCourseBook(courseId: string, bookId: string, updates: {
    isRequired?: boolean
    notes?: string
    position?: number
  }) {
    const { data, error } = await this.supabase
      .from('course_books')
      .update({
        is_required: updates.isRequired,
        notes: updates.notes,
        position: updates.position
      })
      .match({ course_id: courseId, book_id: bookId })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Reorder books in a course
  async reorderCourseBooks(courseId: string, bookOrders: { bookId: string; position: number }[]) {
    const updates = bookOrders.map(({ bookId, position }) => 
      this.supabase
        .from('course_books')
        .update({ position })
        .match({ course_id: courseId, book_id: bookId })
    )

    const results = await Promise.all(updates)
    const errors = results.filter(r => r.error)
    
    if (errors.length > 0) {
      throw new Error(`Failed to reorder books: ${errors.map(e => e.error?.message).join(', ')}`)
    }
  }

  // Bulk add books to course
  async bulkAddBooksToCourse(courseId: string, bookIds: string[], isRequired = false) {
    const inserts: CourseBook[] = bookIds.map((bookId, index) => ({
      course_id: courseId,
      book_id: bookId,
      is_required: isRequired,
      position: index
    }))

    const { data, error } = await this.supabase
      .from('course_books')
      .insert(inserts)
      .select()

    if (error) throw error
    return data
  }

  // Check if a book is associated with a course
  async isBookInCourse(courseId: string, bookId: string): Promise<boolean> {
    const { data, error } = await this.supabase
      .from('course_books')
      .select('id')
      .match({ course_id: courseId, book_id: bookId })
      .single()

    if (error && error.code !== 'PGRST116') throw error
    return !!data
  }
}

export const courseBookService = new CourseBookService()

================
File: src/lib/services/relationships/course-schedule-service.ts
================
import { createSupabaseClient } from '@/lib/supabase'
import type { Database } from '@/types/database'

export class CourseScheduleService {
  private supabase = createSupabaseClient()

  // Link a schedule to a course
  async linkScheduleToCourse(scheduleId: string, courseId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .update({ course_id: courseId })
      .eq('id', scheduleId)
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Unlink a schedule from a course
  async unlinkScheduleFromCourse(scheduleId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .update({ course_id: null })
      .eq('id', scheduleId)
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Get all schedules for a course
  async getCourseSchedules(courseId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        *,
        lessons (
          id,
          title,
          date,
          start_time,
          end_time,
          status
        )
      `)
      .eq('course_id', courseId)
      .order('start_date', { ascending: true })

    if (error) throw error
    return data
  }

  // Get active schedules for a course
  async getActiveCourseSchedules(courseId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        *,
        lessons (
          id,
          title,
          date,
          start_time,
          end_time,
          status
        )
      `)
      .eq('course_id', courseId)
      .eq('is_active', true)
      .gte('end_date', new Date().toISOString().split('T')[0])
      .order('start_date', { ascending: true })

    if (error) throw error
    return data
  }

  // Get course for a schedule
  async getScheduleCourse(scheduleId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        course:courses (
          id,
          title,
          description,
          status,
          difficulty
        )
      `)
      .eq('id', scheduleId)
      .single()

    if (error) throw error
    return data?.course
  }

  // Get all lessons for a course across all schedules
  async getCourseLessons(courseId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        lessons (
          *,
          schedule:schedules (
            id,
            name
          )
        )
      `)
      .eq('course_id', courseId)

    if (error) throw error

    // Flatten lessons from all schedules
    const lessons = data?.flatMap(schedule => 
      schedule.lessons?.map(lesson => ({
        ...lesson,
        schedule: schedule
      })) ?? []
    )

    return lessons
  }

  // Get upcoming lessons for a course
  async getUpcomingCourseLessons(courseId: string, limit = 10) {
    const today = new Date().toISOString().split('T')[0]
    
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        lessons (
          *,
          schedule:schedules (
            id,
            name
          )
        )
      `)
      .eq('course_id', courseId)
      .eq('is_active', true)

    if (error) throw error

    // Flatten and filter upcoming lessons
    const upcomingLessons = data?.flatMap(schedule => 
      schedule.lessons?.filter(lesson => lesson.date >= today) ?? []
    )
    .sort((a, b) => {
      const dateCompare = a.date.localeCompare(b.date)
      if (dateCompare !== 0) return dateCompare
      return a.start_time.localeCompare(b.start_time)
    })
    .slice(0, limit)

    return upcomingLessons
  }

  // Check if a course has any schedules
  async courseHasSchedules(courseId: string): Promise<boolean> {
    const { count, error } = await this.supabase
      .from('schedules')
      .select('*', { count: 'exact', head: true })
      .eq('course_id', courseId)

    if (error) throw error
    return (count ?? 0) > 0
  }

  // Get course progress based on completed lessons
  async getCourseProgress(courseId: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        lessons (
          status
        )
      `)
      .eq('course_id', courseId)

    if (error) throw error

    const allLessons = data?.flatMap(schedule => schedule.lessons ?? []) ?? []
    const completedLessons = allLessons.filter(lesson => lesson.status === 'completed')

    return {
      totalLessons: allLessons.length,
      completedLessons: completedLessons.length,
      progressPercentage: allLessons.length > 0 
        ? Math.round((completedLessons.length / allLessons.length) * 100)
        : 0
    }
  }

  // Create a schedule for a course
  async createCourseSchedule(courseId: string, scheduleData: {
    name: string
    description?: string
    start_date: string
    end_date: string
    timezone?: string
    recurrence_rule?: string
    tags?: string[]
    default_start_time?: string
    default_duration_minutes?: number
    location?: string
    max_students?: number
    is_active?: boolean
  }) {
    const { data: userData, error: userError } = await this.supabase.auth.getUser()
    if (userError) throw userError

    const { data, error } = await this.supabase
      .from('schedules')
      .insert({
        ...scheduleData,
        course_id: courseId,
        user_id: userData.user.id
      })
      .select()
      .single()

    if (error) throw error
    return data
  }
}

export const courseScheduleService = new CourseScheduleService()

================
File: src/lib/services/relationships/course-vocabulary-service.ts
================
import { createSupabaseClient } from '@/lib/supabase'
import type { Database } from '@/types/database'

type CourseVocabularyGroup = Database['public']['Tables']['course_vocabulary_groups']['Insert']

export class CourseVocabularyService {
  private supabase = createSupabaseClient()

  // Add a vocabulary group to a course
  async addVocabularyGroupToCourse(courseId: string, vocabularyGroupId: string, position?: number) {
    const { data, error } = await this.supabase
      .from('course_vocabulary_groups')
      .insert({
        course_id: courseId,
        vocabulary_group_id: vocabularyGroupId,
        position: position ?? 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Remove a vocabulary group from a course
  async removeVocabularyGroupFromCourse(courseId: string, vocabularyGroupId: string) {
    const { error } = await this.supabase
      .from('course_vocabulary_groups')
      .delete()
      .match({ course_id: courseId, vocabulary_group_id: vocabularyGroupId })

    if (error) throw error
  }

  // Get all vocabulary groups for a course
  async getCourseVocabularyGroups(courseId: string) {
    const { data, error } = await this.supabase
      .from('course_vocabulary_groups')
      .select(`
        *,
        vocabulary_group:vocabulary_groups (
          id,
          name,
          description,
          language,
          target_language,
          difficulty,
          tags,
          vocabulary_group_items (
            vocabulary:vocabulary (
              id,
              word,
              translation,
              part_of_speech,
              difficulty
            )
          )
        )
      `)
      .eq('course_id', courseId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // Get all vocabulary items for a course (flattened)
  async getCourseVocabularyItems(courseId: string) {
    const { data, error } = await this.supabase
      .from('course_vocabulary_groups')
      .select(`
        vocabulary_group:vocabulary_groups (
          id,
          name,
          vocabulary_group_items (
            vocabulary:vocabulary (*)
          )
        )
      `)
      .eq('course_id', courseId)

    if (error) throw error

    // Flatten the vocabulary items with proper typing
    const vocabularyItems = data?.flatMap(group => {
      const vocabGroup = group.vocabulary_group as any
      return vocabGroup?.vocabulary_group_items?.map((item: any) => item.vocabulary) ?? []
    }).filter(Boolean)

    return vocabularyItems
  }

  // Get courses using a vocabulary group
  async getCoursesUsingVocabularyGroup(vocabularyGroupId: string) {
    const { data, error } = await this.supabase
      .from('course_vocabulary_groups')
      .select(`
        *,
        course:courses (
          id,
          title,
          description,
          status,
          difficulty
        )
      `)
      .eq('vocabulary_group_id', vocabularyGroupId)

    if (error) throw error
    return data
  }

  // Reorder vocabulary groups in a course
  async reorderCourseVocabularyGroups(courseId: string, groupOrders: { groupId: string; position: number }[]) {
    const updates = groupOrders.map(({ groupId, position }) => 
      this.supabase
        .from('course_vocabulary_groups')
        .update({ position })
        .match({ course_id: courseId, vocabulary_group_id: groupId })
    )

    const results = await Promise.all(updates)
    const errors = results.filter(r => r.error)
    
    if (errors.length > 0) {
      throw new Error(`Failed to reorder vocabulary groups: ${errors.map(e => e.error?.message).join(', ')}`)
    }
  }

  // Bulk add vocabulary groups to course
  async bulkAddVocabularyGroupsToCourse(courseId: string, groupIds: string[]) {
    const inserts: CourseVocabularyGroup[] = groupIds.map((groupId, index) => ({
      course_id: courseId,
      vocabulary_group_id: groupId,
      position: index
    }))

    const { data, error } = await this.supabase
      .from('course_vocabulary_groups')
      .insert(inserts)
      .select()

    if (error) throw error
    return data
  }

  // Get vocabulary statistics for a course
  async getCourseVocabularyStats(courseId: string) {
    const vocabularyItems = await this.getCourseVocabularyItems(courseId)
    
    const stats = {
      totalWords: vocabularyItems.length,
      byDifficulty: {} as Record<string, number>,
      byPartOfSpeech: {} as Record<string, number>,
      languages: new Set<string>()
    }

    vocabularyItems.forEach(item => {
      if (item) {
        // Count by difficulty
        const difficulty = item.difficulty || 'unknown'
        stats.byDifficulty[difficulty] = (stats.byDifficulty[difficulty] || 0) + 1
        
        // Count by part of speech
        const partOfSpeech = item.part_of_speech || 'unknown'
        stats.byPartOfSpeech[partOfSpeech] = (stats.byPartOfSpeech[partOfSpeech] || 0) + 1
      }
    })

    return stats
  }
}

export const courseVocabularyService = new CourseVocabularyService()

================
File: src/lib/services/relationships/index.ts
================
// Export all relationship services
export { courseBookService } from './course-book-service'
export { courseVocabularyService } from './course-vocabulary-service'
export { courseScheduleService } from './course-schedule-service'
export { lessonRelationshipService } from './lesson-relationship-service'

// Export types
export type { CourseBookService } from './course-book-service'
export type { CourseVocabularyService } from './course-vocabulary-service'
export type { CourseScheduleService } from './course-schedule-service'
export type { LessonRelationshipService } from './lesson-relationship-service'

================
File: src/lib/services/relationships/lesson-relationship-service.ts
================
import { createSupabaseClient } from '@/lib/supabase'
import type { Database } from '@/types/database'

type LessonObjective = Database['public']['Tables']['lesson_objectives']['Insert']
type LessonMethod = Database['public']['Tables']['lesson_methods']['Insert']
type LessonTask = Database['public']['Tables']['lesson_tasks']['Insert']
type LessonBook = Database['public']['Tables']['lesson_books']['Insert']
type LessonVocabulary = Database['public']['Tables']['lesson_vocabulary']['Insert']

export class LessonRelationshipService {
  private supabase = createSupabaseClient()

  // === OBJECTIVES ===
  async addObjectiveToLesson(lessonId: string, objectiveId: string, position?: number) {
    const { data, error } = await this.supabase
      .from('lesson_objectives')
      .insert({
        lesson_id: lessonId,
        objective_id: objectiveId,
        position: position ?? 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  async removeObjectiveFromLesson(lessonId: string, objectiveId: string) {
    const { error } = await this.supabase
      .from('lesson_objectives')
      .delete()
      .match({ lesson_id: lessonId, objective_id: objectiveId })

    if (error) throw error
  }

  async getLessonObjectives(lessonId: string) {
    const { data, error } = await this.supabase
      .from('lesson_objectives')
      .select(`
        *,
        objective:objectives (*)
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // === METHODS ===
  async addMethodToLesson(lessonId: string, methodId: string, options?: {
    durationOverride?: number
    position?: number
    notes?: string
  }) {
    const { data, error } = await this.supabase
      .from('lesson_methods')
      .insert({
        lesson_id: lessonId,
        method_id: methodId,
        duration_override: options?.durationOverride,
        position: options?.position ?? 0,
        notes: options?.notes
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  async removeMethodFromLesson(lessonId: string, methodId: string) {
    const { error } = await this.supabase
      .from('lesson_methods')
      .delete()
      .match({ lesson_id: lessonId, method_id: methodId })

    if (error) throw error
  }

  async getLessonMethods(lessonId: string) {
    const { data, error } = await this.supabase
      .from('lesson_methods')
      .select(`
        *,
        method:methods (*)
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // === TASKS ===
  async addTaskToLesson(lessonId: string, taskId: string, options?: {
    durationOverride?: number
    position?: number
    notes?: string
    isHomework?: boolean
    dueDate?: string
  }) {
    const { data, error } = await this.supabase
      .from('lesson_tasks')
      .insert({
        lesson_id: lessonId,
        task_id: taskId,
        duration_override: options?.durationOverride,
        position: options?.position ?? 0,
        notes: options?.notes,
        is_homework: options?.isHomework ?? false,
        due_date: options?.dueDate
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  async removeTaskFromLesson(lessonId: string, taskId: string) {
    const { error } = await this.supabase
      .from('lesson_tasks')
      .delete()
      .match({ lesson_id: lessonId, task_id: taskId })

    if (error) throw error
  }

  async getLessonTasks(lessonId: string) {
    const { data, error } = await this.supabase
      .from('lesson_tasks')
      .select(`
        *,
        task:tasks (*)
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // === BOOKS ===
  async addBookToLesson(lessonId: string, bookId: string, options?: {
    pagesFrom?: number
    pagesTo?: number
    notes?: string
  }) {
    const { data, error } = await this.supabase
      .from('lesson_books')
      .insert({
        lesson_id: lessonId,
        book_id: bookId,
        pages_from: options?.pagesFrom,
        pages_to: options?.pagesTo,
        notes: options?.notes
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  async removeBookFromLesson(lessonId: string, bookId: string) {
    const { error } = await this.supabase
      .from('lesson_books')
      .delete()
      .match({ lesson_id: lessonId, book_id: bookId })

    if (error) throw error
  }

  async getLessonBooks(lessonId: string) {
    const { data, error } = await this.supabase
      .from('lesson_books')
      .select(`
        *,
        book:books (
          id,
          title,
          author,
          cover_image_url
        )
      `)
      .eq('lesson_id', lessonId)

    if (error) throw error
    return data
  }

  // === VOCABULARY ===
  async addVocabularyToLesson(lessonId: string, vocabularyId: string, position?: number) {
    const { data, error } = await this.supabase
      .from('lesson_vocabulary')
      .insert({
        lesson_id: lessonId,
        vocabulary_id: vocabularyId,
        position: position ?? 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  async removeVocabularyFromLesson(lessonId: string, vocabularyId: string) {
    const { error } = await this.supabase
      .from('lesson_vocabulary')
      .delete()
      .match({ lesson_id: lessonId, vocabulary_id: vocabularyId })

    if (error) throw error
  }

  async getLessonVocabulary(lessonId: string) {
    const { data, error } = await this.supabase
      .from('lesson_vocabulary')
      .select(`
        *,
        vocabulary:vocabulary (*)
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true })

    if (error) throw error
    return data
  }

  // === BULK OPERATIONS ===
  async bulkAddObjectivesToLesson(lessonId: string, objectiveIds: string[]) {
    const inserts: LessonObjective[] = objectiveIds.map((id, index) => ({
      lesson_id: lessonId,
      objective_id: id,
      position: index
    }))

    const { data, error } = await this.supabase
      .from('lesson_objectives')
      .insert(inserts)
      .select()

    if (error) throw error
    return data
  }

  async bulkAddMethodsToLesson(lessonId: string, methods: Array<{
    methodId: string
    durationOverride?: number
    notes?: string
  }>) {
    const inserts: LessonMethod[] = methods.map((method, index) => ({
      lesson_id: lessonId,
      method_id: method.methodId,
      duration_override: method.durationOverride,
      notes: method.notes,
      position: index
    }))

    const { data, error } = await this.supabase
      .from('lesson_methods')
      .insert(inserts)
      .select()

    if (error) throw error
    return data
  }

  async bulkAddTasksToLesson(lessonId: string, tasks: Array<{
    taskId: string
    durationOverride?: number
    notes?: string
    isHomework?: boolean
    dueDate?: string
  }>) {
    const inserts: LessonTask[] = tasks.map((task, index) => ({
      lesson_id: lessonId,
      task_id: task.taskId,
      duration_override: task.durationOverride,
      notes: task.notes,
      is_homework: task.isHomework ?? false,
      due_date: task.dueDate,
      position: index
    }))

    const { data, error } = await this.supabase
      .from('lesson_tasks')
      .insert(inserts)
      .select()

    if (error) throw error
    return data
  }

  // === GET ALL LESSON CONTENT ===
  async getLessonContent(lessonId: string) {
    const [objectives, methods, tasks, books, vocabulary] = await Promise.all([
      this.getLessonObjectives(lessonId),
      this.getLessonMethods(lessonId),
      this.getLessonTasks(lessonId),
      this.getLessonBooks(lessonId),
      this.getLessonVocabulary(lessonId)
    ])

    return {
      objectives,
      methods,
      tasks,
      books,
      vocabulary
    }
  }

  // === COPY LESSON CONTENT ===
  async copyLessonContent(sourceLessonId: string, targetLessonId: string) {
    const content = await this.getLessonContent(sourceLessonId)

    // Copy objectives
    if (content.objectives.length > 0) {
      await this.bulkAddObjectivesToLesson(
        targetLessonId,
        content.objectives.map(o => o.objective_id)
      )
    }

    // Copy methods
    if (content.methods.length > 0) {
      await this.bulkAddMethodsToLesson(
        targetLessonId,
        content.methods.map(m => ({
          methodId: m.method_id,
          durationOverride: m.duration_override || undefined,
          notes: m.notes || undefined
        }))
      )
    }

    // Copy tasks
    if (content.tasks.length > 0) {
      await this.bulkAddTasksToLesson(
        targetLessonId,
        content.tasks.map(t => ({
          taskId: t.task_id,
          durationOverride: t.duration_override || undefined,
          notes: t.notes || undefined,
          isHomework: t.is_homework,
          dueDate: t.due_date || undefined
        }))
      )
    }

    // Copy books
    for (const book of content.books) {
      await this.addBookToLesson(targetLessonId, book.book_id, {
        pagesFrom: book.pages_from || undefined,
        pagesTo: book.pages_to || undefined,
        notes: book.notes || undefined
      })
    }

    // Copy vocabulary
    if (content.vocabulary.length > 0) {
      const vocabularyInserts: LessonVocabulary[] = content.vocabulary.map((v, index) => ({
        lesson_id: targetLessonId,
        vocabulary_id: v.vocabulary_id,
        position: index
      }))

      await this.supabase
        .from('lesson_vocabulary')
        .insert(vocabularyInserts)
    }
  }
}

export const lessonRelationshipService = new LessonRelationshipService()

================
File: src/lib/services/schedule-service.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { 
  Schedule, 
  Lesson, 
  Attendance, 
  LessonObjective, 
  LessonMethod, 
  LessonTask,
  RecurrenceType,
  DayOfWeek
} from '@/types/schedule';

export class ScheduleService {
  private supabase = createClientComponentClient();

  // Schedule CRUD operations
  async getSchedules(filters?: { 
    course_id?: string; 
    is_active?: boolean;
    user_id?: string;
  }) {
    let query = this.supabase
      .from('schedules')
      .select(`
        *,
        course:courses(id, title, description),
        lessons(count)
      `)
      .order('created_at', { ascending: false });

    if (filters?.course_id) {
      query = query.eq('course_id', filters.course_id);
    }
    if (filters?.is_active !== undefined) {
      query = query.eq('is_active', filters.is_active);
    }
    if (filters?.user_id) {
      query = query.eq('user_id', filters.user_id);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data;
  }

  async getSchedule(id: string) {
    const { data, error } = await this.supabase
      .from('schedules')
      .select(`
        *,
        course:courses(*),
        lessons(
          *,
          objectives:lesson_objectives(
            *,
            objective:objectives(*)
          ),
          methods:lesson_methods(
            *,
            method:methods(*)
          ),
          tasks:lesson_tasks(
            *,
            task:tasks(*)
          )
        )
      `)
      .eq('id', id)
      .single();

    if (error) throw error;
    return data;
  }

  async createSchedule(schedule: Omit<Schedule, 'id' | 'created_at' | 'updated_at'>) {
    const { data, error } = await this.supabase
      .from('schedules')
      .insert(schedule)
      .select()
      .single();

    if (error) throw error;

    // Generate lessons based on recurrence
    if (schedule.recurrence_type !== 'none' && data) {
      await this.generateRecurringLessons(data.id, schedule);
    }

    return data;
  }

  async updateSchedule(id: string, schedule: Partial<Schedule>) {
    const { data, error } = await this.supabase
      .from('schedules')
      .update(schedule)
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  async deleteSchedule(id: string) {
    const { error } = await this.supabase
      .from('schedules')
      .delete()
      .eq('id', id);

    if (error) throw error;
  }

  // Lesson CRUD operations
  async getLessons(filters?: {
    schedule_id?: string;
    status?: string;
    date_from?: string;
    date_to?: string;
    user_id?: string;
  }) {
    let query = this.supabase
      .from('lessons')
      .select(`
        *,
        schedule:schedules(
          *,
          course:courses(id, title)
        ),
        attendance(count)
      `)
      .order('date', { ascending: true })
      .order('start_time', { ascending: true });

    if (filters?.schedule_id) {
      query = query.eq('schedule_id', filters.schedule_id);
    }
    if (filters?.status) {
      query = query.eq('status', filters.status);
    }
    if (filters?.date_from) {
      query = query.gte('date', filters.date_from);
    }
    if (filters?.date_to) {
      query = query.lte('date', filters.date_to);
    }
    if (filters?.user_id) {
      query = query.eq('user_id', filters.user_id);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data;
  }

  async getLesson(id: string) {
    const { data, error } = await this.supabase
      .from('lessons')
      .select(`
        *,
        schedule:schedules(
          *,
          course:courses(*)
        ),
        attendance(*),
        objectives:lesson_objectives(
          *,
          objective:objectives(*)
        ),
        methods:lesson_methods(
          *,
          method:methods(*)
        ),
        tasks:lesson_tasks(
          *,
          task:tasks(*)
        )
      `)
      .eq('id', id)
      .single();

    if (error) throw error;
    return data;
  }

  async createLesson(lesson: Omit<Lesson, 'id' | 'created_at' | 'updated_at'>) {
    const { data, error } = await this.supabase
      .from('lessons')
      .insert(lesson)
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  async updateLesson(id: string, lesson: Partial<Lesson>) {
    const { data, error } = await this.supabase
      .from('lessons')
      .update({
        ...lesson,
        updated_at: new Date().toISOString()
      })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  async deleteLesson(id: string) {
    const { error } = await this.supabase
      .from('lessons')
      .delete()
      .eq('id', id);

    if (error) throw error;
  }

  // Attendance operations
  async getAttendance(lesson_id: string) {
    const { data, error } = await this.supabase
      .from('attendance')
      .select('*')
      .eq('lesson_id', lesson_id)
      .order('student_name');

    if (error) throw error;
    return data;
  }

  async markAttendance(attendance: Omit<Attendance, 'id' | 'marked_at'>) {
    const { data, error } = await this.supabase
      .from('attendance')
      .upsert({
        ...attendance,
        marked_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  async bulkMarkAttendance(lesson_id: string, attendances: Omit<Attendance, 'id' | 'lesson_id' | 'marked_at'>[]) {
    const records = attendances.map(a => ({
      ...a,
      lesson_id,
      marked_at: new Date().toISOString()
    }));

    const { data, error } = await this.supabase
      .from('attendance')
      .upsert(records)
      .select();

    if (error) throw error;
    return data;
  }

  // Helper methods
  async generateRecurringLessons(
    schedule_id: string, 
    schedule: Omit<Schedule, 'id' | 'created_at' | 'updated_at'>
  ) {
    const lessons: Omit<Lesson, 'id' | 'created_at' | 'updated_at'>[] = [];
    const startDate = new Date(schedule.start_date);
    const endDate = schedule.end_date ? new Date(schedule.end_date) : new Date(startDate);
    endDate.setMonth(endDate.getMonth() + 3); // Default to 3 months if no end date

    let currentDate = new Date(startDate);
    let lessonNumber = 1;

    while (currentDate <= endDate) {
      if (this.shouldCreateLesson(currentDate, schedule)) {
        const [hours, minutes] = schedule.default_start_time.split(':').map(Number);
        const startTime = new Date(currentDate);
        startTime.setHours(hours, minutes, 0, 0);
        
        const endTime = new Date(startTime);
        endTime.setMinutes(endTime.getMinutes() + schedule.default_duration_minutes);

        lessons.push({
          schedule_id,
          course_id: schedule.course_id,
          title: `${schedule.name} - Lesson ${lessonNumber}`,
          date: currentDate.toISOString().split('T')[0],
          start_time: startTime.toTimeString().slice(0, 5),
          end_time: endTime.toTimeString().slice(0, 5),
          duration_minutes: schedule.default_duration_minutes,
          location: schedule.location,
          status: 'scheduled',
          user_id: schedule.user_id
        });

        lessonNumber++;
      }

      // Increment date based on recurrence type
      currentDate = this.getNextLessonDate(currentDate, schedule);
    }

    if (lessons.length > 0) {
      const { error } = await this.supabase
        .from('lessons')
        .insert(lessons);

      if (error) throw error;
    }
  }

  private shouldCreateLesson(date: Date, schedule: any): boolean {
    if (schedule.recurrence_type === 'none') return true;
    
    // const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'lowercase' });
    const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
    
    if (schedule.recurrence_days && schedule.recurrence_days.length > 0) {
      return schedule.recurrence_days.includes(dayOfWeek);
    }
    
    return true;
  }

  private getNextLessonDate(currentDate: Date, schedule: any): Date {
    const nextDate = new Date(currentDate);
    
    nextDate.setDate(nextDate.getDate() + 1);
    
    return nextDate;
  }

  // Calendar data transformation
  transformToCalendarEvents(lessons: Lesson[]): any[] {
    // console.log('Transforming lessons to calendar events:', lessons);
    return lessons.map(lesson => {
      const startDateTime = new Date(`${lesson.date}T${lesson.start_time}`);
      const endDateTime = new Date(`${lesson.date}T${lesson.end_time}`);
      
      return {
        id: lesson.id,
        title: lesson.title,
        start: startDateTime,
        end: endDateTime,
        resource: {
          lesson,
          schedule: lesson.schedule
        },
        className: this.getLessonClassName(lesson.status)
      };
    });
  }

  private getLessonClassName(status: string): string {
    switch (status) {
      case 'completed':
        return 'bg-green-100 border-green-300 text-green-800';
      case 'cancelled':
        return 'bg-red-100 border-red-300 text-red-800';
      case 'draft':
        return 'bg-gray-100 border-gray-300 text-gray-800';
      default:
        return 'bg-blue-100 border-blue-300 text-blue-800';
    }
  }

  // Statistics
  async getScheduleStats(schedule_id: string) {
    const { data: lessons, error } = await this.supabase
      .from('lessons')
      .select('status, attendance(status)')
      .eq('schedule_id', schedule_id);

    if (error) throw error;

    const stats = {
      total_lessons: lessons?.length || 0,
      completed_lessons: lessons?.filter(l => l.status === 'completed').length || 0,
      cancelled_lessons: lessons?.filter(l => l.status === 'cancelled').length || 0,
      scheduled_lessons: lessons?.filter(l => l.status === 'scheduled').length || 0,
      attendance_rate: 0
    };

    // Calculate attendance rate
    const allAttendance = lessons?.flatMap(l => l.attendance || []) || [];
    const presentCount = allAttendance.filter(a => a.status === 'present').length;
    if (allAttendance.length > 0) {
      stats.attendance_rate = Math.round((presentCount / allAttendance.length) * 100);
    }

    return stats;
  }
}

export const scheduleService = new ScheduleService();

================
File: src/lib/supabase.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

// This is the client-side Supabase client.
// It's used in client components (hooks, etc.)
export const createSupabaseClient = () => {
  return createClientComponentClient();
};

// We export the type for convenience.
// The server-side client will be created directly in server-side functions.
export type SupabaseClient = ReturnType<typeof createSupabaseClient>;

================
File: src/lib/supabase/books.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Book, ContentType } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface BookFilters {
  search?: string;
  author?: string;
  categoryId?: string;
  contentType?: ContentType;
  language?: string;
  publicationYear?: number;
  tags?: string[];
  isPublic?: boolean;
  limit?: number;
}

export interface CreateBookData {
  title: string;
  author?: string;
  isbn?: string;
  publisher?: string;
  publication_year?: number;
  description?: string;
  category_id?: string;
  content_type: ContentType;
  file_url?: string;
  cover_image_url?: string;
  total_pages?: number;
  language: string;
  tags?: string[];
  is_public?: boolean;
}

export interface UpdateBookData extends Partial<CreateBookData> {
  id: string;
}

export const bookService = {
  // Get all books with optional filters
  async getBooks(filters: BookFilters = {}) {
    let query = supabase
      .from('books')
      .select(`
        *,
        category:categories(id, name, color, icon),
        vocabulary_group_books(
          vocabulary_group:vocabulary_groups(
            id,
            name,
            difficulty
          )
        )
      `)
      .order('created_at', { ascending: false })
      .limit(filters.limit || 50);

    // Apply filters
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,author.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }
    
    if (filters.author) {
      query = query.ilike('author', `%${filters.author}%`);
    }
    
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.contentType) {
      query = query.eq('content_type', filters.contentType);
    }
    
    if (filters.language) {
      query = query.eq('language', filters.language);
    }
    
    if (filters.publicationYear) {
      query = query.eq('publication_year', filters.publicationYear);
    }
    
    if (filters.isPublic !== undefined) {
      query = query.eq('is_public', filters.isPublic);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Book[];
  },

  // Get single book by ID
  async getBook(id: string) {
    const { data, error } = await supabase
      .from('books')
      .select(`
        *,
        category:categories(id, name, color, icon),
        course_books(
          id,
          course_id,
          is_required,
          notes,
          position,
          course:courses(id, title, status)
        )
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Book;
  },

  // Create new book
  async createBook(bookData: CreateBookData) {
    // Set default language if not provided
    const dataWithDefaults = {
      ...bookData,
      language: bookData.language || 'en',
      is_public: bookData.is_public || false,
      user_id: SHARED_USER_ID, // Use a shared user ID since authentication is not required
    };

    const { data, error } = await supabase
      .from('books')
      .insert(dataWithDefaults)
      .select()
      .single();
    
    if (error) throw error;
    return data as Book;
  },

  // Update book
  async updateBook({ id, ...bookData }: UpdateBookData) {
    const { data, error } = await supabase
      .from('books')
      .update({
        ...bookData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Book;
  },

  // Delete book
  async deleteBook(id: string) {
    const { error } = await supabase
      .from('books')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get book statistics
  async getBookStats() {
    const { data, error } = await supabase
      .from('books')
      .select('content_type', { count: 'exact' });
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      text: data?.filter(b => b.content_type === 'text').length || 0,
      video: data?.filter(b => b.content_type === 'video').length || 0,
      audio: data?.filter(b => b.content_type === 'audio').length || 0,
      pdf: data?.filter(b => b.content_type === 'pdf').length || 0,
      other: data?.filter(b => ['image', 'interactive'].includes(b.content_type)).length || 0,
    };

    return stats;
  },

  // Get unique authors
  async getAuthors() {
    const { data, error } = await supabase
      .from('books')
      .select('author')
      .not('author', 'is', null);
    
    if (error) throw error;

    // Extract unique authors
    const authorsSet = new Set(data?.map(book => book.author).filter(Boolean));
    const authors = Array.from(authorsSet).sort();
    return authors;
  },

  // Get unique languages
  async getLanguages() {
    const { data, error } = await supabase
      .from('books')
      .select('language');
    
    if (error) throw error;

    // Extract unique languages
    const languagesSet = new Set(data?.map(book => book.language).filter(Boolean));
    const languages = Array.from(languagesSet).sort();
    return languages;
  },

  // Get content type options
  getContentTypes(): { value: ContentType; label: string; icon?: string }[] {
    return [
      { value: 'text', label: 'Text', icon: '📄' },
      { value: 'pdf', label: 'PDF', icon: '📑' },
      { value: 'video', label: 'Video', icon: '🎥' },
      { value: 'audio', label: 'Audio', icon: '🎧' },
      { value: 'image', label: 'Image', icon: '🖼️' },
      { value: 'interactive', label: 'Interactive', icon: '🎮' },
    ];
  },
};

================
File: src/lib/supabase/categories.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Category } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface CategoryFilters {
  type?: string;
  parentId?: string | null;
  search?: string;
}

export interface CreateCategoryData {
  name: string;
  description?: string;
  type: string;
  parent_id?: string;
  color?: string;
  icon?: string;
}

export interface UpdateCategoryData extends Partial<CreateCategoryData> {
  id: string;
}

export const categoryService = {
  // Get all categories with optional filters
  async getCategories(filters: CategoryFilters = {}) {
    let query = supabase
      .from('categories')
      .select('*')
      .order('name', { ascending: true });

    // Apply filters
    if (filters.type) {
      query = query.eq('type', filters.type);
    }
    
    if (filters.parentId !== undefined) {
      query = query.eq('parent_id', filters.parentId);
    }
    
    if (filters.search) {
      query = query.ilike('name', `%${filters.search}%`);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Category[];
  },

  // Get single category by ID
  async getCategory(id: string) {
    const { data, error } = await supabase
      .from('categories')
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Category;
  },

  // Create new category
  async createCategory(categoryData: CreateCategoryData) {
    const { data, error } = await supabase
      .from('categories')
      .insert({
        ...categoryData,
        user_id: SHARED_USER_ID, // Use shared user ID since authentication is not required
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as Category;
  },

  // Update category
  async updateCategory({ id, ...categoryData }: UpdateCategoryData) {
    const { data, error } = await supabase
      .from('categories')
      .update({
        ...categoryData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Category;
  },

  // Delete category
  async deleteCategory(id: string) {
    const { error } = await supabase
      .from('categories')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get category types
  getCategoryTypes() {
    return [
      { value: 'course', label: 'Course' },
      { value: 'book', label: 'Book' },
      { value: 'vocabulary', label: 'Vocabulary' },
      { value: 'objective', label: 'Objective' },
      { value: 'method', label: 'Method' },
      { value: 'task', label: 'Task' },
    ];
  },
};

================
File: src/lib/supabase/course-objectives.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { Objective } from '@/types/database';

const supabase = createClientComponentClient();

export interface CourseObjective {
  id: string;
  course_id: string;
  objective_id: string;
  position: number;
  created_at: string;
  // Relations
  objective?: Objective;
}

export interface CreateCourseObjectiveData {
  course_id: string;
  objective_id: string;
  position?: number;
}

export const courseObjectiveService = {
  // Get all objectives for a course
  async getCourseObjectives(courseId: string) {
    try {
      const { data, error } = await supabase
        .from('course_objectives')
        .select(`
          *,
          objective:objectives(
            id,
            title,
            description,
            bloom_level,
            measurable,
            tags,
            is_template
          )
        `)
        .eq('course_id', courseId)
        .order('position', { ascending: true });

      if (error) throw error;
      return data as CourseObjective[];
    } catch (error: any) {
      // If the course_objectives table doesn't exist, return empty array
      if (error.message?.includes('course_objectives') || error.code === '42P01') {
        console.warn('course_objectives table not found, returning empty array');
        return [];
      }
      throw error;
    }
  },

  // Add objective to course
  async addObjectiveToCourse(data: CreateCourseObjectiveData) {
    try {
      // Get the next position
      const { data: existing } = await supabase
        .from('course_objectives')
        .select('position')
        .eq('course_id', data.course_id)
        .order('position', { ascending: false })
        .limit(1);

      const nextPosition = existing?.[0]?.position ? existing[0].position + 1 : 0;

      const { data: result, error } = await supabase
        .from('course_objectives')
        .insert({
          course_id: data.course_id,
          objective_id: data.objective_id,
          position: data.position ?? nextPosition,
        })
        .select(`
          *,
          objective:objectives(*)
        `)
        .single();

      if (error) throw error;
      return result as CourseObjective;
    } catch (error: any) {
      if (error.message?.includes('course_objectives') || error.code === '42P01') {
        throw new Error('Course objectives feature is not available. Please run the database migration to enable this feature.');
      }
      throw error;
    }
  },

  // Remove objective from course
  async removeObjectiveFromCourse(courseId: string, objectiveId: string) {
    const { error } = await supabase
      .from('course_objectives')
      .delete()
      .eq('course_id', courseId)
      .eq('objective_id', objectiveId);

    if (error) throw error;
  },

  // Update objective position in course
  async updateObjectivePosition(courseId: string, objectiveId: string, newPosition: number) {
    const { data, error } = await supabase
      .from('course_objectives')
      .update({ position: newPosition })
      .eq('course_id', courseId)
      .eq('objective_id', objectiveId)
      .select()
      .single();

    if (error) throw error;
    return data as CourseObjective;
  },

  // Reorder all objectives in a course
  async reorderCourseObjectives(courseId: string, objectiveIds: string[]) {
    const updates = objectiveIds.map((objectiveId, index) => ({
      course_id: courseId,
      objective_id: objectiveId,
      position: index,
    }));

    const { data, error } = await supabase
      .from('course_objectives')
      .upsert(updates)
      .select(`
        *,
        objective:objectives(*)
      `);

    if (error) throw error;
    return data as CourseObjective[];
  },

  // Get courses that use a specific objective
  async getCoursesUsingObjective(objectiveId: string) {
    const { data, error } = await supabase
      .from('course_objectives')
      .select(`
        course_id,
        position,
        course:courses(id, title, status)
      `)
      .eq('objective_id', objectiveId);

    if (error) throw error;
    return data;
  },

  // Bulk add objectives to course
  async bulkAddObjectivesToCourse(courseId: string, objectiveIds: string[]) {
    const { data: existing } = await supabase
      .from('course_objectives')
      .select('position')
      .eq('course_id', courseId)
      .order('position', { ascending: false })
      .limit(1);

    const startPosition = existing?.[0]?.position ? existing[0].position + 1 : 0;

    const inserts = objectiveIds.map((objectiveId, index) => ({
      course_id: courseId,
      objective_id: objectiveId,
      position: startPosition + index,
    }));

    const { data, error } = await supabase
      .from('course_objectives')
      .insert(inserts)
      .select(`
        *,
        objective:objectives(*)
      `);

    if (error) throw error;
    return data as CourseObjective[];
  },
};

================
File: src/lib/supabase/courses.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Course, CourseStatus, DifficultyLevel } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface CourseFilters {
  status?: CourseStatus;
  difficulty?: DifficultyLevel;
  categoryId?: string;
  search?: string;
  isPublic?: boolean;
  tags?: string[];
}

export interface CreateCourseData {
  title: string;
  description?: string;
  short_description?: string;
  category_id?: string;
  status?: CourseStatus;
  difficulty?: DifficultyLevel;
  duration_hours?: number;
  objectives?: string[];
  prerequisites?: string[];
  tags?: string[];
  thumbnail_url?: string;
  is_public?: boolean;
}

export interface UpdateCourseData extends Partial<CreateCourseData> {
  id: string;
}

export const courseService = {
  // Get all courses with optional filters
  async getCourses(filters: CourseFilters = {}) {
    let query = supabase
      .from('courses')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .order('created_at', { ascending: false });

    // Apply filters
    if (filters.status) {
      query = query.eq('status', filters.status);
    }
    
    if (filters.difficulty) {
      query = query.eq('difficulty', filters.difficulty);
    }
    
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.isPublic !== undefined) {
      query = query.eq('is_public', filters.isPublic);
    }
    
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Course[];
  },

  // Get single course by ID
  async getCourse(id: string) {
    try {
      // Try to get course with objectives first
      const { data, error } = await supabase
        .from('courses')
        .select(`
          *,
          category:categories(id, name, color, icon),
          course_books(
            id,
            book_id,
            is_required,
            notes,
            position,
            book:books(id, title, author, cover_image_url)
          ),
          course_vocabulary_groups(
            id,
            vocabulary_group_id,
            position,
            vocabulary_group:vocabulary_groups(id, name, language, difficulty)
          ),
          course_objectives(
            id,
            objective_id,
            position,
            objective:objectives(id, title, description, bloom_level, measurable, tags, is_template)
          )
        `)
        .eq('id', id)
        .single();
      
      if (error) throw error;
      return data as Course;
    } catch (error: any) {
      // If the course_objectives table doesn't exist, fall back to basic query
      if (error.message?.includes('course_objectives') || error.code === '42P01') {
        const { data, error: fallbackError } = await supabase
          .from('courses')
          .select(`
            *,
            category:categories(id, name, color, icon),
            course_books(
              id,
              book_id,
              is_required,
              notes,
              position,
              book:books(id, title, author, cover_image_url)
            ),
            course_vocabulary_groups(
              id,
              vocabulary_group_id,
              position,
              vocabulary_group:vocabulary_groups(id, name, language, difficulty)
            )
          `)
          .eq('id', id)
          .single();
        
        if (fallbackError) throw fallbackError;
        return { ...data, course_objectives: [] } as Course;
      }
      throw error;
    }
  },

  // Create new course
  async createCourse(courseData: CreateCourseData) {
    const { data, error } = await supabase
      .from('courses')
      .insert({
        ...courseData,
        user_id: SHARED_USER_ID, // Use shared user ID since authentication is not required
        status: courseData.status || 'draft',
        difficulty: courseData.difficulty || 'beginner',
        is_public: courseData.is_public || false,
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as Course;
  },

  // Update course
  async updateCourse({ id, ...courseData }: UpdateCourseData) {
    const { data, error } = await supabase
      .from('courses')
      .update({
        ...courseData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Course;
  },

  // Delete course
  async deleteCourse(id: string) {
    const { error } = await supabase
      .from('courses')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Publish course
  async publishCourse(id: string) {
    const { data, error } = await supabase
      .from('courses')
      .update({
        status: 'published' as CourseStatus,
        published_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Course;
  },

  // Archive course
  async archiveCourse(id: string) {
    const { data, error } = await supabase
      .from('courses')
      .update({
        status: 'archived' as CourseStatus,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Course;
  },

  // Get course statistics
  async getCourseStats() {
    const { data, error } = await supabase
      .from('courses')
      .select('status', { count: 'exact' });
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      draft: data?.filter(c => c.status === 'draft').length || 0,
      published: data?.filter(c => c.status === 'published').length || 0,
      archived: data?.filter(c => c.status === 'archived').length || 0,
    };

    return stats;
  },
};

================
File: src/lib/supabase/decoders.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface Decoder {
  id: string;
  name: string;
  description?: string;
  category?: string | null;
  tags?: string[];
  book_id: string;
  is_public: boolean;
  user_id: string;
  created_at: string;
  updated_at: string;
  book?: {
    id: string;
    title: string;
    author?: string;
    content_type?: string;
  };
  category_data?: {
    id: string;
    name: string;
    color?: string;
    icon?: string;
  };
}

export interface DecoderFilters {
  search?: string;
  book_id?: string;
  category?: string;
  tags?: string[];
  is_public?: boolean;
  limit?: number;
}

export interface CreateDecoderData {
  name: string;
  description?: string;
  category?: string | null;
  tags?: string[];
  book_id: string;
  is_public?: boolean;
}

export interface UpdateDecoderData extends Partial<CreateDecoderData> {
  id: string;
}

export const decoderService = {
  // Get all decoders with optional filters
  async getDecoders(filters: DecoderFilters = {}) {
    let query = supabase
      .from('decoders')
      .select(`
        *,
        book:books(
          id,
          title,
          author,
          content_type
        ),
        category_data:categories(
          id,
          name,
          color,
          icon
        )
      `)
      .order('created_at', { ascending: false })
      .limit(filters.limit || 50);

    // Apply filters
    if (filters.search) {
      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,category.ilike.%${filters.search}%`);
    }
    
    if (filters.book_id) {
      query = query.eq('book_id', filters.book_id);
    }
    
    
    if (filters.category) {
      query = query.ilike('category', `%${filters.category}%`);
    }
    
    if (filters.is_public !== undefined) {
      query = query.eq('is_public', filters.is_public);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Decoder[];
  },

  // Get single decoder by ID
  async getDecoder(id: string) {
    const { data, error } = await supabase
      .from('decoders')
      .select(`
        *,
        book:books(
          id,
          title,
          author,
          content_type,
          description,
          publication_year,
          publisher,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Decoder;
  },

  // Create new decoder
  async createDecoder(decoderData: CreateDecoderData) {
    const dataWithDefaults = {
      ...decoderData,
      is_public: decoderData.is_public || false,
      user_id: SHARED_USER_ID,
    };

    const { data, error } = await supabase
      .from('decoders')
      .insert(dataWithDefaults)
      .select(`
        *,
        book:books(
          id,
          title,
          author,
          content_type
        ),
        category_data:categories(
          id,
          name,
          color,
          icon
        )
      `)
      .single();
    
    if (error) throw error;
    return data as Decoder;
  },

  // Update decoder
  async updateDecoder({ id, ...decoderData }: UpdateDecoderData) {
    const { data, error } = await supabase
      .from('decoders')
      .update({
        ...decoderData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select(`
        *,
        book:books(
          id,
          title,
          author,
          content_type
        ),
        category_data:categories(
          id,
          name,
          color,
          icon
        )
      `)
      .single();
    
    if (error) throw error;
    return data as Decoder;
  },

  // Delete decoder
  async deleteDecoder(id: string) {
    const { error } = await supabase
      .from('decoders')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get decoder statistics
  async getDecoderStats() {
    const { data, error } = await supabase
      .from('decoders')
      .select('*', { count: 'exact' });
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      public: data?.filter(d => d.is_public).length || 0,
      private: data?.filter(d => !d.is_public).length || 0,
    };

    return stats;
  },

  // Get categories for decoders
  async getCategories() {
    const { data, error } = await supabase
      .from('categories')
      .select('*')
      .eq('type', 'decoder')
      .order('name');
    
    if (error) throw error;
    return data || [];
  },

};

================
File: src/lib/supabase/lessons.ts
================
// src/lib/supabase/lessons.ts

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type {
  Lesson,
  Attendance,
  AttendanceStatus
} from '@/types/schedule';
import type { LessonStatus } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface LessonFilters {
  schedule_id?: string;
  status?: LessonStatus;
  date_from?: string;
  date_to?: string;
  user_id?: string;
}

export interface CreateLessonData
  extends Omit<Lesson, 'id' | 'created_at' | 'updated_at'> {}

export interface UpdateLessonData extends Partial<CreateLessonData> {
  id: string;
}

export interface CreateAttendanceData
  extends Omit<Attendance, 'id' | 'marked_at'> {}

export const lessonService = {
  /**
   * Get all lessons with optional filters.
   */
  async getLessons(filters: LessonFilters = {}) {
    let query = supabase
      .from('lessons')
      .select(
        `
        *,
        schedule:schedules(id, name, course:courses(id, title))
      `
      )
      .order('date', { ascending: true })
      .order('start_time', { ascending: true });

    if (filters.schedule_id) {
      query = query.eq('schedule_id', filters.schedule_id);
    }
    if (filters.status) {
      query = query.eq('status', filters.status);
    }
    if (filters.date_from) {
      query = query.gte('date', filters.date_from);
    }
    if (filters.date_to) {
      query = query.lte('date', filters.date_to);
    }
    if (filters.user_id) {
      query = query.eq('user_id', filters.user_id);
    }

    const { data: lessons, error } = await query;
    if (error) throw error;

    if (!lessons || lessons.length === 0) {
      return [];
    }

    // Get lesson IDs for fetching related data
    const lessonIds = lessons.map(lesson => lesson.id);

    // Fetch lesson_books and lesson_tasks separately
    const [lessonBooksResult, lessonTasksResult] = await Promise.all([
      supabase
        .from('lesson_books')
        .select(`
          id,
          lesson_id,
          book_id,
          pages_from,
          pages_to,
          notes,
          book:books(id, title, author, cover_image_url)
        `)
        .in('lesson_id', lessonIds),
      supabase
        .from('lesson_tasks')
        .select(`
          id,
          lesson_id,
          task_id,
          position,
          is_homework,
          due_date,
          duration_override,
          notes,
          task:tasks(id, title, description, duration_minutes)
        `)
        .in('lesson_id', lessonIds)
    ]);

    if (lessonBooksResult.error) throw lessonBooksResult.error;
    if (lessonTasksResult.error) throw lessonTasksResult.error;

    // Group lesson_books and lesson_tasks by lesson_id
    const lessonBooksMap = new Map();
    lessonBooksResult.data?.forEach(lessonBook => {
      if (!lessonBooksMap.has(lessonBook.lesson_id)) {
        lessonBooksMap.set(lessonBook.lesson_id, []);
      }
      lessonBooksMap.get(lessonBook.lesson_id).push(lessonBook);
    });

    const lessonTasksMap = new Map();
    lessonTasksResult.data?.forEach(lessonTask => {
      if (!lessonTasksMap.has(lessonTask.lesson_id)) {
        lessonTasksMap.set(lessonTask.lesson_id, []);
      }
      lessonTasksMap.get(lessonTask.lesson_id).push(lessonTask);
    });

    // Attach lesson_books and lesson_tasks to lessons
    const enrichedLessons = lessons.map(lesson => ({
      ...lesson,
      lesson_books: lessonBooksMap.get(lesson.id) || [],
      lesson_tasks: lessonTasksMap.get(lesson.id) || []
    }));

    return enrichedLessons as Lesson[];
  },

  /**
   * Get all lessons for a specific schedule.
   */
  async getScheduleLessons(scheduleId: string) {
    const { data, error } = await supabase
      .from('lessons')
      .select('*')
      .eq('schedule_id', scheduleId)
      .order('date', { ascending: true })
      .order('start_time', { ascending: true });

    if (error) throw error;
    return data as Lesson[];
  },

  /**
   * Get a single lesson by its ID, including all related content.
   */
  async getLesson(id: string) {
    const { data: lesson, error } = await supabase
      .from('lessons')
      .select(
        `
        *,
        schedule:schedules(*, course:courses(*))
      `
      )
      .eq('id', id)
      .single();

    if (error) throw error;
    if (!lesson) return null;

    // Fetch lesson_books and lesson_tasks separately
    const [lessonBooksResult, lessonTasksResult] = await Promise.all([
      supabase
        .from('lesson_books')
        .select(`
          *,
          book:books(*)
        `)
        .eq('lesson_id', id),
      supabase
        .from('lesson_tasks')
        .select(`
          *,
          task:tasks(*)
        `)
        .eq('lesson_id', id)
    ]);

    if (lessonBooksResult.error) throw lessonBooksResult.error;
    if (lessonTasksResult.error) throw lessonTasksResult.error;

    return {
      ...lesson,
      lesson_books: lessonBooksResult.data || [],
      lesson_tasks: lessonTasksResult.data || []
    };
  },

  /**
   * Create a new lesson.
   */
  async createLesson(lessonData: CreateLessonData) {
    const { data, error } = await supabase
      .from('lessons')
      .insert({ ...lessonData, user_id: SHARED_USER_ID })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Update an existing lesson.
   */
  async updateLesson(id: string, lessonData: Partial<UpdateLessonData>) {
    const { data, error } = await supabase
      .from('lessons')
      .update({ ...lessonData, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Delete a lesson.
   */
  async deleteLesson(id: string) {
    const { error } = await supabase.from('lessons').delete().eq('id', id);
    if (error) throw error;
  },

  // ==================== ATTENDANCE ====================

  /**
   * Get all attendance records for a specific lesson.
   */
  async getAttendance(lesson_id: string) {
    const { data, error } = await supabase
      .from('attendance')
      .select('*')
      .eq('lesson_id', lesson_id)
      .order('student_name');

    if (error) throw error;
    return data;
  },

  /**
   * Mark (create or update) a single attendance record.
   */
  async markAttendance(attendanceData: CreateAttendanceData) {
    const { data, error } = await supabase
      .from('attendance')
      .upsert({
        ...attendanceData,
        marked_at: new Date().toISOString(),
        marked_by: SHARED_USER_ID,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Mark attendance for multiple students at once.
   */
  async bulkMarkAttendance(
    lesson_id: string,
    attendances: Omit<Attendance, 'id' | 'lesson_id' | 'marked_at' | 'marked_by'>[]
  ) {
    const records = attendances.map((a) => ({
      ...a,
      lesson_id,
      marked_at: new Date().toISOString(),
      marked_by: SHARED_USER_ID,
    }));

    const { data, error } = await supabase.from('attendance').upsert(records).select();

    if (error) throw error;
    return data;
  },

  // === LESSON CONTENT RELATIONSHIP METHODS ===

  /**
   * Add a book to a lesson
   */
  async addBookToLesson(lesson_id: string, book_id: string, options: {
    position?: number;
    is_required?: boolean;
    reading_pages?: string;
    notes?: string;
  } = {}) {
    const { data, error } = await supabase
      .from('lesson_books')
      .insert({
        lesson_id,
        book_id,
        position: options.position || 0,
        is_required: options.is_required || false,
        reading_pages: options.reading_pages,
        notes: options.notes,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Remove a book from a lesson
   */
  async removeBookFromLesson(lesson_id: string, book_id: string) {
    const { error } = await supabase
      .from('lesson_books')
      .delete()
      .eq('lesson_id', lesson_id)
      .eq('book_id', book_id);

    if (error) throw error;
  },

  /**
   * Add a vocabulary group to a lesson
   */
  async addVocabularyGroupToLesson(lesson_id: string, vocabulary_group_id: string, options: {
    position?: number;
    focus_words?: string[];
    notes?: string;
  } = {}) {
    const { data, error } = await supabase
      .from('lesson_vocabulary_groups')
      .insert({
        lesson_id,
        vocabulary_group_id,
        position: options.position || 0,
        focus_words: options.focus_words,
        notes: options.notes,
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  },

  /**
   * Remove a vocabulary group from a lesson
   */
  async removeVocabularyGroupFromLesson(lesson_id: string, vocabulary_group_id: string) {
    const { error } = await supabase
      .from('lesson_vocabulary_groups')
      .delete()
      .eq('lesson_id', lesson_id)
      .eq('vocabulary_group_id', vocabulary_group_id);

    if (error) throw error;
  },

  /**
   * Get lessons for a specific course (used in course lessons tab)
   */
  async getCourseLessons(course_id: string, filters: {
    status?: LessonStatus;
    date_from?: string;
    date_to?: string;
  } = {}) {
    let query = supabase
      .from('lessons')
      .select(`
        *,
        schedule:schedules(id, name)
      `)
      .eq('course_id', course_id)
      .order('date', { ascending: true })
      .order('start_time', { ascending: true });

    if (filters.status) {
      query = query.eq('status', filters.status);
    }
    
    if (filters.date_from) {
      query = query.gte('date', filters.date_from);
    }
    
    if (filters.date_to) {
      query = query.lte('date', filters.date_to);
    }

    const { data: lessons, error } = await query;
    if (error) throw error;

    if (!lessons || lessons.length === 0) {
      return [];
    }

    // Get lesson IDs for fetching related data
    const lessonIds = lessons.map(lesson => lesson.id);

    // Fetch lesson_books and lesson_tasks separately
    const [lessonBooksResult, lessonTasksResult] = await Promise.all([
      supabase
        .from('lesson_books')
        .select(`
          id,
          lesson_id,
          book_id,
          pages_from,
          pages_to,
          notes,
          book:books(id, title, author, cover_image_url)
        `)
        .in('lesson_id', lessonIds),
      supabase
        .from('lesson_tasks')
        .select(`
          id,
          lesson_id,
          task_id,
          position,
          is_homework,
          due_date,
          duration_override,
          notes,
          task:tasks(id, title, description)
        `)
        .in('lesson_id', lessonIds)
    ]);

    if (lessonBooksResult.error) throw lessonBooksResult.error;
    if (lessonTasksResult.error) throw lessonTasksResult.error;

    // Group lesson_books and lesson_tasks by lesson_id
    const lessonBooksMap = new Map();
    lessonBooksResult.data?.forEach(lessonBook => {
      if (!lessonBooksMap.has(lessonBook.lesson_id)) {
        lessonBooksMap.set(lessonBook.lesson_id, []);
      }
      lessonBooksMap.get(lessonBook.lesson_id).push(lessonBook);
    });

    const lessonTasksMap = new Map();
    lessonTasksResult.data?.forEach(lessonTask => {
      if (!lessonTasksMap.has(lessonTask.lesson_id)) {
        lessonTasksMap.set(lessonTask.lesson_id, []);
      }
      lessonTasksMap.get(lessonTask.lesson_id).push(lessonTask);
    });

    // Attach lesson_books and lesson_tasks to lessons
    const enrichedLessons = lessons.map(lesson => ({
      ...lesson,
      lesson_books: lessonBooksMap.get(lesson.id) || [],
      lesson_tasks: lessonTasksMap.get(lesson.id) || []
    }));

    return enrichedLessons as Lesson[];
  },
};

================
File: src/lib/supabase/methods.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Method } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface MethodFilters {
  categoryId?: string;
  search?: string;
  tags?: string[];
}

export interface CreateMethodData {
  name: string;
  description?: string;
  category_id?: string;
  tags?: string[];
}

export interface UpdateMethodData extends Partial<CreateMethodData> {
  id: string;
}

export const methodService = {
  // Get all methods with optional filters
  async getMethods(filters: MethodFilters = {}) {
    let query = supabase
      .from('methods')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .order('created_at', { ascending: false });

    // Apply filters
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.search) {
      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Method[];
  },

  // Get single method by ID
  async getMethod(id: string) {
    const { data, error } = await supabase
      .from('methods')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Method;
  },

  // Create new method
  async createMethod(methodData: CreateMethodData) {
    const { data, error } = await supabase
      .from('methods')
      .insert({
        ...methodData,
        user_id: SHARED_USER_ID,
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as Method;
  },

  // Update method
  async updateMethod({ id, ...methodData }: UpdateMethodData) {
    const { data, error } = await supabase
      .from('methods')
      .update({
        ...methodData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Method;
  },

  // Delete method
  async deleteMethod(id: string) {
    const { error } = await supabase
      .from('methods')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get methods by category
  async getMethodsByCategory(categoryId: string) {
    const { data, error } = await supabase
      .from('methods')
      .select('*')
      .eq('category_id', categoryId)
      .order('name', { ascending: true });
    
    if (error) throw error;
    return data as Method[];
  },

  // Clone method as template
  async cloneAsTemplate(id: string, newTitle?: string) {
    const original = await this.getMethod(id);
    
    return this.createMethod({
      name: newTitle || `${original.title} (Copy)`,
      description: original.description,
      category_id: original.category_id,
      tags: original.tags,
    });
  },

  // Get method statistics
  async getMethodStats() {
    const { data, error } = await supabase
      .from('methods')
      .select('tags', { count: 'exact' });
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      byCategory: {} as Record<string, number>,
      popularTags: [] as Array<{ tag: string; count: number }>,
    };

    // Count popular tags
    const tagCounts: Record<string, number> = {};
    data?.forEach(method => {
      method.tags?.forEach((tag: string) => {
        tagCounts[tag] = (tagCounts[tag] || 0) + 1;
      });
    });

    // Sort tags by popularity and get top 10
    stats.popularTags = Object.entries(tagCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .map(([tag, count]) => ({ tag, count }));

    return stats;
  },

  // Course relationship methods
  async getCourseMethods(courseId: string) {
    const { data, error } = await supabase
      .from('course_methods')
      .select(`
        id,
        position,
        method:methods(
          id,
          name,
          description,
          tags,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('course_id', courseId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addMethodToCourse(courseId: string, methodId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('course_methods')
      .insert({
        course_id: courseId,
        method_id: methodId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeMethodFromCourse(relationId: string) {
    const { error } = await supabase
      .from('course_methods')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Lesson relationship methods
  async getLessonMethods(lessonId: string) {
    const { data, error } = await supabase
      .from('lesson_methods')
      .select(`
        id,
        position,
        method:methods(
          id,
          name,
          description,
          tags,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addMethodToLesson(lessonId: string, methodId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('lesson_methods')
      .insert({
        lesson_id: lessonId,
        method_id: methodId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeMethodFromLesson(relationId: string) {
    const { error } = await supabase
      .from('lesson_methods')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Get method with its belonging relationships
  async getMethodWithBelongings(methodId: string) {
    const [method, courseRelations, lessonRelations] = await Promise.all([
      this.getMethod(methodId),
      supabase
        .from('course_methods')
        .select('course:courses(id, title)')
        .eq('method_id', methodId),
      supabase
        .from('lesson_methods')
        .select('lesson:lessons(id, topic, title, lesson_number)')
        .eq('method_id', methodId)
    ]);

    return {
      ...method,
      belongingCourses: courseRelations.data?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.map(r => r.lesson) || [],
    };
  },

  // Get all methods with their belonging relationships
  async getMethodsWithBelongings(filters: MethodFilters = {}) {
    const methods = await this.getMethods(filters);
    
    // Get all relationships in parallel
    const methodIds = methods.map(m => m.id);
    
    const [courseRelations, lessonRelations] = await Promise.all([
      supabase
        .from('course_methods')
        .select('method_id, course:courses(id, title)')
        .in('method_id', methodIds),
      supabase
        .from('lesson_methods')
        .select('method_id, lesson:lessons(id, topic, title, lesson_number)')
        .in('method_id', methodIds)
    ]);

    // Map relationships to methods
    return methods.map(method => ({
      ...method,
      belongingCourses: courseRelations.data?.filter(r => r.method_id === method.id)?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.filter(r => r.method_id === method.id)?.map(r => r.lesson) || [],
    }));
  },

  // Remove method from all courses
  async removeMethodFromAllCourses(methodId: string) {
    const { error } = await supabase
      .from('course_methods')
      .delete()
      .eq('method_id', methodId);
    
    if (error) throw error;
  },

  // Remove method from all lessons
  async removeMethodFromAllLessons(methodId: string) {
    const { error } = await supabase
      .from('lesson_methods')
      .delete()
      .eq('method_id', methodId);
    
    if (error) throw error;
  },
};

================
File: src/lib/supabase/objectives.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Objective } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface ObjectiveFilters {
  categoryId?: string;
  search?: string;
  tags?: string[];
}

export interface CreateObjectiveData {
  title: string;
  description?: string;
  category_id?: string;
  tags?: string[];
}

export interface UpdateObjectiveData extends Partial<CreateObjectiveData> {
  id: string;
}

export const objectiveService = {
  // Get all objectives with optional filters
  async getObjectives(filters: ObjectiveFilters = {}) {
    let query = supabase
      .from('objectives')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .order('created_at', { ascending: false });

    // Apply filters
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Objective[];
  },

  // Get single objective by ID
  async getObjective(id: string) {
    const { data, error } = await supabase
      .from('objectives')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Objective;
  },

  // Create new objective
  async createObjective(objectiveData: CreateObjectiveData) {
    const { data, error } = await supabase
      .from('objectives')
      .insert({
        ...objectiveData,
        user_id: SHARED_USER_ID,
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as Objective;
  },

  // Update objective
  async updateObjective({ id, ...objectiveData }: UpdateObjectiveData) {
    const { data, error } = await supabase
      .from('objectives')
      .update({
        ...objectiveData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Objective;
  },

  // Delete objective
  async deleteObjective(id: string) {
    const { error } = await supabase
      .from('objectives')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get objectives by category
  async getObjectivesByCategory(categoryId: string) {
    const { data, error } = await supabase
      .from('objectives')
      .select('*')
      .eq('category_id', categoryId)
      .order('title', { ascending: true });
    
    if (error) throw error;
    return data as Objective[];
  },

  // Clone objective
  async cloneObjective(id: string, newTitle?: string) {
    const original = await this.getObjective(id);
    
    return this.createObjective({
      title: newTitle || `${original.title} (Copy)`,
      description: original.description,
      category_id: original.category_id,
      tags: original.tags,
    });
  },

  // Get objective statistics
  async getObjectiveStats() {
    const { data, error } = await supabase
      .from('objectives')
      .select('tags', { count: 'exact' });
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      popularTags: [] as Array<{ tag: string; count: number }>,
    };

    // Count popular tags
    const tagCounts: Record<string, number> = {};
    data?.forEach(objective => {
      objective.tags?.forEach((tag: string) => {
        tagCounts[tag] = (tagCounts[tag] || 0) + 1;
      });
    });

    // Sort tags by popularity and get top 10
    stats.popularTags = Object.entries(tagCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .map(([tag, count]) => ({ tag, count }));

    return stats;
  },

  // Course relationship methods
  async getCourseObjectives(courseId: string) {
    const { data, error } = await supabase
      .from('course_objectives')
      .select(`
        id,
        position,
        objective:objectives(
          id,
          title,
          description,
          tags,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('course_id', courseId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addObjectiveToCourse(courseId: string, objectiveId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('course_objectives')
      .insert({
        course_id: courseId,
        objective_id: objectiveId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeObjectiveFromCourse(relationId: string) {
    const { error } = await supabase
      .from('course_objectives')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Lesson relationship methods
  async getLessonObjectives(lessonId: string) {
    const { data, error } = await supabase
      .from('lesson_objectives')
      .select(`
        id,
        position,
        objective:objectives(
          id,
          title,
          description,
          tags,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addObjectiveToLesson(lessonId: string, objectiveId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('lesson_objectives')
      .insert({
        lesson_id: lessonId,
        objective_id: objectiveId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeObjectiveFromLesson(relationId: string) {
    const { error } = await supabase
      .from('lesson_objectives')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Get objective with its belonging relationships
  async getObjectiveWithBelongings(objectiveId: string) {
    const [objective, courseRelations, lessonRelations] = await Promise.all([
      this.getObjective(objectiveId),
      supabase
        .from('course_objectives')
        .select('course:courses(id, title)')
        .eq('objective_id', objectiveId),
      supabase
        .from('lesson_objectives')
        .select('lesson:lessons(id, topic, title, lesson_number)')
        .eq('objective_id', objectiveId)
    ]);

    return {
      ...objective,
      belongingCourses: courseRelations.data?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.map(r => r.lesson) || [],
    };
  },

  // Get all objectives with their belonging relationships
  async getObjectivesWithBelongings(filters: ObjectiveFilters = {}) {
    const objectives = await this.getObjectives(filters);
    
    // Get all relationships in parallel
    const objectiveIds = objectives.map(o => o.id);
    
    const [courseRelations, lessonRelations] = await Promise.all([
      supabase
        .from('course_objectives')
        .select('objective_id, course:courses(id, title)')
        .in('objective_id', objectiveIds),
      supabase
        .from('lesson_objectives')
        .select('objective_id, lesson:lessons(id, topic, title, lesson_number)')
        .in('objective_id', objectiveIds)
    ]);

    // Map relationships to objectives
    return objectives.map(objective => ({
      ...objective,
      belongingCourses: courseRelations.data?.filter(r => r.objective_id === objective.id)?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.filter(r => r.objective_id === objective.id)?.map(r => r.lesson) || [],
    }));
  },

  // Remove objective from all courses
  async removeObjectiveFromAllCourses(objectiveId: string) {
    const { error } = await supabase
      .from('course_objectives')
      .delete()
      .eq('objective_id', objectiveId);
    
    if (error) throw error;
  },

  // Remove objective from all lessons
  async removeObjectiveFromAllLessons(objectiveId: string) {
    const { error } = await supabase
      .from('lesson_objectives')
      .delete()
      .eq('objective_id', objectiveId);
    
    if (error) throw error;
  },
};

================
File: src/lib/supabase/schedules.ts
================
// src/lib/supabase/schedules.ts

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import {
  Schedule,
  Lesson,
  RecurrenceType,
  DayOfWeek,
} from '@/types/schedule';
import { Course } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface ScheduleFilters {
  course_id?: string;
  is_active?: boolean;
  user_id?: string;
}

export interface CreateScheduleData
  extends Omit<Schedule, 'id' | 'created_at' | 'updated_at' | 'course'> {}

export interface UpdateScheduleData extends Partial<CreateScheduleData> {
  id: string;
}

/**
 * Generates lessons for a recurring schedule.
 * @param schedule_id - The ID of the schedule.
 * @param schedule - The schedule data.
 */
async function generateRecurringLessons(
  schedule_id: string,
  schedule: Omit<Schedule, 'id' | 'created_at' | 'updated_at'>
) {
  const lessons: Omit<Lesson, 'id' | 'created_at' | 'updated_at'>[] = [];
  const startDate = new Date(`${schedule.start_date}T00:00:00Z`);
  const endDate = schedule.end_date
    ? new Date(`${schedule.end_date}T00:00:00Z`)
    : new Date(startDate.getFullYear() + 1, startDate.getMonth(), startDate.getDate());

  let currentDate = new Date(startDate);
  let lessonNumber = 1;
  const dayMap: DayOfWeek[] = [
    'sunday',
    'monday',
    'tuesday',
    'wednesday',
    'thursday',
    'friday',
    'saturday',
  ];

  while (currentDate <= endDate) {
    const dayOfWeek = dayMap[currentDate.getUTCDay()];
    if (schedule.recurrence_days?.includes(dayOfWeek)) {
      const [hours, minutes] = schedule.default_start_time.split(':').map(Number);
      const lessonStartTime = new Date(currentDate);
      lessonStartTime.setUTCHours(hours, minutes, 0, 0);

      const lessonEndTime = new Date(lessonStartTime);
      lessonEndTime.setUTCMinutes(
        lessonStartTime.getUTCMinutes() + schedule.default_duration_minutes
      );

      lessons.push({
        schedule_id,
        course_id: schedule.course_id,
        user_id: schedule.user_id,
        title: `${schedule.name} - Lesson ${lessonNumber}`,
        description: `Automatically generated lesson from schedule: ${schedule.name}`,
        lesson_number: lessonNumber,
        date: currentDate.toISOString().split('T')[0],
        start_time: lessonStartTime.toUTCString().slice(17, 22),
        end_time: lessonEndTime.toUTCString().slice(17, 22),
        duration_minutes: schedule.default_duration_minutes,
        location: schedule.location,
        status: 'scheduled',
        tags: ['auto-generated', 'from-schedule'],
      });
      lessonNumber++;
    }

    // Move to the next day
    currentDate.setUTCDate(currentDate.getUTCDate() + 1);
  }

  if (lessons.length > 0) {
    const { error } = await supabase.from('lessons').insert(lessons);
    if (error) throw error;
  }
}

export const scheduleService = {
  /**
   * Generate lessons for a schedule manually
   */
  async generateLessonsForSchedule(scheduleId: string) {
    const schedule = await this.getSchedule(scheduleId);
    if (!schedule) throw new Error('Schedule not found');
    
    // Delete existing auto-generated lessons for this schedule
    await supabase
      .from('lessons')
      .delete()
      .eq('schedule_id', scheduleId)
      .contains('tags', ['auto-generated']);
    
    // Generate new lessons
    await generateRecurringLessons(scheduleId, schedule);
    
    return this.getScheduleLessons(scheduleId);
  },
  /**
   * Get all schedules with optional filters.
   */
  async getSchedules(filters: ScheduleFilters = {}) {
    let query = supabase
      .from('schedules')
      .select(
        `
        *,
        course:courses(id, title),
        lessons(count)
      `
      )
      .order('created_at', { ascending: false });

    if (filters.course_id) {
      query = query.eq('course_id', filters.course_id);
    }
    if (filters.is_active !== undefined) {
      query = query.eq('is_active', filters.is_active);
    }
    if (filters.user_id) {
      query = query.eq('user_id', filters.user_id);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data;
  },

  /**
   * Get a single schedule by its ID.
   */
  async getSchedule(id: string) {
    const { data, error } = await supabase
      .from('schedules')
      .select(
        `
        *,
        course:courses(*),
        lessons(*)
      `
      )
      .eq('id', id)
      .single();
    if (error) throw error;
    return data;
  },

  /**
   * Create a new schedule and generate recurring lessons if applicable.
   */
  async createSchedule(scheduleData: CreateScheduleData) {
    const { data, error } = await supabase
      .from('schedules')
      .insert({ ...scheduleData, user_id: SHARED_USER_ID })
      .select()
      .single();

    if (error) throw error;

    if (data && scheduleData.recurrence_type !== 'none') {
      await generateRecurringLessons(data.id, { ...scheduleData, user_id: SHARED_USER_ID });
    }

    return data;
  },

  /**
   * Update an existing schedule.
   */
  async updateSchedule(id: string, scheduleData: Partial<UpdateScheduleData>) {
    const { data, error } = await supabase
      .from('schedules')
      .update({ ...scheduleData, updated_at: new Date().toISOString() })
      .eq('id', id)
      .select()
      .single();
    if (error) throw error;
    return data;
  },

  /**
   * Get all lessons for a specific schedule
   */
  async getScheduleLessons(scheduleId: string) {
    const { data, error } = await supabase
      .from('lessons')
      .select(`
        *,
        lesson_books(
          id,
          lesson_id,
          book_id,
          pages_from,
          pages_to,
          notes,
          book:books(id, title, author, cover_image_url)
        ),
        lesson_tasks(
          id,
          lesson_id,
          task_id,
          position,
          is_homework,
          due_date,
          duration_override,
          notes,
          task:tasks(id, title, description, estimated_minutes)
        )
      `)
      .eq('schedule_id', scheduleId)
      .order('date', { ascending: true })
      .order('start_time', { ascending: true });

    if (error) throw error;
    return data;
  },

  /**
   * Delete a schedule and its associated lessons.
   */
  async deleteSchedule(id: string) {
    const { error } = await supabase.from('schedules').delete().eq('id', id);
    if (error) throw error;
  },

  /**
   * Transform lessons to calendar events format
   */
  transformToCalendarEvents(lessons: any[]): any[] {
    return lessons.map(lesson => {
      const startDateTime = new Date(`${lesson.date}T${lesson.start_time}`);
      const endDateTime = new Date(`${lesson.date}T${lesson.end_time}`);
      
      return {
        id: lesson.id,
        title: lesson.title,
        start: startDateTime,
        end: endDateTime,
        resource: {
          lesson,
          schedule: lesson.schedule
        },
        className: getLessonClassName(lesson.status)
      };
    });
  },
};

function getLessonClassName(status: string): string {
  switch (status) {
    case 'completed':
      return 'bg-green-100 border-green-300 text-green-800';
    case 'cancelled':
      return 'bg-red-100 border-red-300 text-red-800';
    case 'draft':
      return 'bg-gray-100 border-gray-300 text-gray-800';
    default:
      return 'bg-blue-100 border-blue-300 text-blue-800';
  }
}

================
File: src/lib/supabase/tasks.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Task, DifficultyLevel } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface TaskFilters {
  categoryId?: string;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  search?: string;
  pointsMin?: number;
  pointsMax?: number;
}

export interface CreateTaskData {
  title: string;
  description?: string;
  category_id?: string;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  points?: number;
}

export interface UpdateTaskData extends Partial<CreateTaskData> {
  id: string;
}

export const taskService = {
  // Get all tasks with optional filters
  async getTasks(filters: TaskFilters = {}) {
    let query = supabase
      .from('tasks')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .order('created_at', { ascending: false });

    // Apply filters
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.priority) {
      query = query.eq('priority', filters.priority);
    }
    
    if (filters.pointsMin !== undefined) {
      query = query.gte('points', filters.pointsMin);
    }
    
    if (filters.pointsMax !== undefined) {
      query = query.lte('points', filters.pointsMax);
    }
    
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Task[];
  },

  // Get single task by ID
  async getTask(id: string) {
    const { data, error } = await supabase
      .from('tasks')
      .select(`
        *,
        category:categories(id, name, color, icon)
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Task;
  },

  // Create new task
  async createTask(taskData: CreateTaskData) {
    const { data, error } = await supabase
      .from('tasks')
      .insert({
        ...taskData,
        user_id: SHARED_USER_ID,
        priority: taskData.priority ?? 'medium',
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as Task;
  },

  // Update task
  async updateTask({ id, ...taskData }: UpdateTaskData) {
    const { data, error } = await supabase
      .from('tasks')
      .update({
        ...taskData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Task;
  },

  // Delete task
  async deleteTask(id: string) {
    const { error } = await supabase
      .from('tasks')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // Get tasks by category
  async getTasksByCategory(categoryId: string) {
    const { data, error } = await supabase
      .from('tasks')
      .select('*')
      .eq('category_id', categoryId)
      .order('title', { ascending: true });
    
    if (error) throw error;
    return data as Task[];
  },

  // Get template tasks
  async getTemplateTasks() {
    const { data, error } = await supabase
      .from('tasks')
      .select('*')
      .eq('is_template', true)
      .order('title', { ascending: true });
    
    if (error) throw error;
    return data as Task[];
  },

  // Clone task
  async cloneTask(id: string, newTitle?: string) {
    const original = await this.getTask(id);
    
    return this.createTask({
      title: newTitle || `${original.title} (Copy)`,
      description: original.description,
      category_id: original.category_id,
      priority: original.priority,
      points: original.points,
    });
  },

  // Get task statistics
  async getTaskStats() {
    const { data, error } = await supabase
      .from('tasks')
      .select('priority, points', { count: 'exact' })
      .eq('user_id', SHARED_USER_ID);
    
    if (error) throw error;

    const stats = {
      total: data?.length || 0,
      totalPoints: data?.reduce((sum, t) => sum + (t.points || 0), 0) || 0,
      averagePoints: data?.length ? 
        Math.round((data.reduce((sum, t) => sum + (t.points || 0), 0) / data.length) * 100) / 100 : 0,
      byPriority: {
        low: data?.filter(t => t.priority === 'low').length || 0,
        medium: data?.filter(t => t.priority === 'medium').length || 0,
        high: data?.filter(t => t.priority === 'high').length || 0,
        urgent: data?.filter(t => t.priority === 'urgent').length || 0,
      },
    };

    return stats;
  },

  // Course relationship methods
  async getCourseTasks(courseId: string) {
    const { data, error } = await supabase
      .from('course_tasks')
      .select(`
        id,
        position,
        task:tasks(
          id,
          title,
          description,
          priority,
          points,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('course_id', courseId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addTaskToCourse(courseId: string, taskId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('course_tasks')
      .insert({
        course_id: courseId,
        task_id: taskId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeTaskFromCourse(relationId: string) {
    const { error } = await supabase
      .from('course_tasks')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Lesson relationship methods
  async getLessonTasks(lessonId: string) {
    const { data, error } = await supabase
      .from('lesson_tasks')
      .select(`
        id,
        position,
        task:tasks(
          id,
          title,
          description,
          priority,
          points,
          category:categories(id, name, color, icon)
        )
      `)
      .eq('lesson_id', lessonId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data;
  },

  async addTaskToLesson(lessonId: string, taskId: string, options: { position: number }) {
    const { data, error } = await supabase
      .from('lesson_tasks')
      .insert({
        lesson_id: lessonId,
        task_id: taskId,
        position: options.position
      })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },

  async removeTaskFromLesson(relationId: string) {
    const { error } = await supabase
      .from('lesson_tasks')
      .delete()
      .eq('id', relationId);
    
    if (error) throw error;
  },

  // Get task with its belonging relationships
  async getTaskWithBelongings(taskId: string) {
    const [task, courseRelations, lessonRelations] = await Promise.all([
      this.getTask(taskId),
      supabase
        .from('course_tasks')
        .select('course:courses(id, title)')
        .eq('task_id', taskId),
      supabase
        .from('lesson_tasks')
        .select('lesson:lessons(id, topic, title, lesson_number)')
        .eq('task_id', taskId)
    ]);

    return {
      ...task,
      belongingCourses: courseRelations.data?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.map(r => r.lesson) || [],
    };
  },

  // Get all tasks with their belonging relationships
  async getTasksWithBelongings(filters: TaskFilters = {}) {
    const tasks = await this.getTasks(filters);
    
    // Get all relationships in parallel
    const taskIds = tasks.map(t => t.id);
    
    const [courseRelations, lessonRelations] = await Promise.all([
      supabase
        .from('course_tasks')
        .select('task_id, course:courses(id, title)')
        .in('task_id', taskIds),
      supabase
        .from('lesson_tasks')
        .select('task_id, lesson:lessons(id, topic, title, lesson_number)')
        .in('task_id', taskIds)
    ]);

    // Map relationships to tasks
    return tasks.map(task => ({
      ...task,
      belongingCourses: courseRelations.data?.filter(r => r.task_id === task.id)?.map(r => r.course) || [],
      belongingLessons: lessonRelations.data?.filter(r => r.task_id === task.id)?.map(r => r.lesson) || [],
    }));
  },

  // Remove task from all courses
  async removeTaskFromAllCourses(taskId: string) {
    const { error } = await supabase
      .from('course_tasks')
      .delete()
      .eq('task_id', taskId);
    
    if (error) throw error;
  },

  // Remove task from all lessons
  async removeTaskFromAllLessons(taskId: string) {
    const { error } = await supabase
      .from('lesson_tasks')
      .delete()
      .eq('task_id', taskId);
    
    if (error) throw error;
  },
};

================
File: src/lib/supabase/vocabulary.ts
================
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Vocabulary, VocabularyGroup, VocabularyGroupItem, DifficultyLevel } from '@/types/database';
import { SHARED_USER_ID } from '@/lib/constants/shared';

const supabase = createClientComponentClient();

export interface VocabularyFilters {
  search?: string;
  difficulty?: DifficultyLevel;
  partOfSpeech?: string;
  tags?: string[];
  groupId?: string;
}

export interface VocabularyGroupFilters {
  search?: string;
  difficulty?: DifficultyLevel;
  language?: string;
  targetLanguage?: string;
  categoryId?: string;
  tags?: string[];
  isPublic?: boolean;
}

export interface CreateVocabularyData {
  word: string;
  translation?: string;
  pronunciation?: string;
  part_of_speech?: string;
  definition?: string;
  example_sentence?: string;
  example_translation?: string;
  notes?: string;
  difficulty: DifficultyLevel;
  audio_url?: string;
  image_url?: string;
  tags?: string[];
}

export interface UpdateVocabularyData extends Partial<CreateVocabularyData> {
  id: string;
}

export interface CreateVocabularyGroupData {
  name: string;
  description?: string;
  category_id?: string;
  language: string;
  target_language?: string;
  difficulty: DifficultyLevel;
  tags?: string[];
  is_public?: boolean;
}

export interface UpdateVocabularyGroupData extends Partial<CreateVocabularyGroupData> {
  id: string;
}

export const vocabularyService = {
  // ==================== VOCABULARY ITEMS ====================
  
  // Get all vocabulary items with optional filters
  async getVocabulary(filters: VocabularyFilters = {}) {
    let query = supabase
      .from('vocabulary')
      .select('*')
      .order('word', { ascending: true });

    // Apply filters
    if (filters.search) {
      query = query.or(`word.ilike.%${filters.search}%,translation.ilike.%${filters.search}%,definition.ilike.%${filters.search}%`);
    }
    
    if (filters.difficulty) {
      query = query.eq('difficulty', filters.difficulty);
    }
    
    if (filters.partOfSpeech) {
      query = query.eq('part_of_speech', filters.partOfSpeech);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data as Vocabulary[];
  },

  // Get vocabulary items in a specific group
  async getVocabularyInGroup(groupId: string) {
    const { data, error } = await supabase
      .from('vocabulary_group_items')
      .select(`
        *,
        vocabulary(*)
      `)
      .eq('vocabulary_group_id', groupId)
      .order('position', { ascending: true });
    
    if (error) throw error;
    return data as (VocabularyGroupItem & { vocabulary: Vocabulary })[];
  },

  // Get single vocabulary item by ID
  async getVocabularyItem(id: string) {
    const { data, error } = await supabase
      .from('vocabulary')
      .select('*')
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as Vocabulary;
  },

  // Create new vocabulary item
  async createVocabulary(vocabularyData: CreateVocabularyData) {
    const dataWithDefaults = {
      ...vocabularyData,
      difficulty: vocabularyData.difficulty || 'beginner' as DifficultyLevel,
      user_id: SHARED_USER_ID,
    };

    const { data, error } = await supabase
      .from('vocabulary')
      .insert(dataWithDefaults)
      .select()
      .single();
    
    if (error) throw error;
    return data as Vocabulary;
  },

  // Update vocabulary item
  async updateVocabulary({ id, ...vocabularyData }: UpdateVocabularyData) {
    const { data, error } = await supabase
      .from('vocabulary')
      .update({
        ...vocabularyData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as Vocabulary;
  },

  // Delete vocabulary item
  async deleteVocabulary(id: string) {
    const { error } = await supabase
      .from('vocabulary')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // ==================== VOCABULARY GROUPS ====================
  
  // Get all vocabulary groups with optional filters
  async getVocabularyGroups(filters: VocabularyGroupFilters = {}) {
    let query = supabase
      .from('vocabulary_groups')
      .select(`
        *,
        category:categories(id, name, color, icon),
        vocabulary_group_items(count),
        vocabulary_group_books(
          book:books(
            id,
            title,
            author,
            cover_image_url
          )
        )
      `)
      .order('created_at', { ascending: false });

    // Apply filters
    if (filters.search) {
      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }
    
    if (filters.difficulty) {
      query = query.eq('difficulty', filters.difficulty);
    }
    
    if (filters.language) {
      query = query.eq('language', filters.language);
    }
    
    if (filters.targetLanguage) {
      query = query.eq('target_language', filters.targetLanguage);
    }
    
    if (filters.categoryId) {
      query = query.eq('category_id', filters.categoryId);
    }
    
    if (filters.isPublic !== undefined) {
      query = query.eq('is_public', filters.isPublic);
    }
    
    if (filters.tags && filters.tags.length > 0) {
      query = query.contains('tags', filters.tags);
    }

    const { data, error } = await query;
    
    if (error) throw error;
    
    // Add vocabulary count to each group
    const groupsWithCount = data?.map(group => ({
      ...group,
      vocabulary_count: group.vocabulary_group_items?.[0]?.count || 0
    })) || [];
    
    return groupsWithCount as (VocabularyGroup & { vocabulary_count: number })[];
  },

  // Get single vocabulary group by ID
  async getVocabularyGroup(id: string) {
    const { data, error } = await supabase
      .from('vocabulary_groups')
      .select(`
        *,
        category:categories(id, name, color, icon),
        vocabulary_group_items(
          *,
          vocabulary(*)
        )
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data as VocabularyGroup & { vocabulary_group_items: (VocabularyGroupItem & { vocabulary: Vocabulary })[] };
  },

  // Create new vocabulary group
  async createVocabularyGroup(groupData: CreateVocabularyGroupData) {
    const dataWithDefaults = {
      ...groupData,
      language: groupData.language || 'en',
      difficulty: groupData.difficulty || 'beginner' as DifficultyLevel,
      is_public: groupData.is_public || false,
      user_id: SHARED_USER_ID,
    };

    const { data, error } = await supabase
      .from('vocabulary_groups')
      .insert(dataWithDefaults)
      .select()
      .single();
    
    if (error) throw error;
    return data as VocabularyGroup;
  },

  // Update vocabulary group
  async updateVocabularyGroup({ id, ...groupData }: UpdateVocabularyGroupData) {
    const { data, error } = await supabase
      .from('vocabulary_groups')
      .update({
        ...groupData,
        updated_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select()
      .single();
    
    if (error) throw error;
    return data as VocabularyGroup;
  },

  // Delete vocabulary group
  async deleteVocabularyGroup(id: string) {
    const { error } = await supabase
      .from('vocabulary_groups')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
  },

  // ==================== GROUP MEMBERSHIP ====================
  
  // Add vocabulary item to group
  async addVocabularyToGroup(vocabularyId: string, groupId: string, position?: number) {
    // Get current max position if not provided
    if (position === undefined) {
      const { data: items } = await supabase
        .from('vocabulary_group_items')
        .select('position')
        .eq('vocabulary_group_id', groupId)
        .order('position', { ascending: false })
        .limit(1);
      
      position = items && items.length > 0 ? items[0].position + 1 : 0;
    }

    const { data, error } = await supabase
      .from('vocabulary_group_items')
      .insert({
        vocabulary_group_id: groupId,
        vocabulary_id: vocabularyId,
        position: position,
      })
      .select()
      .single();
    
    if (error) throw error;
    return data as VocabularyGroupItem;
  },

  // Remove vocabulary item from group
  async removeVocabularyFromGroup(vocabularyId: string, groupId: string) {
    const { error } = await supabase
      .from('vocabulary_group_items')
      .delete()
      .eq('vocabulary_group_id', groupId)
      .eq('vocabulary_id', vocabularyId);
    
    if (error) throw error;
  },

  // Update vocabulary position in group
  async updateVocabularyPosition(vocabularyId: string, groupId: string, newPosition: number) {
    const { data, error } = await supabase
      .from('vocabulary_group_items')
      .update({ position: newPosition })
      .eq('vocabulary_group_id', groupId)
      .eq('vocabulary_id', vocabularyId)
      .select()
      .single();
    
    if (error) throw error;
    return data as VocabularyGroupItem;
  },

  // ==================== STATISTICS ====================
  
  // Get vocabulary statistics
  async getVocabularyStats() {
    const [vocabularyData, groupsData] = await Promise.all([
      supabase
        .from('vocabulary')
        .select('difficulty', { count: 'exact' })
        .eq('user_id', SHARED_USER_ID),
      supabase
        .from('vocabulary_groups')
        .select('difficulty', { count: 'exact' })
        .eq('user_id', SHARED_USER_ID),
    ]);
    
    if (vocabularyData.error) throw vocabularyData.error;
    if (groupsData.error) throw groupsData.error;

    const vocabularyStats = {
      total: vocabularyData.data?.length || 0,
      beginner: vocabularyData.data?.filter(v => v.difficulty === 'beginner').length || 0,
      intermediate: vocabularyData.data?.filter(v => v.difficulty === 'intermediate').length || 0,
      advanced: vocabularyData.data?.filter(v => v.difficulty === 'advanced').length || 0,
      expert: vocabularyData.data?.filter(v => v.difficulty === 'expert').length || 0,
    };

    const groupStats = {
      total: groupsData.data?.length || 0,
      beginner: groupsData.data?.filter(g => g.difficulty === 'beginner').length || 0,
      intermediate: groupsData.data?.filter(g => g.difficulty === 'intermediate').length || 0,
      advanced: groupsData.data?.filter(g => g.difficulty === 'advanced').length || 0,
      expert: groupsData.data?.filter(g => g.difficulty === 'expert').length || 0,
    };

    return { vocabulary: vocabularyStats, groups: groupStats };
  },

  // Get unique part of speech values
  async getPartsOfSpeech() {
    const { data, error } = await supabase
      .from('vocabulary')
      .select('part_of_speech')
      .eq('user_id', SHARED_USER_ID)
      .not('part_of_speech', 'is', null);
    
    if (error) throw error;

    // Extract unique parts of speech
    const partsOfSpeechSet = new Set(data?.map(vocab => vocab.part_of_speech).filter(Boolean));
    const partsOfSpeech = Array.from(partsOfSpeechSet).sort();
    return partsOfSpeech;
  },

  // Get unique languages used in vocabulary groups
  async getLanguages() {
    const { data, error } = await supabase
      .from('vocabulary_groups')
      .select('language, target_language')
      .eq('user_id', SHARED_USER_ID);
    
    if (error) throw error;

    // Extract unique languages
    const languages = new Set<string>();
    data?.forEach(group => {
      if (group.language) languages.add(group.language);
      if (group.target_language) languages.add(group.target_language);
    });

    return Array.from(languages).sort();
  },

  // Get difficulty level options
  getDifficultyLevels(): { value: DifficultyLevel; label: string; color: string }[] {
    return [
      { value: 'beginner', label: 'Beginner', color: 'green' },
      { value: 'intermediate', label: 'Intermediate', color: 'yellow' },
      { value: 'advanced', label: 'Advanced', color: 'orange' },
      { value: 'expert', label: 'Expert', color: 'red' },
    ];
  },

  // Get common parts of speech options
  getPartsOfSpeechOptions(): { value: string; label: string }[] {
    return [
      { value: 'noun', label: 'Noun' },
      { value: 'verb', label: 'Verb' },
      { value: 'adjective', label: 'Adjective' },
      { value: 'adverb', label: 'Adverb' },
      { value: 'pronoun', label: 'Pronoun' },
      { value: 'preposition', label: 'Preposition' },
      { value: 'conjunction', label: 'Conjunction' },
      { value: 'interjection', label: 'Interjection' },
      { value: 'article', label: 'Article' },
    ];
  },
};

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from 'clsx';

/**
 * Utility function to merge class names with Tailwind CSS
 * Combines clsx and class-variance-authority for better DX
 */
export function cn(...inputs: ClassValue[]) {
  return clsx(inputs);
}

/**
 * Format date to locale string
 */
export function formatDate(date: Date | string | null | undefined): string {
  if (!date) return '';
  
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  return dateObj.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
}

/**
 * Format date to relative time (e.g., "2 days ago")
 */
export function formatRelativeTime(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const now = new Date();
  const diffInMs = now.getTime() - dateObj.getTime();
  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));

  if (diffInDays === 0) return 'Today';
  if (diffInDays === 1) return 'Yesterday';
  if (diffInDays < 7) return `${diffInDays} days ago`;
  if (diffInDays < 30) return `${Math.floor(diffInDays / 7)} weeks ago`;
  if (diffInDays < 365) return `${Math.floor(diffInDays / 30)} months ago`;
  
  return `${Math.floor(diffInDays / 365)} years ago`;
}

/**
 * Capitalize first letter of a string
 */
export function capitalize(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * Truncate text to specified length
 */
export function truncate(text: string, length: number): string {
  if (text.length <= length) return text;
  return text.substring(0, length) + '...';
}

/**
 * Generate a slug from a string
 */
export function slugify(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters
    .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens
}

/**
 * Check if a string is a valid email
 */
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

/**
 * Generate a random ID
 */
export function generateId(): string {
  return Math.random().toString(36).substring(2) + Date.now().toString(36);
}

/**
 * Debounce function
 */
export function debounce<T extends (...args: any[]) => void>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  
  return function executedFunction(...args: Parameters<T>) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

================
File: src/types/database.ts
================
// Database types
export type CourseStatus = 'draft' | 'published' | 'archived';
export type DifficultyLevel = 'beginner' | 'intermediate' | 'advanced' | 'expert';
export type LessonStatus = 'draft' | 'scheduled' |
  'completed' | 'cancelled';
export type ContentType = 'text' | 'video' | 'audio' | 'pdf' | 'image' | 'interactive';
export type RecurrenceType = 'none' | 'daily' | 'weekly' | 'biweekly' | 'monthly';
export type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
export type AttendanceStatus = 'present' | 'absent' | 'late' | 'excused';


// Category type
export interface Category {
  id: string;
  name: string;
  description?: string;
  type: string;
  parent_id?: string;
  color?: string;
  icon?: string;
  user_id: string;
  created_at: string;
  updated_at: string;
}

// Course type
export interface Course {
  id: string;
  title: string;
  description?: string;
  short_description?: string;
  category_id?: string;
  status: CourseStatus;
  difficulty: DifficultyLevel;
  duration_hours?: number;
  objectives?: string[];
  prerequisites?: string[];
  tags?: string[];
  thumbnail_url?: string;
  is_public: boolean;
  public_slug?: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  published_at?: string;
  metadata?: Record<string, any>;
  
  // Relations
  category?: Category;
  book_count?: number;
  vocabulary_group_count?: number;
  schedule_count?: number;
  // Add these lines for the relations
  course_books?: CourseBook[];
  course_vocabulary_groups?: CourseVocabularyGroup[];
  course_objectives?: CourseObjective[];
}

// Book type
export interface Book {
  id: string;
  title: string;
  author?: string;
  isbn?: string;
  publisher?: string;
  publication_year?: number;
  description?: string;
  category_id?: string;
  content_type: ContentType;
  file_url?: string;
  cover_image_url?: string;
  total_pages?: number;
  language: string;
  tags?: string[];
  is_public: boolean;
  public_slug?: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations
  category?: Category;
  vocabulary_group_books?: VocabularyGroupBook[];
}

// VocabularyGroup type
export interface VocabularyGroup {
  id: string;
  name: string;
  description?: string;
  category_id?: string;
  language: string;
  target_language?: string;
  difficulty: DifficultyLevel;
  tags?: string[];
  is_public: boolean;
  public_slug?: string;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  // Relations
  category?: Category;
  vocabulary_group_items?: VocabularyGroupItem[];
  vocabulary_group_books?: VocabularyGroupBook[];
  vocabulary_count?: number;
}

// Vocabulary type
export interface Vocabulary {
  id: string;
  word: string;
  translation?: string;
  pronunciation?: string;
  part_of_speech?: string;
  definition?: string;
  example_sentence?: string;
  example_translation?: string;
  notes?: string;
  difficulty: DifficultyLevel;
  audio_url?: string;
  image_url?: string;
  tags?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
}

// VocabularyGroupItem relation type
export interface VocabularyGroupItem {
  id: string;
  vocabulary_group_id: string;
  vocabulary_id: string;
  position: number;
  added_at: string;
  // Relations
  vocabulary_group?: VocabularyGroup;
  vocabulary?: Vocabulary;
}

// CourseBook relation type
export interface CourseBook {
  id: string;
  course_id: string;
  book_id: string;
  is_required: boolean;
  notes?: string;
  position: number;
  
  // Relations
  course?: Course;
  book?: Book;
}

// CourseVocabularyGroup relation type
export interface CourseVocabularyGroup {
  id: string;
  course_id: string;
  vocabulary_group_id: string;
  position: number;
  // Relations
  course?: Course;
  vocabulary_group?: VocabularyGroup;
}

// Objective type
export interface Objective {
  id: string;
  title: string;
  description?: string;
  category_id?: string;
  bloom_level?: string;
  measurable: boolean;
  tags?: string[];
  is_template: boolean;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  // Relations
  category?: Category;
}

// Method type
export interface Method {
  id: string;
  title: string;
  description?: string;
  category_id?: string;
  tags?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations
  category?: Category;
}

// Task type
export interface Task {
  id: string;
  title: string;
  description?: string;
  category_id?: string;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  points?: number;
  tags?: string[];
  belongingCourses?: any[];
  belongingLessons?: any[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations
  category?: Category;
}

// Schedule type
export interface Schedule {
  id: string;
  course_id: string;
  name: string;
  description?: string;
  start_date: string;
  end_date?: string;
  recurrence_type: RecurrenceType;
  recurrence_days?: DayOfWeek[];
  default_start_time: string;
  default_duration_minutes: number;
  timezone: string;
  location?: string;
  max_students?: number;
  is_active: boolean;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  // Relations
  course?: Course;
  lessons?: Lesson[];
}

// Lesson type
export interface Lesson {
  id: string;
  schedule_id: string;
  course_id: string;
  title: string;
  description?: string;
  lesson_number?: number;
  date: string;
  start_time: string;
  end_time: string;
  duration_minutes?: number;
  location?: string;
  status: LessonStatus;
  notes?: string;
  tags?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations
  schedule?: Schedule;
  course?: Course;
  objectives?: LessonObjective[];
  methods?: LessonMethod[];
  tasks?: LessonTask[];
  books?: LessonBook[];
  vocabulary?: LessonVocabulary[];
  attendance?: Attendance[];
}

// Attendance type
export interface Attendance {
  id: string;
  lesson_id: string;
  student_name: string;
  student_id?: string;
  status: AttendanceStatus;
  notes?: string;
  marked_at: string;
  marked_by?: string;
}

// PublicLink type
export interface PublicLink {
    id: string;
    entity_type: string;
    entity_id: string;
    token: string;
    expires_at?: string;
    password_hash?: string;
    max_views?: number;
    current_views: number;
    is_active: boolean;
    created_at: string;
    metadata?: Record<string, any>;
}

// Relation types for Courses and Lessons
export interface CourseObjective {
    id: string;
    course_id: string;
    objective_id: string;
    position: number;
    created_at: string;
    // Relations
    course?: Course;
    objective?: Objective;
}

export interface CourseTask {
    id: string;
    course_id: string;
    task_id: string;
    position: number;
    created_at: string;
    // Relations
    course?: Course;
    task?: Task;
}

export interface CourseMethod {
    id: string;
    course_id: string;
    method_id: string;
    position: number;
    created_at: string;
    // Relations
    course?: Course;
    method?: Method;
}

export interface LessonObjective {
    id: string;
    lesson_id: string;
    objective_id: string;
    position: number;
    // Relations
    lesson?: Lesson;
    objective?: Objective;
}
export interface LessonMethod {
    id: string;
    lesson_id: string;
    method_id: string;
    duration_override?: number;
    position: number;
    notes?: string;
}
export interface LessonTask {
    id: string;
    lesson_id: string;
    task_id: string;
    duration_override?: number;
    position: number;
    notes?: string;
    is_homework: boolean;
    due_date?: string;
}
export interface LessonBook {
    id: string;
    lesson_id: string;
    book_id: string;
    pages_from?: number;
    pages_to?: number;
    notes?: string;
}
export interface LessonVocabulary {
    id: string;
    lesson_id: string;
    vocabulary_id: string;
    position: number;
}

export interface VocabularyBook {
    id: string;
    vocabulary_id: string;
    book_id: string;
    page_number?: number;
    section?: string;
    notes?: string;
}

export interface VocabularyGroupBook {
    id: string;
    vocabulary_group_id: string;
    book_id: string;
    notes?: string;
    position: number;
    // Relations
    vocabulary_group?: VocabularyGroup;
    book?: Book;
}


// --- Main Database Type ---
export type Database = {
  public: {
    Tables: {
      categories: {
        Row: Category;
        Insert: Omit<Category, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Category, 'id' | 'user_id'>>;
      };
      courses: {
        Row: Course;
        Insert: Omit<Course, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Course, 'id' | 'user_id'>>;
      };
      books: {
        Row: Book;
        Insert: Omit<Book, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Book, 'id' | 'user_id'>>;
      };
      vocabulary_groups: {
        Row: VocabularyGroup;
        Insert: Omit<VocabularyGroup, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<VocabularyGroup, 'id' | 'user_id'>>;
      };
      vocabulary: {
        Row: Vocabulary;
        Insert: Omit<Vocabulary, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Vocabulary, 'id' | 'user_id'>>;
      };
      vocabulary_group_items: {
        Row: VocabularyGroupItem;
        Insert: Omit<VocabularyGroupItem, 'id'>;
        Update: Partial<Omit<VocabularyGroupItem, 'id'>>;
      };
      objectives: {
        Row: Objective;
        Insert: Omit<Objective, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Objective, 'id' | 'user_id'>>;
      };
      methods: {
        Row: Method;
        Insert: Omit<Method, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Method, 'id' | 'user_id'>>;
      };
      tasks: {
        Row: Task;
        Insert: Omit<Task, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Task, 'id' | 'user_id'>>;
      };
      schedules: {
        Row: Schedule;
        Insert: Omit<Schedule, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Schedule, 'id' | 'user_id'>>;
      };
      lessons: {
        Row: Lesson;
        Insert: Omit<Lesson, 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Omit<Lesson, 'id' | 'user_id'>>;
      };
      course_books: {
        Row: CourseBook;
        Insert: Omit<CourseBook, 'id'>;
        Update: Partial<Omit<CourseBook, 'id'>>;
      };
      course_vocabulary_groups: {
        Row: CourseVocabularyGroup;
        Insert: Omit<CourseVocabularyGroup, 'id'>;
        Update: Partial<Omit<CourseVocabularyGroup, 'id'>>;
      };
      course_objectives: {
        Row: CourseObjective;
        Insert: Omit<CourseObjective, 'id' | 'created_at'>;
        Update: Partial<Omit<CourseObjective, 'id'>>;
      };
      lesson_objectives: {
        Row: LessonObjective;
        Insert: Omit<LessonObjective, 'id'>;
        Update: Partial<Omit<LessonObjective, 'id'>>;
      };
      lesson_methods: {
        Row: LessonMethod;
        Insert: Omit<LessonMethod, 'id'>;
        Update: Partial<Omit<LessonMethod, 'id'>>;
      };
      lesson_tasks: {
        Row: LessonTask;
        Insert: Omit<LessonTask, 'id'>;
        Update: Partial<Omit<LessonTask, 'id'>>;
      };
      lesson_books: {
        Row: LessonBook;
        Insert: Omit<LessonBook, 'id'>;
        Update: Partial<Omit<LessonBook, 'id'>>;
      };
      lesson_vocabulary: {
        Row: LessonVocabulary;
        Insert: Omit<LessonVocabulary, 'id'>;
        Update: Partial<Omit<LessonVocabulary, 'id'>>;
      };
      vocabulary_books: {
        Row: VocabularyBook;
        Insert: Omit<VocabularyBook, 'id'>;
        Update: Partial<Omit<VocabularyBook, 'id'>>;
      };
      vocabulary_group_books: {
        Row: VocabularyGroupBook;
        Insert: Omit<VocabularyGroupBook, 'id'>;
        Update: Partial<Omit<VocabularyGroupBook, 'id'>>;
      };
      attendance: {
        Row: Attendance;
        Insert: Omit<Attendance, 'id' | 'marked_at'>;
        Update: Partial<Omit<Attendance, 'id'>>;
      };
      public_links: {
        Row: PublicLink;
        Insert: Omit<PublicLink, 'id' | 'created_at' | 'current_views'>;
        Update: Partial<Omit<PublicLink, 'id'>>;
      };
    };
    Views: {
      [_ in never]: never;
    };
    Functions: {
      [_ in never]: never;
    };
    Enums: {
      course_status: 'draft' | 'published' | 'archived';
      lesson_status: 'draft' | 'scheduled' | 'completed' | 'cancelled';
      difficulty_level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
      content_type: 'text' | 'video' | 'audio' | 'pdf' | 'image' | 'interactive';
      recurrence_type_enum: 'none' | 'daily' | 'weekly' | 'biweekly' | 'monthly';
      day_of_week_enum: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
      attendance_status: 'present' | 'absent' | 'late' | 'excused';
    };
  };
};

================
File: src/types/index.ts
================
// Common types used throughout the application

export interface BaseEntity {
  id: string;
  created_at: string;
  updated_at: string;
  created_by?: string;
}

export interface Category extends BaseEntity {
  name: string;
  description?: string;
  type: 'course' | 'book' | 'vocabulary' | 'method' | 'objective' | 'task';
  parent_id?: string;
  color?: string;
}

export interface Course extends BaseEntity {
  name: string;
  description?: string;
  category_id?: string;
  cover_image?: string;
  target_audience?: string;
  prerequisites?: string;
  status: 'draft' | 'published' | 'archived';
  is_public?: boolean;
  
  // Relations
  category?: Category;
  books?: Book[];
  schedules?: Schedule[];
}

export interface Book extends BaseEntity {
  title: string;
  author?: string;
  description?: string;
  category_id?: string;
  cover_image?: string;
  isbn?: string;
  publisher?: string;
  publication_year?: number;
  tags?: string[];
  
  // Relations
  category?: Category;
  vocabulary_groups?: VocabularyGroup[];
}

export interface Vocabulary extends BaseEntity {
  word: string;
  part_of_speech: 'noun' | 'verb' | 'adjective' | 'adverb' | 'preposition' | 'conjunction' | 'interjection' | 'other';
  definition: string;
  pronunciation?: string;
  example_sentence?: string;
  cefr_level: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
  difficulty_level?: number; // 1-10
  tags?: string[];
}

export interface VocabularyGroup extends BaseEntity {
  name: string;
  description?: string;
  book_id?: string;
  category_id?: string;
  
  // Relations
  book?: Book;
  category?: Category;
  vocabulary?: Vocabulary[];
}

export interface Schedule extends BaseEntity {
  name: string;
  description?: string;
  total_weeks: number;
  sessions_per_week: number;
  session_duration: number; // in minutes
  start_date?: string;
  end_date?: string;
  template_type?: string;
  
  // Relations
  lessons?: Lesson[];
}

export interface Lesson extends BaseEntity {
  schedule_id: string;
  title: string;
  description?: string;
  week_number: number;
  session_number: number;
  date?: string;
  duration?: number; // in minutes
  notes?: string;
  attendance_notes?: string;
  
  // Relations
  schedule?: Schedule;
  objectives?: Objective[];
  methods?: Method[];
  tasks?: Task[];
  vocabulary_groups?: VocabularyGroup[];
}

export interface Objective extends BaseEntity {
  name: string;
  description: string;
  category_id?: string;
  status: 'planning' | 'active' | 'completed' | 'archived';
  difficulty_level?: number; // 1-10
  
  // Relations
  category?: Category;
}

export interface Method extends BaseEntity {
  name: string;
  description: string;
  category_id?: string;
  methodology_type: 'PBL' | 'flipped_classroom' | 'group_discussion' | 'lecture' | 'workshop' | 'seminar' | 'other';
  estimated_duration?: number; // in minutes
  required_materials?: string;
  
  // Relations
  category?: Category;
}

export interface Task extends BaseEntity {
  name: string;
  description: string;
  category_id?: string;
  type: 'quiz' | 'assignment' | 'reading' | 'writing' | 'discussion' | 'presentation' | 'project' | 'other';
  estimated_duration?: number; // in minutes
  difficulty_level?: number; // 1-10
  instructions?: string;
  materials_needed?: string;
  
  // Relations
  category?: Category;
}

// API Response types
export interface ApiResponse<T = any> {
  data?: T;
  error?: {
    message: string;
    code?: string;
  };
  meta?: {
    total?: number;
    page?: number;
    limit?: number;
  };
}

export interface PaginatedResponse<T = any> {
  data: T[];
  meta: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}

// Form and UI types
export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

export interface FilterOptions {
  search?: string;
  category?: string;
  status?: string;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  page?: number;
  limit?: number;
}

// Component prop types
export interface CardProps {
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
}

export interface ButtonProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  className?: string;
}

export interface InputProps {
  label?: string;
  error?: string;
  placeholder?: string;
  required?: boolean;
  disabled?: boolean;
  className?: string;
}

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

// Navigation and routing types
export interface NavItem {
  name: string;
  href: string;
  icon?: React.ComponentType<{ className?: string }>;
  current?: boolean;
  children?: NavItem[];
}

// Search and pagination
export interface SearchFilters {
  query?: string;
  categories?: string[];
  dateFrom?: string;
  dateTo?: string;
  status?: string[];
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalItems: number;
  itemsPerPage: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

// Export/Import types
export interface ImportResult {
  success: boolean;
  imported: number;
  failed: number;
  errors: Array<{
    row: number;
    message: string;
  }>;
}

export interface ExportOptions {
  format: 'csv' | 'excel' | 'json';
  fields: string[];
  filters?: FilterOptions;
}

// Bulk operations
export interface BulkOperation {
  action: 'delete' | 'update' | 'export';
  selectedIds: string[];
  updateData?: Partial<any>;
}

export interface BulkOperationResult {
  success: boolean;
  affected: number;
  errors: Array<{
    id: string;
    message: string;
  }>;
}

================
File: src/types/schedule.ts
================
// Schedule and Lesson types
export type RecurrenceType = 'none' | 'daily' | 'weekly' | 'biweekly' | 'monthly';
export type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
export type AttendanceStatus = 'present' | 'absent' | 'late' | 'excused';

// Schedule type
export interface Schedule {
  id: string;
  course_id: string;
  name: string;
  description?: string;
  start_date: string;
  end_date?: string;
  recurrence_type: RecurrenceType;
  recurrence_days?: DayOfWeek[];
  recurrence_interval?: number;
  default_start_time: string;
  default_duration_minutes: number;
  timezone: string;
  location?: string;
  max_students?: number;
  is_active: boolean;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations
  course?: any; // Will be Course type from database.ts
  lessons?: Lesson[];
  student_count?: number;
}

// Lesson type
export interface Lesson {
  id: string;
  schedule_id: string;
  course_id: string;
  title: string;
  description?: string;
  lesson_number?: number;
  date: string;
  start_time: string;
  end_time: string;
  duration_minutes?: number;
  location?: string;
  status: 'draft' | 'scheduled' | 'completed' | 'cancelled';
  tags?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
  
  // Relations - Enhanced for course content integration
  schedule?: Schedule;
  objectives?: LessonObjective[];
  methods?: LessonMethod[];
  tasks?: LessonTask[];
  books?: LessonBook[];
  vocabulary_groups?: LessonVocabularyGroup[];
  attendance?: Attendance[];
}

// Attendance type
export interface Attendance {
  id: string;
  lesson_id: string;
  student_name: string;
  student_id?: string;
  status: AttendanceStatus;
  notes?: string;
  marked_at: string;
  marked_by?: string;
  
  // Relations
  lesson?: Lesson;
}

// Objective type (simplified for now)
export interface Objective {
  id: string;
  title: string;
  description?: string;
  category_id?: string;
  bloom_level?: string;
  measurable: boolean;
  tags?: string[];
  is_template: boolean;
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
}

// Method type (simplified for now)
export interface Method {
  id: string;
  title: string;
  description?: string;
  category_id?: string;
  estimated_minutes?: number;
  materials_needed?: string[];
  tags?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
}

// Task type (simplified for now)
export interface Task {
  id: string;
  title: string;
  description?: string;
  type: 'quiz' | 'assignment' | 'reading' | 'writing' | 'speaking' | 'listening' | 'other';
  category_id?: string;
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  points?: number;
  estimated_minutes?: number;
  instructions?: string;
  tags?: string[];
  belongingCourses?: any[];
  belongingLessons?: any[];
  user_id: string;
  created_at: string;
  updated_at: string;
  metadata?: Record<string, any>;
}

// Lesson-Objective relation
export interface LessonObjective {
  id: string;
  lesson_id: string;
  objective_id: string;
  position: number;
  
  // Relations
  lesson?: Lesson;
  objective?: Objective;
}

// Lesson-Method relation
export interface LessonMethod {
  id: string;
  lesson_id: string;
  method_id: string;
  position: number;
  duration_minutes?: number;
  notes?: string;
  
  // Relations
  lesson?: Lesson;
  method?: Method;
}

// Lesson-Task relation
export interface LessonTask {
  id: string;
  lesson_id: string;
  task_id: string;
  position: number;
  is_homework: boolean;
  due_date?: string;
  notes?: string;
  
  // Relations
  lesson?: Lesson;
  task?: Task;
}

// Calendar event type for UI
export interface CalendarEvent {
  id: string;
  title: string;
  start: Date;
  end: Date;
  resource?: {
    lesson: Lesson;
    schedule: Schedule;
  };
  className?: string;
}

// Schedule template type
export interface ScheduleTemplate {
  id: string;
  name: string;
  description?: string;
  default_duration_minutes: number;
  recurrence_type: RecurrenceType;
  recurrence_days?: DayOfWeek[];
  default_objectives?: string[];
  default_methods?: string[];
  default_tasks?: string[];
  user_id: string;
  created_at: string;
  updated_at: string;
}

// Lesson-Book relation
export interface LessonBook {
  id: string;
  lesson_id: string;
  book_id: string;
  position: number;
  is_required: boolean;
  reading_pages?: string;
  notes?: string;
  
  // Relations
  lesson?: Lesson;
  book?: any; // Will be Book type from database.ts
}

// Lesson-VocabularyGroup relation
export interface LessonVocabularyGroup {
  id: string;
  lesson_id: string;
  vocabulary_group_id: string;
  position: number;
  focus_words?: string[];
  notes?: string;
  
  // Relations
  lesson?: Lesson;
  vocabulary_group?: any; // Will be VocabularyGroup type from database.ts
}

================
File: SUPABASE_RLS_FIX.md
================
# Fix for RLS Policy Error

## Problem
The application is getting "new row violates row-level security policy" error because the database has Row Level Security (RLS) policies that require authenticated users, but we're implementing a shared access model.

## Solution
Execute the SQL script in `/database/shared_access_policies.sql` in your Supabase SQL editor to update all RLS policies to allow shared access.

## Steps to Fix

1. Open your Supabase project dashboard
2. Go to the SQL Editor
3. Copy and paste the contents of `/database/shared_access_policies.sql`
4. Execute the script

This will:
- Drop all restrictive user-based RLS policies
- Create new permissive policies that allow all operations for shared access
- Maintain data security through application-level permissions rather than database-level user restrictions

## Alternative Quick Fix (if you prefer)
If you want a quicker solution, you can temporarily disable RLS on the schedules table:

```sql
ALTER TABLE schedules DISABLE ROW LEVEL SECURITY;
```

However, I recommend using the comprehensive solution above for consistency across all tables.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
          950: '#172554',
        },
        gray: {
          50: '#f9fafb',
          100: '#f3f4f6',
          200: '#e5e7eb',
          300: '#d1d5db',
          400: '#9ca3af',
          500: '#6b7280',
          600: '#4b5563',
          700: '#374151',
          800: '#1f2937',
          900: '#111827',
          950: '#030712',
        },
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
      maxWidth: {
        '8xl': '88rem',
        '9xl': '96rem',
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/lib/*": ["./src/lib/*"],
      "@/types/*": ["./src/types/*"],
      "@/utils/*": ["./src/utils/*"],
      "@/hooks/*": ["./src/hooks/*"],
      "@/stores/*": ["./src/stores/*"],
      "@/styles/*": ["./src/styles/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: tsconfig.tsbuildinfo
================
{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/@types/react/global.d.ts","./node_modules/csstype/index.d.ts","./node_modules/@types/prop-types/index.d.ts","./node_modules/@types/react/index.d.ts","./node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/next/amp.d.ts","./node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/@types/node/compatibility/index.d.ts","./node_modules/@types/node/globals.typedarray.d.ts","./node_modules/@types/node/buffer.buffer.d.ts","./node_modules/undici-types/header.d.ts","./node_modules/undici-types/readable.d.ts","./node_modules/undici-types/file.d.ts","./node_modules/undici-types/fetch.d.ts","./node_modules/undici-types/formdata.d.ts","./node_modules/undici-types/connector.d.ts","./node_modules/undici-types/client.d.ts","./node_modules/undici-types/errors.d.ts","./node_modules/undici-types/dispatcher.d.ts","./node_modules/undici-types/global-dispatcher.d.ts","./node_modules/undici-types/global-origin.d.ts","./node_modules/undici-types/pool-stats.d.ts","./node_modules/undici-types/pool.d.ts","./node_modules/undici-types/handlers.d.ts","./node_modules/undici-types/balanced-pool.d.ts","./node_modules/undici-types/agent.d.ts","./node_modules/undici-types/mock-interceptor.d.ts","./node_modules/undici-types/mock-agent.d.ts","./node_modules/undici-types/mock-client.d.ts","./node_modules/undici-types/mock-pool.d.ts","./node_modules/undici-types/mock-errors.d.ts","./node_modules/undici-types/proxy-agent.d.ts","./node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/undici-types/retry-handler.d.ts","./node_modules/undici-types/retry-agent.d.ts","./node_modules/undici-types/api.d.ts","./node_modules/undici-types/interceptors.d.ts","./node_modules/undici-types/util.d.ts","./node_modules/undici-types/cookies.d.ts","./node_modules/undici-types/patch.d.ts","./node_modules/undici-types/websocket.d.ts","./node_modules/undici-types/eventsource.d.ts","./node_modules/undici-types/filereader.d.ts","./node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/undici-types/content-type.d.ts","./node_modules/undici-types/cache.d.ts","./node_modules/undici-types/index.d.ts","./node_modules/@types/node/globals.d.ts","./node_modules/@types/node/assert.d.ts","./node_modules/@types/node/assert/strict.d.ts","./node_modules/@types/node/async_hooks.d.ts","./node_modules/@types/node/buffer.d.ts","./node_modules/@types/node/child_process.d.ts","./node_modules/@types/node/cluster.d.ts","./node_modules/@types/node/console.d.ts","./node_modules/@types/node/constants.d.ts","./node_modules/@types/node/crypto.d.ts","./node_modules/@types/node/dgram.d.ts","./node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/@types/node/dns.d.ts","./node_modules/@types/node/dns/promises.d.ts","./node_modules/@types/node/domain.d.ts","./node_modules/@types/node/dom-events.d.ts","./node_modules/@types/node/events.d.ts","./node_modules/@types/node/fs.d.ts","./node_modules/@types/node/fs/promises.d.ts","./node_modules/@types/node/http.d.ts","./node_modules/@types/node/http2.d.ts","./node_modules/@types/node/https.d.ts","./node_modules/@types/node/inspector.d.ts","./node_modules/@types/node/module.d.ts","./node_modules/@types/node/net.d.ts","./node_modules/@types/node/os.d.ts","./node_modules/@types/node/path.d.ts","./node_modules/@types/node/perf_hooks.d.ts","./node_modules/@types/node/process.d.ts","./node_modules/@types/node/punycode.d.ts","./node_modules/@types/node/querystring.d.ts","./node_modules/@types/node/readline.d.ts","./node_modules/@types/node/readline/promises.d.ts","./node_modules/@types/node/repl.d.ts","./node_modules/@types/node/sea.d.ts","./node_modules/@types/node/stream.d.ts","./node_modules/@types/node/stream/promises.d.ts","./node_modules/@types/node/stream/consumers.d.ts","./node_modules/@types/node/stream/web.d.ts","./node_modules/@types/node/string_decoder.d.ts","./node_modules/@types/node/test.d.ts","./node_modules/@types/node/timers.d.ts","./node_modules/@types/node/timers/promises.d.ts","./node_modules/@types/node/tls.d.ts","./node_modules/@types/node/trace_events.d.ts","./node_modules/@types/node/tty.d.ts","./node_modules/@types/node/url.d.ts","./node_modules/@types/node/util.d.ts","./node_modules/@types/node/v8.d.ts","./node_modules/@types/node/vm.d.ts","./node_modules/@types/node/wasi.d.ts","./node_modules/@types/node/worker_threads.d.ts","./node_modules/@types/node/zlib.d.ts","./node_modules/@types/node/index.d.ts","./node_modules/next/dist/server/get-page-files.d.ts","./node_modules/@types/react/canary.d.ts","./node_modules/@types/react/experimental.d.ts","./node_modules/@types/react-dom/index.d.ts","./node_modules/@types/react-dom/canary.d.ts","./node_modules/@types/react-dom/experimental.d.ts","./node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/next/dist/server/config.d.ts","./node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/next/dist/server/body-streams.d.ts","./node_modules/next/dist/server/future/route-kind.d.ts","./node_modules/next/dist/server/future/route-definitions/route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/route-match.d.ts","./node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/next/dist/server/request-meta.d.ts","./node_modules/next/dist/server/lib/revalidate.d.ts","./node_modules/next/dist/server/config-shared.d.ts","./node_modules/next/dist/server/base-http/index.d.ts","./node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/next/dist/server/node-environment.d.ts","./node_modules/next/dist/server/require-hook.d.ts","./node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/next/dist/lib/page-types.d.ts","./node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/next/dist/server/render-result.d.ts","./node_modules/next/dist/server/future/helpers/i18n-provider.d.ts","./node_modules/next/dist/server/web/next-url.d.ts","./node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/next/dist/server/web/types.d.ts","./node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/next/dist/lib/constants.d.ts","./node_modules/next/dist/build/index.d.ts","./node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/next/dist/server/base-http/node.d.ts","./node_modules/next/dist/server/font-utils.d.ts","./node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-modules/route-module.d.ts","./node_modules/next/dist/server/load-components.d.ts","./node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-definitions/locale-route-definition.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-route-definition.d.ts","./node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/next/dist/client/with-router.d.ts","./node_modules/next/dist/client/router.d.ts","./node_modules/next/dist/client/route-loader.d.ts","./node_modules/next/dist/client/page-loader.d.ts","./node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-definitions/app-page-route-definition.d.ts","./node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/next/dist/build/webpack/loaders/next-app-loader.d.ts","./node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage-instance.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage.external.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/next/dist/client/components/request-async-storage-instance.d.ts","./node_modules/next/dist/client/components/request-async-storage.external.d.ts","./node_modules/next/dist/server/app-render/create-error-handler.d.ts","./node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.d.ts","./node_modules/@types/react/jsx-runtime.d.ts","./node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/next/dist/client/components/router-reducer/create-initial-router-state.d.ts","./node_modules/next/dist/client/components/app-router.d.ts","./node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/next/dist/client/components/action-async-storage-instance.d.ts","./node_modules/next/dist/client/components/action-async-storage.external.d.ts","./node_modules/next/dist/client/components/client-page.d.ts","./node_modules/next/dist/client/components/search-params.d.ts","./node_modules/next/dist/client/components/not-found-boundary.d.ts","./node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.d.ts","./node_modules/next/dist/server/app-render/types.d.ts","./node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.compiled.d.ts","./node_modules/next/dist/build/templates/pages.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.d.ts","./node_modules/next/dist/server/render.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-api-route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/pages-api-route-match.d.ts","./node_modules/next/dist/server/future/route-matchers/route-matcher.d.ts","./node_modules/next/dist/server/future/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/next/dist/server/future/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/next/dist/server/future/normalizers/normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/locale-route-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/pathname-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/suffix.d.ts","./node_modules/next/dist/server/future/normalizers/request/rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefix.d.ts","./node_modules/next/dist/server/future/normalizers/request/postponed.d.ts","./node_modules/next/dist/server/future/normalizers/request/action.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefetch-rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/next-data.d.ts","./node_modules/next/dist/server/base-server.d.ts","./node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/next/dist/server/next-server.d.ts","./node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/next/dist/trace/types.d.ts","./node_modules/next/dist/trace/trace.d.ts","./node_modules/next/dist/trace/shared.d.ts","./node_modules/next/dist/trace/index.d.ts","./node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/next/dist/build/webpack-config.d.ts","./node_modules/next/dist/build/webpack/plugins/define-env-plugin.d.ts","./node_modules/next/dist/build/swc/index.d.ts","./node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/next/dist/telemetry/storage.d.ts","./node_modules/next/dist/server/lib/types.d.ts","./node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/next/dist/server/next.d.ts","./node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/next/types/index.d.ts","./node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/@next/env/dist/index.d.ts","./node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/next/dist/pages/_app.d.ts","./node_modules/next/app.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/next/cache.d.ts","./node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/next/config.d.ts","./node_modules/next/dist/pages/_document.d.ts","./node_modules/next/document.d.ts","./node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/next/dynamic.d.ts","./node_modules/next/dist/pages/_error.d.ts","./node_modules/next/error.d.ts","./node_modules/next/dist/shared/lib/head.d.ts","./node_modules/next/head.d.ts","./node_modules/next/dist/client/components/draft-mode.d.ts","./node_modules/next/dist/client/components/headers.d.ts","./node_modules/next/headers.d.ts","./node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/next/dist/client/image-component.d.ts","./node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/next/image.d.ts","./node_modules/next/dist/client/link.d.ts","./node_modules/next/link.d.ts","./node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/next/dist/client/components/redirect.d.ts","./node_modules/next/dist/client/components/not-found.d.ts","./node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/next/dist/client/components/navigation.d.ts","./node_modules/next/navigation.d.ts","./node_modules/next/router.d.ts","./node_modules/next/dist/client/script.d.ts","./node_modules/next/script.d.ts","./node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/next/server.d.ts","./node_modules/next/types/global.d.ts","./node_modules/next/types/compiled.d.ts","./node_modules/next/index.d.ts","./node_modules/next/image-types/global.d.ts","./next-env.d.ts","./node_modules/@supabase/functions-js/dist/module/types.d.ts","./node_modules/@supabase/functions-js/dist/module/FunctionsClient.d.ts","./node_modules/@supabase/functions-js/dist/module/index.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/select-query-parser/types.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/select-query-parser/parser.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/select-query-parser/utils.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/types.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/select-query-parser/result.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.d.ts","./node_modules/@supabase/postgrest-js/dist/cjs/index.d.ts","./node_modules/@supabase/realtime-js/dist/main/lib/constants.d.ts","./node_modules/@supabase/realtime-js/dist/main/lib/serializer.d.ts","./node_modules/@supabase/realtime-js/dist/main/lib/timer.d.ts","./node_modules/@supabase/realtime-js/dist/main/lib/push.d.ts","./node_modules/@types/phoenix/index.d.ts","./node_modules/@supabase/realtime-js/dist/main/RealtimePresence.d.ts","./node_modules/@supabase/realtime-js/dist/main/RealtimeChannel.d.ts","./node_modules/@supabase/realtime-js/dist/main/RealtimeClient.d.ts","./node_modules/@supabase/realtime-js/dist/main/index.d.ts","./node_modules/@supabase/storage-js/dist/module/lib/errors.d.ts","./node_modules/@supabase/storage-js/dist/module/lib/types.d.ts","./node_modules/@supabase/storage-js/dist/module/lib/fetch.d.ts","./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts","./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.d.ts","./node_modules/@supabase/storage-js/dist/module/StorageClient.d.ts","./node_modules/@supabase/storage-js/dist/module/index.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/error-codes.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/errors.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/types.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/fetch.d.ts","./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/helpers.d.ts","./node_modules/@supabase/auth-js/dist/module/GoTrueClient.d.ts","./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.d.ts","./node_modules/@supabase/auth-js/dist/module/AuthClient.d.ts","./node_modules/@supabase/auth-js/dist/module/lib/locks.d.ts","./node_modules/@supabase/auth-js/dist/module/index.d.ts","./node_modules/@supabase/supabase-js/dist/module/lib/types.d.ts","./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.d.ts","./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.d.ts","./node_modules/@supabase/supabase-js/dist/module/index.d.ts","./node_modules/@supabase/auth-helpers-shared/dist/index.d.ts","./node_modules/@supabase/auth-helpers-nextjs/dist/index.d.ts","./src/lib/supabase.ts","./src/contexts/AuthContext.tsx","./src/components/auth/AuthGuard.tsx","./node_modules/clsx/clsx.d.mts","./src/lib/utils.ts","./src/types/index.ts","./node_modules/class-variance-authority/dist/types.d.ts","./node_modules/class-variance-authority/dist/index.d.ts","./src/components/ui/Button.tsx","./src/components/ui/Input.tsx","./src/components/auth/LoginForm.tsx","./node_modules/@headlessui/react/dist/types.d.ts","./node_modules/@headlessui/react/dist/utils/render.d.ts","./node_modules/@headlessui/react/dist/components/button/button.d.ts","./node_modules/@headlessui/react/dist/components/checkbox/checkbox.d.ts","./node_modules/@headlessui/react/dist/components/close-button/close-button.d.ts","./node_modules/@headlessui/react/dist/hooks/use-by-comparator.d.ts","./node_modules/@floating-ui/utils/dist/floating-ui.utils.d.mts","./node_modules/@floating-ui/core/dist/floating-ui.core.d.mts","./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.d.mts","./node_modules/@floating-ui/dom/dist/floating-ui.dom.d.mts","./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.d.mts","./node_modules/@floating-ui/react/dist/floating-ui.react.d.mts","./node_modules/@headlessui/react/dist/internal/floating.d.ts","./node_modules/@headlessui/react/dist/components/label/label.d.ts","./node_modules/@headlessui/react/dist/components/combobox/combobox.d.ts","./node_modules/@headlessui/react/dist/components/data-interactive/data-interactive.d.ts","./node_modules/@headlessui/react/dist/components/description/description.d.ts","./node_modules/@headlessui/react/dist/components/dialog/dialog.d.ts","./node_modules/@headlessui/react/dist/components/disclosure/disclosure.d.ts","./node_modules/@headlessui/react/dist/components/field/field.d.ts","./node_modules/@headlessui/react/dist/components/fieldset/fieldset.d.ts","./node_modules/@headlessui/react/dist/components/focus-trap/focus-trap.d.ts","./node_modules/@headlessui/react/dist/components/input/input.d.ts","./node_modules/@headlessui/react/dist/components/legend/legend.d.ts","./node_modules/@headlessui/react/dist/components/listbox/listbox.d.ts","./node_modules/@headlessui/react/dist/components/menu/menu.d.ts","./node_modules/@headlessui/react/dist/components/popover/popover.d.ts","./node_modules/@headlessui/react/dist/components/portal/portal.d.ts","./node_modules/@headlessui/react/dist/components/radio-group/radio-group.d.ts","./node_modules/@headlessui/react/dist/components/select/select.d.ts","./node_modules/@headlessui/react/dist/components/switch/switch.d.ts","./node_modules/@headlessui/react/dist/components/tabs/tabs.d.ts","./node_modules/@headlessui/react/dist/components/textarea/textarea.d.ts","./node_modules/@headlessui/react/dist/internal/close-provider.d.ts","./node_modules/@headlessui/react/dist/components/transition/transition.d.ts","./node_modules/@headlessui/react/dist/index.d.ts","./node_modules/@heroicons/react/24/outline/AcademicCapIcon.d.ts","./node_modules/@heroicons/react/24/outline/AdjustmentsHorizontalIcon.d.ts","./node_modules/@heroicons/react/24/outline/AdjustmentsVerticalIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArchiveBoxArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArchiveBoxXMarkIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArchiveBoxIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownOnSquareStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownOnSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownTrayIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLeftCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLeftEndOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLeftOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLeftStartOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLongDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLongLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLongRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowLongUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowPathRoundedSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowPathIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowRightCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowRightEndOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowRightOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowRightStartOnRectangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowSmallDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowSmallLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowSmallRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowSmallUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTopRightOnSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTrendingDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTrendingUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnDownLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnDownRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnLeftDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnLeftUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnRightDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnRightUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnUpLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowTurnUpRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpOnSquareStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpOnSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpTrayIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUturnDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUturnLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUturnRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowUturnUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowsPointingInIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowsPointingOutIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowsRightLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ArrowsUpDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/AtSymbolIcon.d.ts","./node_modules/@heroicons/react/24/outline/BackspaceIcon.d.ts","./node_modules/@heroicons/react/24/outline/BackwardIcon.d.ts","./node_modules/@heroicons/react/24/outline/BanknotesIcon.d.ts","./node_modules/@heroicons/react/24/outline/Bars2Icon.d.ts","./node_modules/@heroicons/react/24/outline/Bars3BottomLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/Bars3BottomRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/Bars3CenterLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/Bars3Icon.d.ts","./node_modules/@heroicons/react/24/outline/Bars4Icon.d.ts","./node_modules/@heroicons/react/24/outline/BarsArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/BarsArrowUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/Battery0Icon.d.ts","./node_modules/@heroicons/react/24/outline/Battery100Icon.d.ts","./node_modules/@heroicons/react/24/outline/Battery50Icon.d.ts","./node_modules/@heroicons/react/24/outline/BeakerIcon.d.ts","./node_modules/@heroicons/react/24/outline/BellAlertIcon.d.ts","./node_modules/@heroicons/react/24/outline/BellSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/BellSnoozeIcon.d.ts","./node_modules/@heroicons/react/24/outline/BellIcon.d.ts","./node_modules/@heroicons/react/24/outline/BoldIcon.d.ts","./node_modules/@heroicons/react/24/outline/BoltSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/BoltIcon.d.ts","./node_modules/@heroicons/react/24/outline/BookOpenIcon.d.ts","./node_modules/@heroicons/react/24/outline/BookmarkSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/BookmarkSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/BookmarkIcon.d.ts","./node_modules/@heroicons/react/24/outline/BriefcaseIcon.d.ts","./node_modules/@heroicons/react/24/outline/BugAntIcon.d.ts","./node_modules/@heroicons/react/24/outline/BuildingLibraryIcon.d.ts","./node_modules/@heroicons/react/24/outline/BuildingOffice2Icon.d.ts","./node_modules/@heroicons/react/24/outline/BuildingOfficeIcon.d.ts","./node_modules/@heroicons/react/24/outline/BuildingStorefrontIcon.d.ts","./node_modules/@heroicons/react/24/outline/CakeIcon.d.ts","./node_modules/@heroicons/react/24/outline/CalculatorIcon.d.ts","./node_modules/@heroicons/react/24/outline/CalendarDateRangeIcon.d.ts","./node_modules/@heroicons/react/24/outline/CalendarDaysIcon.d.ts","./node_modules/@heroicons/react/24/outline/CalendarIcon.d.ts","./node_modules/@heroicons/react/24/outline/CameraIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChartBarSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChartBarIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChartPieIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleBottomCenterTextIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleBottomCenterIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleLeftEllipsisIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleLeftRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleOvalLeftEllipsisIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChatBubbleOvalLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/CheckBadgeIcon.d.ts","./node_modules/@heroicons/react/24/outline/CheckCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/CheckIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronDoubleDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronDoubleLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronDoubleRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronDoubleUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronUpDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/ChevronUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/CircleStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/ClipboardDocumentCheckIcon.d.ts","./node_modules/@heroicons/react/24/outline/ClipboardDocumentListIcon.d.ts","./node_modules/@heroicons/react/24/outline/ClipboardDocumentIcon.d.ts","./node_modules/@heroicons/react/24/outline/ClipboardIcon.d.ts","./node_modules/@heroicons/react/24/outline/ClockIcon.d.ts","./node_modules/@heroicons/react/24/outline/CloudArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/CloudArrowUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/CloudIcon.d.ts","./node_modules/@heroicons/react/24/outline/CodeBracketSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/CodeBracketIcon.d.ts","./node_modules/@heroicons/react/24/outline/Cog6ToothIcon.d.ts","./node_modules/@heroicons/react/24/outline/Cog8ToothIcon.d.ts","./node_modules/@heroicons/react/24/outline/CogIcon.d.ts","./node_modules/@heroicons/react/24/outline/CommandLineIcon.d.ts","./node_modules/@heroicons/react/24/outline/ComputerDesktopIcon.d.ts","./node_modules/@heroicons/react/24/outline/CpuChipIcon.d.ts","./node_modules/@heroicons/react/24/outline/CreditCardIcon.d.ts","./node_modules/@heroicons/react/24/outline/CubeTransparentIcon.d.ts","./node_modules/@heroicons/react/24/outline/CubeIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyBangladeshiIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyDollarIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyEuroIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyPoundIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyRupeeIcon.d.ts","./node_modules/@heroicons/react/24/outline/CurrencyYenIcon.d.ts","./node_modules/@heroicons/react/24/outline/CursorArrowRaysIcon.d.ts","./node_modules/@heroicons/react/24/outline/CursorArrowRippleIcon.d.ts","./node_modules/@heroicons/react/24/outline/DevicePhoneMobileIcon.d.ts","./node_modules/@heroicons/react/24/outline/DeviceTabletIcon.d.ts","./node_modules/@heroicons/react/24/outline/DivideIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentArrowUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentChartBarIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCheckIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyBangladeshiIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyDollarIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyEuroIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyPoundIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyRupeeIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentCurrencyYenIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentDuplicateIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentMagnifyingGlassIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentMinusIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentPlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentTextIcon.d.ts","./node_modules/@heroicons/react/24/outline/DocumentIcon.d.ts","./node_modules/@heroicons/react/24/outline/EllipsisHorizontalCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/EllipsisHorizontalIcon.d.ts","./node_modules/@heroicons/react/24/outline/EllipsisVerticalIcon.d.ts","./node_modules/@heroicons/react/24/outline/EnvelopeOpenIcon.d.ts","./node_modules/@heroicons/react/24/outline/EnvelopeIcon.d.ts","./node_modules/@heroicons/react/24/outline/EqualsIcon.d.ts","./node_modules/@heroicons/react/24/outline/ExclamationCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ExclamationTriangleIcon.d.ts","./node_modules/@heroicons/react/24/outline/EyeDropperIcon.d.ts","./node_modules/@heroicons/react/24/outline/EyeSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/EyeIcon.d.ts","./node_modules/@heroicons/react/24/outline/FaceFrownIcon.d.ts","./node_modules/@heroicons/react/24/outline/FaceSmileIcon.d.ts","./node_modules/@heroicons/react/24/outline/FilmIcon.d.ts","./node_modules/@heroicons/react/24/outline/FingerPrintIcon.d.ts","./node_modules/@heroicons/react/24/outline/FireIcon.d.ts","./node_modules/@heroicons/react/24/outline/FlagIcon.d.ts","./node_modules/@heroicons/react/24/outline/FolderArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/FolderMinusIcon.d.ts","./node_modules/@heroicons/react/24/outline/FolderOpenIcon.d.ts","./node_modules/@heroicons/react/24/outline/FolderPlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/FolderIcon.d.ts","./node_modules/@heroicons/react/24/outline/ForwardIcon.d.ts","./node_modules/@heroicons/react/24/outline/FunnelIcon.d.ts","./node_modules/@heroicons/react/24/outline/GifIcon.d.ts","./node_modules/@heroicons/react/24/outline/GiftTopIcon.d.ts","./node_modules/@heroicons/react/24/outline/GiftIcon.d.ts","./node_modules/@heroicons/react/24/outline/GlobeAltIcon.d.ts","./node_modules/@heroicons/react/24/outline/GlobeAmericasIcon.d.ts","./node_modules/@heroicons/react/24/outline/GlobeAsiaAustraliaIcon.d.ts","./node_modules/@heroicons/react/24/outline/GlobeEuropeAfricaIcon.d.ts","./node_modules/@heroicons/react/24/outline/H1Icon.d.ts","./node_modules/@heroicons/react/24/outline/H2Icon.d.ts","./node_modules/@heroicons/react/24/outline/H3Icon.d.ts","./node_modules/@heroicons/react/24/outline/HandRaisedIcon.d.ts","./node_modules/@heroicons/react/24/outline/HandThumbDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/HandThumbUpIcon.d.ts","./node_modules/@heroicons/react/24/outline/HashtagIcon.d.ts","./node_modules/@heroicons/react/24/outline/HeartIcon.d.ts","./node_modules/@heroicons/react/24/outline/HomeModernIcon.d.ts","./node_modules/@heroicons/react/24/outline/HomeIcon.d.ts","./node_modules/@heroicons/react/24/outline/IdentificationIcon.d.ts","./node_modules/@heroicons/react/24/outline/InboxArrowDownIcon.d.ts","./node_modules/@heroicons/react/24/outline/InboxStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/InboxIcon.d.ts","./node_modules/@heroicons/react/24/outline/InformationCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ItalicIcon.d.ts","./node_modules/@heroicons/react/24/outline/KeyIcon.d.ts","./node_modules/@heroicons/react/24/outline/LanguageIcon.d.ts","./node_modules/@heroicons/react/24/outline/LifebuoyIcon.d.ts","./node_modules/@heroicons/react/24/outline/LightBulbIcon.d.ts","./node_modules/@heroicons/react/24/outline/LinkSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/LinkIcon.d.ts","./node_modules/@heroicons/react/24/outline/ListBulletIcon.d.ts","./node_modules/@heroicons/react/24/outline/LockClosedIcon.d.ts","./node_modules/@heroicons/react/24/outline/LockOpenIcon.d.ts","./node_modules/@heroicons/react/24/outline/MagnifyingGlassCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/MagnifyingGlassMinusIcon.d.ts","./node_modules/@heroicons/react/24/outline/MagnifyingGlassPlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/MagnifyingGlassIcon.d.ts","./node_modules/@heroicons/react/24/outline/MapPinIcon.d.ts","./node_modules/@heroicons/react/24/outline/MapIcon.d.ts","./node_modules/@heroicons/react/24/outline/MegaphoneIcon.d.ts","./node_modules/@heroicons/react/24/outline/MicrophoneIcon.d.ts","./node_modules/@heroicons/react/24/outline/MinusCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/MinusSmallIcon.d.ts","./node_modules/@heroicons/react/24/outline/MinusIcon.d.ts","./node_modules/@heroicons/react/24/outline/MoonIcon.d.ts","./node_modules/@heroicons/react/24/outline/MusicalNoteIcon.d.ts","./node_modules/@heroicons/react/24/outline/NewspaperIcon.d.ts","./node_modules/@heroicons/react/24/outline/NoSymbolIcon.d.ts","./node_modules/@heroicons/react/24/outline/NumberedListIcon.d.ts","./node_modules/@heroicons/react/24/outline/PaintBrushIcon.d.ts","./node_modules/@heroicons/react/24/outline/PaperAirplaneIcon.d.ts","./node_modules/@heroicons/react/24/outline/PaperClipIcon.d.ts","./node_modules/@heroicons/react/24/outline/PauseCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/PauseIcon.d.ts","./node_modules/@heroicons/react/24/outline/PencilSquareIcon.d.ts","./node_modules/@heroicons/react/24/outline/PencilIcon.d.ts","./node_modules/@heroicons/react/24/outline/PercentBadgeIcon.d.ts","./node_modules/@heroicons/react/24/outline/PhoneArrowDownLeftIcon.d.ts","./node_modules/@heroicons/react/24/outline/PhoneArrowUpRightIcon.d.ts","./node_modules/@heroicons/react/24/outline/PhoneXMarkIcon.d.ts","./node_modules/@heroicons/react/24/outline/PhoneIcon.d.ts","./node_modules/@heroicons/react/24/outline/PhotoIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlayCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlayPauseIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlayIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlusCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlusSmallIcon.d.ts","./node_modules/@heroicons/react/24/outline/PlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/PowerIcon.d.ts","./node_modules/@heroicons/react/24/outline/PresentationChartBarIcon.d.ts","./node_modules/@heroicons/react/24/outline/PresentationChartLineIcon.d.ts","./node_modules/@heroicons/react/24/outline/PrinterIcon.d.ts","./node_modules/@heroicons/react/24/outline/PuzzlePieceIcon.d.ts","./node_modules/@heroicons/react/24/outline/QrCodeIcon.d.ts","./node_modules/@heroicons/react/24/outline/QuestionMarkCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/QueueListIcon.d.ts","./node_modules/@heroicons/react/24/outline/RadioIcon.d.ts","./node_modules/@heroicons/react/24/outline/ReceiptPercentIcon.d.ts","./node_modules/@heroicons/react/24/outline/ReceiptRefundIcon.d.ts","./node_modules/@heroicons/react/24/outline/RectangleGroupIcon.d.ts","./node_modules/@heroicons/react/24/outline/RectangleStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/RocketLaunchIcon.d.ts","./node_modules/@heroicons/react/24/outline/RssIcon.d.ts","./node_modules/@heroicons/react/24/outline/ScaleIcon.d.ts","./node_modules/@heroicons/react/24/outline/ScissorsIcon.d.ts","./node_modules/@heroicons/react/24/outline/ServerStackIcon.d.ts","./node_modules/@heroicons/react/24/outline/ServerIcon.d.ts","./node_modules/@heroicons/react/24/outline/ShareIcon.d.ts","./node_modules/@heroicons/react/24/outline/ShieldCheckIcon.d.ts","./node_modules/@heroicons/react/24/outline/ShieldExclamationIcon.d.ts","./node_modules/@heroicons/react/24/outline/ShoppingBagIcon.d.ts","./node_modules/@heroicons/react/24/outline/ShoppingCartIcon.d.ts","./node_modules/@heroicons/react/24/outline/SignalSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/SignalIcon.d.ts","./node_modules/@heroicons/react/24/outline/SlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/SparklesIcon.d.ts","./node_modules/@heroicons/react/24/outline/SpeakerWaveIcon.d.ts","./node_modules/@heroicons/react/24/outline/SpeakerXMarkIcon.d.ts","./node_modules/@heroicons/react/24/outline/Square2StackIcon.d.ts","./node_modules/@heroicons/react/24/outline/Square3Stack3DIcon.d.ts","./node_modules/@heroicons/react/24/outline/Squares2X2Icon.d.ts","./node_modules/@heroicons/react/24/outline/SquaresPlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/StarIcon.d.ts","./node_modules/@heroicons/react/24/outline/StopCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/StopIcon.d.ts","./node_modules/@heroicons/react/24/outline/StrikethroughIcon.d.ts","./node_modules/@heroicons/react/24/outline/SunIcon.d.ts","./node_modules/@heroicons/react/24/outline/SwatchIcon.d.ts","./node_modules/@heroicons/react/24/outline/TableCellsIcon.d.ts","./node_modules/@heroicons/react/24/outline/TagIcon.d.ts","./node_modules/@heroicons/react/24/outline/TicketIcon.d.ts","./node_modules/@heroicons/react/24/outline/TrashIcon.d.ts","./node_modules/@heroicons/react/24/outline/TrophyIcon.d.ts","./node_modules/@heroicons/react/24/outline/TruckIcon.d.ts","./node_modules/@heroicons/react/24/outline/TvIcon.d.ts","./node_modules/@heroicons/react/24/outline/UnderlineIcon.d.ts","./node_modules/@heroicons/react/24/outline/UserCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/UserGroupIcon.d.ts","./node_modules/@heroicons/react/24/outline/UserMinusIcon.d.ts","./node_modules/@heroicons/react/24/outline/UserPlusIcon.d.ts","./node_modules/@heroicons/react/24/outline/UserIcon.d.ts","./node_modules/@heroicons/react/24/outline/UsersIcon.d.ts","./node_modules/@heroicons/react/24/outline/VariableIcon.d.ts","./node_modules/@heroicons/react/24/outline/VideoCameraSlashIcon.d.ts","./node_modules/@heroicons/react/24/outline/VideoCameraIcon.d.ts","./node_modules/@heroicons/react/24/outline/ViewColumnsIcon.d.ts","./node_modules/@heroicons/react/24/outline/ViewfinderCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/WalletIcon.d.ts","./node_modules/@heroicons/react/24/outline/WifiIcon.d.ts","./node_modules/@heroicons/react/24/outline/WindowIcon.d.ts","./node_modules/@heroicons/react/24/outline/WrenchScrewdriverIcon.d.ts","./node_modules/@heroicons/react/24/outline/WrenchIcon.d.ts","./node_modules/@heroicons/react/24/outline/XCircleIcon.d.ts","./node_modules/@heroicons/react/24/outline/XMarkIcon.d.ts","./node_modules/@heroicons/react/24/outline/index.d.ts","./src/components/auth/UserProfile.tsx","./src/components/auth/index.ts","./node_modules/lucide-react/dist/lucide-react.d.ts","./src/types/database.ts","./src/lib/constants/shared.ts","./src/lib/supabase/books.ts","./src/lib/supabase/categories.ts","./src/components/ui/Card.tsx","./src/components/ui/Textarea.tsx","./src/components/ui/Modal.tsx","./src/components/ui/Select.tsx","./src/components/ui/Table.tsx","./src/components/ui/SearchBox.tsx","./src/components/ui/FilterPanel.tsx","./src/components/ui/Badge.tsx","./src/components/ui/Spinner.tsx","./src/components/ui/Pagination.tsx","./src/components/ui/Tabs.tsx","./src/lib/supabase/courses.ts","./src/types/schedule.ts","./src/lib/supabase/lessons.ts","./src/components/ui/BelongingSelector.tsx","./src/components/ui/index.ts","./src/components/books/BookForm.tsx","./src/components/books/index.ts","./src/lib/supabase/objectives.ts","./src/lib/supabase/course-objectives.ts","./src/components/courses/ObjectiveSelector.tsx","./src/components/courses/CourseForm.tsx","./src/components/courses/index.ts","./src/lib/services/relationships/course-book-service.ts","./src/lib/services/relationships/course-vocabulary-service.ts","./src/lib/services/relationships/course-schedule-service.ts","./src/lib/services/relationships/lesson-relationship-service.ts","./src/lib/services/relationships/index.ts","./src/components/relationships/CourseBookManager.tsx","./src/lib/supabase/vocabulary.ts","./src/components/relationships/CourseVocabularyManager.tsx","./src/lib/supabase/methods.ts","./src/lib/supabase/tasks.ts","./src/components/relationships/LessonContentManager.tsx","./src/lib/supabase/schedules.ts","./src/components/relationships/CourseScheduleList.tsx","./src/components/relationships/CourseLessonManager.tsx","./src/components/relationships/CourseLessonsWithSchedules.tsx","./src/components/relationships/CourseObjectiveManager.tsx","./src/components/relationships/CourseMethodManager.tsx","./src/components/relationships/CourseTaskManager.tsx","./src/components/relationships/index.ts","./src/components/vocabulary/VocabularyForm.tsx","./src/components/vocabulary/VocabularyGroupForm.tsx","./src/components/vocabulary/index.ts","./src/lib/services/schedule-service.ts","./src/lib/supabase/decoders.ts","./node_modules/next/dist/compiled/@next/font/dist/types.d.ts","./node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","./node_modules/next/font/google/index.d.ts","./src/app/layout.tsx","./src/app/page.tsx","./src/app/auth/page.tsx","./src/components/layout/DashboardLayout.tsx","./src/app/books/layout.tsx","./src/components/books/BookImportModal.tsx","./src/app/books/page.tsx","./src/app/books/[id]/page.tsx","./src/app/books/[id]/edit/page.tsx","./src/app/books/new/page.tsx","./src/app/courses/layout.tsx","./src/app/courses/page.tsx","./src/app/courses/[id]/page.tsx","./src/app/courses/[id]/edit/page.tsx","./src/app/courses/new/page.tsx","./src/app/dashboard/page.tsx","./src/app/dashboard/components/page.tsx","./src/app/decoders/page.tsx","./src/app/decoders/[id]/page.tsx","./src/components/decoders/DecoderForm.tsx","./src/app/decoders/[id]/edit/page.tsx","./src/app/decoders/new/page.tsx","./src/app/lessons/page.tsx","./src/app/lessons/[id]/page.tsx","./src/components/schedules/LessonForm.tsx","./src/app/lessons/[id]/edit/page.tsx","./src/app/methods/page.tsx","./src/app/methods/[id]/edit/page.tsx","./src/app/methods/new/page.tsx","./src/app/objectives/layout.tsx","./src/app/objectives/page.tsx","./src/app/objectives/[id]/edit/page.tsx","./src/app/objectives/new/page.tsx","./src/app/schedules/layout.tsx","./src/app/schedules/page.tsx","./node_modules/@types/date-arithmetic/index.d.ts","./node_modules/@types/react-big-calendar/index.d.ts","./node_modules/date-fns/constants.d.ts","./node_modules/date-fns/fp/types.d.ts","./node_modules/date-fns/types.d.ts","./node_modules/date-fns/locale/types.d.ts","./node_modules/date-fns/_lib/format/formatters.d.ts","./node_modules/date-fns/_lib/format/longFormatters.d.ts","./node_modules/date-fns/format.d.ts","./node_modules/date-fns/parse/_lib/types.d.ts","./node_modules/date-fns/parse/_lib/Setter.d.ts","./node_modules/date-fns/parse/_lib/Parser.d.ts","./node_modules/date-fns/parse/_lib/parsers.d.ts","./node_modules/date-fns/parse.d.ts","./node_modules/date-fns/startOfWeek.d.ts","./node_modules/date-fns/getDay.d.ts","./node_modules/date-fns/locale/en-US.d.ts","./src/components/schedules/ScheduleCalendar.tsx","./src/components/schedules/LessonDetailModal.tsx","./src/app/schedules/[id]/page.tsx","./src/components/schedules/ScheduleForm.tsx","./src/app/schedules/[id]/edit/page.tsx","./src/app/schedules/new/page.tsx","./src/app/tasks/page.tsx","./src/app/tasks/[id]/edit/page.tsx","./src/app/tasks/new/page.tsx","./src/app/vocabulary/layout.tsx","./src/app/vocabulary/page.tsx","./src/app/vocabulary/[id]/page.tsx","./src/app/vocabulary/[id]/edit/page.tsx","./src/app/vocabulary/groups/page.tsx","./src/app/vocabulary/groups/[id]/page.tsx","./src/app/vocabulary/groups/[id]/edit/page.tsx","./src/app/vocabulary/groups/new/page.tsx","./src/app/vocabulary/individual/page.tsx","./src/app/vocabulary/new/page.tsx","./src/components/ErrorBoundary.tsx","./src/components/objectives/ObjectiveForm.tsx","./src/components/ui/Table copy.tsx","./.next/types/app/layout.ts","./.next/types/app/page.ts","./.next/types/app/dashboard/page.ts","./.next/types/app/decoders/page.ts","./.next/types/app/decoders/new/page.ts","./node_modules/@types/json5/index.d.ts","./node_modules/@types/warning/index.d.ts","./node_modules/@types/ws/index.d.ts"],"fileIdsList":[[64,106,320,863],[64,106,320,869],[64,106,320,865],[64,106,320,848],[64,106,320,849],[64,106,368,369],[64,106,436],[64,106,437,438],[52,64,106,439],[52,64,106,440],[64,106],[52,64,106,430,431],[52,64,106,432],[52,64,106,430,431,435,442,443],[52,64,106,430,431,446],[52,64,106,430,431,443],[52,64,106,430,431,442],[52,64,106,430,431,435,443,446],[52,64,106,430,431,443,446],[64,106,432,433,434,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464],[52,64,106],[52,64,106,440,441],[52,64,106,430],[64,106,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789],[64,106,343,365,368,413,416,417],[64,106,413,416],[64,106,406],[64,106,408],[64,106,403,404,405],[64,106,403,404,405,406,407],[64,106,403,404,406,408,409,410,411],[64,106,402,404],[64,106,404],[64,106,403,405],[64,106,371],[64,106,371,372],[64,106,375,378],[64,106,378,382,383],[64,106,377,378,381],[64,106,378,380,382],[64,106,378,379,380],[64,106,374,378,379,380,381,382,383,384],[64,106,377,378],[64,106,375,376,377,378],[64,106,378],[64,106,375,376],[64,106,374,375,377],[64,106,386,388,389,391,393],[64,106,386,387,388,392],[64,106,390,392],[64,106,391,392,393],[64,106,392],[64,106,397,398,399],[64,106,395,396,400],[64,106,396],[64,106,395,396,397],[64,106,155,395,396,397],[64,106,373,385,394,401,413,414],[64,106,373,385,394,412,413,415],[64,106,412,413],[64,106,385,394,412],[64,103,106],[64,105,106],[106],[64,106,111,140],[64,106,107,112,118,119,126,137,148],[64,106,107,108,118,126],[59,60,61,64,106],[64,106,109,149],[64,106,110,111,119,127],[64,106,111,137,145],[64,106,112,114,118,126],[64,105,106,113],[64,106,114,115],[64,106,116,118],[64,105,106,118],[64,106,118,119,120,137,148],[64,106,118,119,120,133,137,140],[64,101,106],[64,106,114,118,121,126,137,148],[64,106,118,119,121,122,126,137,145,148],[64,106,121,123,137,145,148],[62,63,64,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],[64,106,118,124],[64,106,125,148,153],[64,106,114,118,126,137],[64,106,127],[64,106,128],[64,105,106,129],[64,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],[64,106,131],[64,106,132],[64,106,118,133,134],[64,106,133,135,149,151],[64,106,118,137,138,140],[64,106,139,140],[64,106,137,138],[64,106,140],[64,106,141],[64,103,106,137],[64,106,118,143,144],[64,106,143,144],[64,106,111,126,137,145],[64,106,146],[64,106,126,147],[64,106,121,132,148],[64,106,111,149],[64,106,137,150],[64,106,125,151],[64,106,152],[64,106,118,120,129,137,140,148,151,153],[64,106,137,154],[51,52,64,106,883],[52,64,106,159,160,161],[52,64,106,159,160],[52,56,64,106,158,321,364],[52,56,64,106,157,321,364],[49,50,51,64,106],[64,106,118,121,123,126,137,145,148,154,155],[64,106,422,425],[64,106,422],[64,106,887,888],[64,106,888],[64,106,887,889,890],[64,106,887],[64,106,887,890,895],[64,106,888,892,893],[64,106,887,892],[64,106,894],[64,106,885,886,888],[57,64,106],[64,106,325],[64,106,327,328,329],[64,106,331],[64,106,164,174,180,182,321],[64,106,164,171,173,176,194],[64,106,174],[64,106,174,299],[64,106,228,246,261,367],[64,106,269],[64,106,164,174,181,214,224,296,297,367],[64,106,181,367],[64,106,174,224,225,226,367],[64,106,174,181,214,367],[64,106,367],[64,106,164,181,182,367],[64,106,254],[64,105,106,155,253],[52,64,106,247,248,249,266,267],[52,64,106,247],[64,106,237],[64,106,236,238,341],[52,64,106,247,248,264],[64,106,243,267,353],[64,106,351,352],[64,106,188,350],[64,106,240],[64,105,106,155,188,236,237,238,239],[52,64,106,264,266,267],[64,106,264,266],[64,106,264,265,267],[64,106,132,155],[64,106,235],[64,105,106,155,173,175,231,232,233,234],[52,64,106,165,344],[52,64,106,148,155],[52,64,106,181,212],[52,64,106,181],[64,106,210,215],[52,64,106,211,324],[64,106,845],[52,56,64,106,121,155,157,158,321,362,363],[64,106,321],[64,106,163],[64,106,314,315,316,317,318,319],[64,106,316],[52,64,106,211,247,324],[52,64,106,247,322,324],[52,64,106,247,324],[64,106,121,155,175,324],[64,106,121,155,172,173,184,202,235,240,241,263,264],[64,106,232,235,240,248,250,251,252,254,255,256,257,258,259,260,367],[64,106,233],[52,64,106,132,155,173,174,202,204,206,231,263,267,321,367],[64,106,121,155,175,176,188,189,236],[64,106,121,155,174,176],[64,106,121,137,155,172,175,176],[64,106,121,132,148,155,172,173,174,175,176,181,184,185,195,196,198,201,202,204,205,206,230,231,264,272,274,277,279,282,284,285,286,287],[64,106,121,137,155],[64,106,164,165,166,172,173,321,324,367],[64,106,121,137,148,155,169,298,300,301,367],[64,106,132,148,155,169,172,175,192,196,198,199,200,204,231,277,288,290,296,310,311],[64,106,174,178,231],[64,106,172,174],[64,106,185,278],[64,106,280,281],[64,106,280],[64,106,278],[64,106,280,283],[64,106,168,169],[64,106,168,207],[64,106,168],[64,106,170,185,276],[64,106,275],[64,106,169,170],[64,106,170,273],[64,106,169],[64,106,263],[64,106,121,155,172,184,203,222,228,242,245,262,264],[64,106,216,217,218,219,220,221,243,244,267,322],[64,106,271],[64,106,121,155,172,184,203,208,268,270,272,321,324],[64,106,121,148,155,165,172,174,230],[64,106,227],[64,106,121,155,304,309],[64,106,195,230,324],[64,106,292,296,310,313],[64,106,121,178,296,304,305,313],[64,106,164,174,195,205,307],[64,106,121,155,174,181,205,291,292,302,303,306,308],[64,106,156,202,203,321,324],[64,106,121,132,148,155,170,172,173,175,178,183,184,192,195,196,198,199,200,201,204,206,230,231,274,288,289,324],[64,106,121,155,172,174,178,290,312],[64,106,121,155,173,175],[52,64,106,121,132,155,163,165,172,173,176,184,201,202,204,206,271,321,324],[64,106,121,132,148,155,167,170,171,175],[64,106,168,229],[64,106,121,155,168,173,184],[64,106,121,155,174,185],[64,106,121,155],[64,106,188],[64,106,187],[64,106,189],[64,106,174,186,188,192],[64,106,174,186,188],[64,106,121,155,167,174,175,181,189,190,191],[52,64,106,264,265,266],[64,106,223],[52,64,106,165],[52,64,106,198],[52,64,106,156,201,206,321,324],[64,106,165,344,345],[52,64,106,215],[52,64,106,132,148,155,163,209,211,213,214,324],[64,106,175,181,198],[64,106,197],[52,64,106,119,121,132,155,163,215,224,321,322,323],[48,52,53,54,55,64,106,157,158,321,364],[64,106,111],[64,106,293,294,295],[64,106,293],[64,106,333],[64,106,335],[64,106,337],[64,106,846],[64,106,339],[64,106,342],[64,106,346],[56,58,64,106,321,326,330,332,334,336,338,340,343,347,349,355,356,358,365,366,367],[64,106,348],[64,106,354],[64,106,211],[64,106,357],[64,105,106,189,190,191,192,359,360,361,364],[64,106,155],[52,56,64,106,121,123,132,155,157,158,159,161,163,176,313,320,324,364],[64,73,77,106,148],[64,73,106,137,148],[64,68,106],[64,70,73,106,145,148],[64,106,126,145],[64,68,106,155],[64,70,73,106,126,148],[64,65,66,69,72,106,118,137,148],[64,73,80,106],[64,65,71,106],[64,73,94,95,106],[64,69,73,106,140,148,155],[64,94,106,155],[64,67,68,106,155],[64,73,106],[64,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,106],[64,73,88,106],[64,73,80,81,106],[64,71,73,81,82,106],[64,72,106],[64,65,68,73,106],[64,73,77,81,82,106],[64,77,106],[64,71,73,76,106,148],[64,65,70,73,80,106],[64,106,137],[64,68,73,94,106,153,155],[52,64,106,421,429],[52,64,106,355,794,796,813,814],[52,64,106,355,418,793,794,796,813],[64,106,421,851],[64,106,814],[52,64,106,355,423,793,794,796,797,813,853],[52,64,106,355,794,809,813,819],[52,64,106,355,423,793,794,809,813,839],[64,106,819],[52,64,106,355,423,793,794,809,813],[52,64,106,793,813],[52,64,106,421,790,796,809,811,813,816,827,829,830,832,851],[52,64,106,355,421,813,844,851,867],[52,64,106,355,421,793,813,844,851],[64,106,421,851,867],[52,64,106,355,421,423,793,813,844,851],[64,106,368,420,847],[52,64,106,355,421,427,793,798,806,811,851,872],[52,64,106,355,427,793,798,805,806,811,832,839],[52,64,106,355,421,423,793,794,811,813,851],[52,64,106,355,421,793,794,797,813,829,851],[52,64,106,355,421,423,793,794,797,813,829,851],[52,64,106,355,793,794,797,813,816],[52,64,106,355,427,428,793,794,797,798,801,805,806,816],[64,106,349,420,427],[52,64,106,355,793,810,813,832,903],[52,64,106,355,793,810,813,832,872,900,901],[64,106,903],[52,64,106,355,793,810,813,832],[52,64,106,355,421,793,794,797,812,813,830,851],[52,64,106,355,421,423,793,794,797,813,830,851],[52,64,106,355,418,793,794,813,842],[52,64,106,355,418,793,794,813],[64,106,842],[52,64,106,355,423,793,794,797,813,827],[52,64,106,355,423,793,794,813,827],[64,106,792,851],[52,64,106,355,420],[52,64,106,420,427,428],[52,64,106,420,423,465,790],[64,106,421,429,791],[52,64,106,355,418,793,794,796,797,813],[52,64,106,793,794,796,797,813],[52,64,106,355,423,793,794,797,809,813,818],[52,64,106,423,793,794,813,816,817],[52,64,106,355,793,794,796,797,813,844],[52,64,106,349,355,423,465,790,791],[52,64,106,355,427,428,793,794,797,799,801,805,816],[52,64,106,427,793,796,800,802,803,805,825],[52,64,106,355,427,793,794,796,798,800,805,806,810,811,827],[52,64,106,355,427,793,798,805,811,832],[52,64,106,355,427,428,793,798,800,803,805,806,829],[52,64,106,355,427,428,793,798,800,801,803,805,806,816],[52,64,106,355,427,793,798,805,832],[52,64,106,355,427,428,793,798,800,803,805,806,830],[52,64,106,427,793,800,803,805,825,827],[52,64,106,427,793,796,800,803,805,808,816,825,827,829,830],[64,106,826,828,831,833,834,835,836,837,838],[52,64,106,793,810,813],[52,64,106,355,420,427,428,793,794,799,801,805,810,811,832],[52,64,106,810,832,884,891,896,897,898,899],[52,64,106,355,427,428,793,794,795,798,799,801,805,809,810,832],[52,64,106,423],[52,64,106,418,420,427,428,793,800,803,805,806,809,811],[52,64,106,423,424,426],[52,64,106,423,427,793],[52,64,106,159,160,161,423,793],[52,64,106,423,793],[64,106,427,428,798,799,800,801,802,803,804,805,806,807,808,812],[52,64,106,355,418,420,793,794,813,827],[52,64,106,355,418,420,793,794,797,813,827],[64,106,840,841],[52,64,106,416,419],[64,106,419,794],[64,106,821,822,823,824],[64,106,418,810],[64,106,418],[64,106,418,794,795],[64,106,418,794],[64,106,418,795],[64,106,418,794,795,810]],"fileInfos":[{"version":"69684132aeb9b5642cbcd9e22dff7818ff0ee1aa831728af0ecf97d3364d5546","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"092c2bfe125ce69dbb1223c85d68d4d2397d7d8411867b5cc03cec902c233763","affectsGlobalScope":true,"impliedFormat":1},{"version":"07f073f19d67f74d732b1adea08e1dc66b1b58d77cb5b43931dee3d798a2fd53","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"0559b1f683ac7505ae451f9a96ce4c3c92bdc71411651ca6ddb0e88baaaad6a3","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"d6d7ae4d1f1f3772e2a3cde568ed08991a8ae34a080ff1151af28b7f798e22ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"0990a7576222f248f0a3b888adcb7389f957928ce2afb1cd5128169086ff4d29","impliedFormat":1},{"version":"eb5b19b86227ace1d29ea4cf81387279d04bb34051e944bc53df69f58914b788","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"65ff5a0aefd7817a03c1ad04fee85c9cdd3ec415cc3c9efec85d8008d4d5e4ee","impliedFormat":1},{"version":"472f5aab7edc498a0a761096e8e254c5bc3323d07a1e7f5f8b8ec0d6395b60a0","affectsGlobalScope":true,"impliedFormat":1},{"version":"cc69795d9954ee4ad57545b10c7bf1a7260d990231b1685c147ea71a6faa265c","impliedFormat":1},{"version":"8bc6c94ff4f2af1f4023b7bb2379b08d3d7dd80c698c9f0b07431ea16101f05f","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"57194e1f007f3f2cbef26fa299d4c6b21f4623a2eddc63dfeef79e38e187a36e","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"49a5a44f2e68241a1d2bd9ec894535797998841c09729e506a7cbfcaa40f2180","affectsGlobalScope":true,"impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"763fe0f42b3d79b440a9b6e51e9ba3f3f91352469c1e4b3b67bfa4ff6352f3f4","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"7f182617db458e98fc18dfb272d40aa2fff3a353c44a89b2c0ccb3937709bfb5","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"e61be3f894b41b7baa1fbd6a66893f2579bfad01d208b4ff61daef21493ef0a8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"615ba88d0128ed16bf83ef8ccbb6aff05c3ee2db1cc0f89ab50a4939bfc1943f","impliedFormat":1},{"version":"a4d551dbf8746780194d550c88f26cf937caf8d56f102969a110cfaed4b06656","impliedFormat":1},{"version":"8bd86b8e8f6a6aa6c49b71e14c4ffe1211a0e97c80f08d2c8cc98838006e4b88","impliedFormat":1},{"version":"317e63deeb21ac07f3992f5b50cdca8338f10acd4fbb7257ebf56735bf52ab00","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"1ca84b44ad1d8e4576f24904d8b95dd23b94ea67e1575f89614ac90062fc67f4","affectsGlobalScope":true,"impliedFormat":1},{"version":"6b042aa5d277ad6963e2837179fd2f8fbb01968ac67115b0833c0244e93d1d50","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"8c0bcd6c6b67b4b503c11e91a1fb91522ed585900eab2ab1f61bba7d7caa9d6f","impliedFormat":1},{"version":"9e025aa38cad40827cc30aca974fe33fe2c4652fe8c88f48dadbbbd6300c8b07","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"84c1930e33d1bb12ad01bcbe11d656f9646bd21b2fb2afd96e8e10615a021aef","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"5524481e56c48ff486f42926778c0a3cce1cc85dc46683b92b1271865bcf015a","impliedFormat":1},{"version":"4b87f767c7bc841511113c876a6b8bf1fd0cb0b718c888ad84478b372ec486b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d04e3640dd9eb67f7f1e5bd3d0bf96c784666f7aefc8ac1537af6f2d38d4c29","impliedFormat":1},{"version":"9d19808c8c291a9010a6c788e8532a2da70f811adb431c97520803e0ec649991","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"71450bbc2d82821d24ca05699a533e72758964e9852062c53b30f31c36978ab8","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4c21aaa8257d7950a5b75a251d9075b6a371208fc948c9c8402f6690ef3b5b55","impliedFormat":1},{"version":"b5895e6353a5d708f55d8685c38a235c3a6d8138e374dee8ceb8ffde5aa8002a","impliedFormat":1},{"version":"5b75ca915164e4a7ad94a60729fe45b8a62e7750ab232d0122f8ccdd768f5314","impliedFormat":1},{"version":"de735eca2c51dd8b860254e9fdb6d9ec19fe402dfe597c23090841ce3937cfc5","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"5650cf3dace09e7c25d384e3e6b818b938f68f4e8de96f52d9c5a1b3db068e86","impliedFormat":1},{"version":"1354ca5c38bd3fd3836a68e0f7c9f91f172582ba30ab15bb8c075891b91502b7","affectsGlobalScope":true,"impliedFormat":1},{"version":"5155da3047ef977944d791a2188ff6e6c225f6975cc1910ab7bb6838ab84cede","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"e16d218a30f6a6810b57f7e968124eaa08c7bb366133ea34bbf01e7cd6b8c0ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb8692dea24c27821f77e397272d9ed2eda0b95e4a75beb0fdda31081d15a8ae","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"b4f70ec656a11d570e1a9edce07d118cd58d9760239e2ece99306ee9dfe61d02","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"5b6844ad931dcc1d3aca53268f4bd671428421464b1286746027aede398094f2","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"125d792ec6c0c0f657d758055c494301cc5fdb327d9d9d5960b3f129aff76093","impliedFormat":1},{"version":"0dbcebe2126d03936c70545e96a6e41007cf065be38a1ce4d32a39fcedefead4","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"46c0484bf0a50d57256a8cfb87714450c2ecd1e5d0bc29f84740f16199f47d6a","affectsGlobalScope":true,"impliedFormat":1},{"version":"12ed4559eba17cd977aa0db658d25c4047067444b51acfdcbf38470630642b23","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3ffabc95802521e1e4bcba4c88d8615176dc6e09111d920c7a213bdda6e1d65","impliedFormat":1},{"version":"e31e51c55800014d926e3f74208af49cb7352803619855c89296074d1ecbb524","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"dfb96ba5177b68003deec9e773c47257da5c4c8a74053d8956389d832df72002","affectsGlobalScope":true,"impliedFormat":1},{"version":"92d3070580cf72b4bb80959b7f16ede9a3f39e6f4ef2ac87cfa4561844fdc69f","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"613deebaec53731ff6b74fe1a89f094b708033db6396b601df3e6d5ab0ec0a47","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"e56eb632f0281c9f8210eb8c86cc4839a427a4ffffcfd2a5e40b956050b3e042","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"8caa5c86be1b793cd5f599e27ecb34252c41e011980f7d61ae4989a149ff6ccc","impliedFormat":1},{"version":"3609e455ffcba8176c8ce0aa57f8258fe10cf03987e27f1fab68f702b4426521","impliedFormat":1},{"version":"d1bd4e51810d159899aad1660ccb859da54e27e08b8c9862b40cd36c1d9ff00f","impliedFormat":1},{"version":"17ed71200119e86ccef2d96b73b02ce8854b76ad6bd21b5021d4269bec527b5f","impliedFormat":1},{"version":"1cfa8647d7d71cb03847d616bd79320abfc01ddea082a49569fda71ac5ece66b","impliedFormat":1},{"version":"bb7a61dd55dc4b9422d13da3a6bb9cc5e89be888ef23bbcf6558aa9726b89a1c","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"cfe4ef4710c3786b6e23dae7c086c70b4f4835a2e4d77b75d39f9046106e83d3","impliedFormat":1},{"version":"cbea99888785d49bb630dcbb1613c73727f2b5a2cf02e1abcaab7bcf8d6bf3c5","impliedFormat":1},{"version":"98817124fd6c4f60e0b935978c207309459fb71ab112cf514f26f333bf30830e","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"2dad084c67e649f0f354739ec7df7c7df0779a28a4f55c97c6b6883ae850d1ce","impliedFormat":1},{"version":"fa5bbc7ab4130dd8cdc55ea294ec39f76f2bc507a0f75f4f873e38631a836ca7","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"cf86de1054b843e484a3c9300d62fbc8c97e77f168bbffb131d560ca0474d4a8","impliedFormat":1},{"version":"196c960b12253fde69b204aa4fbf69470b26daf7a430855d7f94107a16495ab0","impliedFormat":1},{"version":"fb760b3dded1fadb56c3dde1992b6068bb64d65c4d60d65dc93659f5f44ccddf","impliedFormat":1},{"version":"bf24f6d35f7318e246010ffe9924395893c4e96d34324cde77151a73f078b9ad","impliedFormat":1},{"version":"596ccf4070268c4f5a8c459d762d8a934fa9b9317c7bf7a953e921bc9d78ce3c","impliedFormat":1},{"version":"10595c7ff5094dd5b6a959ccb1c00e6a06441b4e10a87bc09c15f23755d34439","impliedFormat":1},{"version":"9620c1ff645afb4a9ab4044c85c26676f0a93e8c0e4b593aea03a89ccb47b6d0","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"08ed0b3f0166787f84a6606f80aa3b1388c7518d78912571b203817406e471da","impliedFormat":1},{"version":"47e5af2a841356a961f815e7c55d72554db0c11b4cba4d0caab91f8717846a94","impliedFormat":1},{"version":"9a1a0dc84fecc111e83281743f003e1ae9048e0f83c2ae2028d17bc58fd93cc7","impliedFormat":1},{"version":"f5f541902bf7ae0512a177295de9b6bcd6809ea38307a2c0a18bfca72212f368","impliedFormat":1},{"version":"e8da637cbd6ed1cf6c36e9424f6bcee4515ca2c677534d4006cbd9a05f930f0c","impliedFormat":1},{"version":"ca1b882a105a1972f82cc58e3be491e7d750a1eb074ffd13b198269f57ed9e1b","impliedFormat":1},{"version":"fc3e1c87b39e5ba1142f27ec089d1966da168c04a859a4f6aab64dceae162c2b","impliedFormat":1},{"version":"3867ca0e9757cc41e04248574f4f07b8f9e3c0c2a796a5eb091c65bfd2fc8bdb","impliedFormat":1},{"version":"61888522cec948102eba94d831c873200aa97d00d8989fdfd2a3e0ee75ec65a2","impliedFormat":1},{"version":"4e10622f89fea7b05dd9b52fb65e1e2b5cbd96d4cca3d9e1a60bb7f8a9cb86a1","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"59bf32919de37809e101acffc120596a9e45fdbab1a99de5087f31fdc36e2f11","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"3df3abb3e7c1a74ab419f95500a998b55dd9bc985e295de96ff315dd94c7446f","impliedFormat":1},{"version":"c40c848daad198266370c1c72a7a8c3d18d2f50727c7859fcfefd3ff69a7f288","impliedFormat":1},{"version":"ac60bbee0d4235643cc52b57768b22de8c257c12bd8c2039860540cab1fa1d82","impliedFormat":1},{"version":"973b59a17aaa817eb205baf6c132b83475a5c0a44e8294a472af7793b1817e89","impliedFormat":1},{"version":"ada39cbb2748ab2873b7835c90c8d4620723aedf323550e8489f08220e477c7f","impliedFormat":1},{"version":"6e5f5cee603d67ee1ba6120815497909b73399842254fc1e77a0d5cdc51d8c9c","impliedFormat":1},{"version":"8dba67056cbb27628e9b9a1cba8e57036d359dceded0725c72a3abe4b6c79cd4","impliedFormat":1},{"version":"70f3814c457f54a7efe2d9ce9d2686de9250bb42eb7f4c539bd2280a42e52d33","impliedFormat":1},{"version":"5cbd32af037805215112472e35773bad9d4e03f0e72b1129a0d0c12d9cd63cc7","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"afcb759e8e3ad6549d5798820697002bc07bdd039899fad0bf522e7e8a9f5866","impliedFormat":1},{"version":"f6404e7837b96da3ea4d38c4f1a3812c96c9dcdf264e93d5bdb199f983a3ef4b","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"566e5fb812082f8cf929c6727d40924843246cf19ee4e8b9437a6315c4792b03","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"903e299a28282fa7b714586e28409ed73c3b63f5365519776bf78e8cf173db36","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"dd3900b24a6a8745efeb7ad27629c0f8a626470ac229c1d73f1fe29d67e44dca","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"ec29be0737d39268696edcec4f5e97ce26f449fa9b7afc2f0f99a86def34a418","impliedFormat":1},{"version":"68a06fb972b2c7e671bf090dc5a5328d22ba07d771376c3d9acd9e7ed786a9db","impliedFormat":1},{"version":"ec6cba1c02c675e4dd173251b156792e8d3b0c816af6d6ad93f1a55d674591aa","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"d729408dfde75b451530bcae944cf89ee8277e2a9df04d1f62f2abfd8b03c1e1","impliedFormat":1},{"version":"e15d3c84d5077bb4a3adee4c791022967b764dc41cb8fa3cfa44d4379b2c95f5","impliedFormat":1},{"version":"78244a2a8ab1080e0dd8fc3633c204c9a4be61611d19912f4b157f7ef7367049","impliedFormat":1},{"version":"e1fc1a1045db5aa09366be2b330e4ce391550041fc3e925f60998ca0b647aa97","impliedFormat":1},{"version":"73636e5e138db738b0e1e00c17bcd688c45eead3798d0d585e0bd9ff98262ebe","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"31fb49ef3aa3d76f0beb644984e01eab0ea222372ea9b49bb6533be5722d756c","impliedFormat":1},{"version":"33cd131e1461157e3e06b06916b5176e7a8ec3fce15a5cfe145e56de744e07d2","impliedFormat":1},{"version":"889ef863f90f4917221703781d9723278db4122d75596b01c429f7c363562b86","impliedFormat":1},{"version":"3556cfbab7b43da96d15a442ddbb970e1f2fc97876d055b6555d86d7ac57dae5","impliedFormat":1},{"version":"437751e0352c6e924ddf30e90849f1d9eb00ca78c94d58d6a37202ec84eb8393","impliedFormat":1},{"version":"48e8af7fdb2677a44522fd185d8c87deff4d36ee701ea003c6c780b1407a1397","impliedFormat":1},{"version":"d11308de5a36c7015bb73adb5ad1c1bdaac2baede4cc831a05cf85efa3cc7f2f","impliedFormat":1},{"version":"8c9f19c480c747b6d8067c53fcc3cef641619029afb0a903672daed3f5acaed2","impliedFormat":1},{"version":"f9812cfc220ecf7557183379531fa409acd249b9e5b9a145d0d52b76c20862de","affectsGlobalScope":true,"impliedFormat":1},{"version":"7b068371563d0396a065ed64b049cffeb4eed89ad433ae7730fc31fb1e00ebf3","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"680793958f6a70a44c8d9ae7d46b7a385361c69ac29dcab3ed761edce1c14ab8","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"913ddbba170240070bd5921b8f33ea780021bdf42fbdfcd4fcb2691b1884ddde","impliedFormat":1},{"version":"74c105214ddd747037d2a75da6588ec8aa1882f914e1f8a312c528f86feca2b9","impliedFormat":1},{"version":"5fe23bd829e6be57d41929ac374ee9551ccc3c44cee893167b7b5b77be708014","impliedFormat":1},{"version":"4d85f80132e24d9a5b5c5e0734e4ecd6878d8c657cc990ecc70845ef384ca96f","impliedFormat":1},{"version":"438c7513b1df91dcef49b13cd7a1c4720f91a36e88c1df731661608b7c055f10","impliedFormat":1},{"version":"cf185cc4a9a6d397f416dd28cca95c227b29f0f27b160060a95c0e5e36cda865","impliedFormat":1},{"version":"0086f3e4ad898fd7ca56bb223098acfacf3fa065595182aaf0f6c4a6a95e6fbd","impliedFormat":1},{"version":"efaa078e392f9abda3ee8ade3f3762ab77f9c50b184e6883063a911742a4c96a","impliedFormat":1},{"version":"54a8bb487e1dc04591a280e7a673cdfb272c83f61e28d8a64cf1ac2e63c35c51","impliedFormat":1},{"version":"021a9498000497497fd693dd315325484c58a71b5929e2bbb91f419b04b24cea","impliedFormat":1},{"version":"9385cdc09850950bc9b59cca445a3ceb6fcca32b54e7b626e746912e489e535e","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"84124384abae2f6f66b7fbfc03862d0c2c0b71b826f7dbf42c8085d31f1d3f95","impliedFormat":1},{"version":"63a8e96f65a22604eae82737e409d1536e69a467bb738bec505f4f97cce9d878","impliedFormat":1},{"version":"3fd78152a7031315478f159c6a5872c712ece6f01212c78ea82aef21cb0726e2","impliedFormat":1},{"version":"3a6ed8e1d630cfa1f7edf0dc46a6e20ca6c714dbe754409699008571dfe473a6","impliedFormat":1},{"version":"512fc15cca3a35b8dbbf6e23fe9d07e6f87ad03c895acffd3087ce09f352aad0","impliedFormat":1},{"version":"9a0946d15a005832e432ea0cd4da71b57797efb25b755cc07f32274296d62355","impliedFormat":1},{"version":"a52ff6c0a149e9f370372fc3c715d7f2beee1f3bab7980e271a7ab7d313ec677","impliedFormat":1},{"version":"fd933f824347f9edd919618a76cdb6a0c0085c538115d9a287fa0c7f59957ab3","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"6a1aa3e55bdc50503956c5cd09ae4cd72e3072692d742816f65c66ca14f4dfdd","impliedFormat":1},{"version":"ab75cfd9c4f93ffd601f7ca1753d6a9d953bbedfbd7a5b3f0436ac8a1de60dfa","impliedFormat":1},{"version":"59c68235df3905989afa0399381c1198313aaaf1ed387f57937eb616625dff15","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"1364f64d2fb03bbb514edc42224abd576c064f89be6a990136774ecdd881a1da","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"950fb67a59be4c2dbe69a5786292e60a5cb0e8612e0e223537784c731af55db1","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"07ca44e8d8288e69afdec7a31fa408ce6ab90d4f3d620006701d5544646da6aa","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"4e4475fba4ed93a72f167b061cd94a2e171b82695c56de9899275e880e06ba41","impliedFormat":1},{"version":"97c5f5d580ab2e4decd0a3135204050f9b97cd7908c5a8fbc041eadede79b2fa","impliedFormat":1},{"version":"c99a3a5f2215d5b9d735aa04cec6e61ed079d8c0263248e298ffe4604d4d0624","impliedFormat":1},{"version":"49b2375c586882c3ac7f57eba86680ff9742a8d8cb2fe25fe54d1b9673690d41","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"b98ce74c2bc49a9b79408f049c49909190c747b0462e78f91c09618da86bae53","impliedFormat":1},{"version":"3ecfccf916fea7c6c34394413b55eb70e817a73e39b4417d6573e523784e3f8e","impliedFormat":1},{"version":"c05bc82af01e673afc99bdffd4ebafde22ab027d63e45be9e1f1db3bc39e2fc0","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"f416c9c3eee9d47ff49132c34f96b9180e50485d435d5748f0e8b72521d28d2e","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"14e5cdec6f8ae82dfd0694e64903a0a54abdfe37e1d966de3d4128362acbf35f","impliedFormat":1},{"version":"bbc183d2d69f4b59fd4dd8799ffdf4eb91173d1c4ad71cce91a3811c021bf80c","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"8dbc4134a4b3623fc476be5f36de35c40f2768e2e3d9ed437e0d5f1c4cd850f6","impliedFormat":1},{"version":"4e06330a84dec7287f7ebdd64978f41a9f70a668d3b5edc69d5d4a50b9b376bb","impliedFormat":1},{"version":"65bfa72967fbe9fc33353e1ac03f0480aa2e2ea346d61ff3ea997dfd850f641a","impliedFormat":1},{"version":"8f88c6be9803fe5aaa80b00b27f230c824d4b8a33856b865bea5793cb52bb797","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"872caaa31423f4345983d643e4649fb30f548e9883a334d6d1c5fff68ede22d4","impliedFormat":1},{"version":"94404c4a878fe291e7578a2a80264c6f18e9f1933fbb57e48f0eb368672e389c","impliedFormat":1},{"version":"5c1b7f03aa88be854bc15810bfd5bd5a1943c5a7620e1c53eddd2a013996343e","impliedFormat":1},{"version":"09dfc64fcd6a2785867f2368419859a6cc5a8d4e73cbe2538f205b1642eb0f51","impliedFormat":1},{"version":"bcf6f0a323653e72199105a9316d91463ad4744c546d1271310818b8cef7c608","impliedFormat":1},{"version":"01aa917531e116485beca44a14970834687b857757159769c16b228eb1e49c5f","impliedFormat":1},{"version":"351475f9c874c62f9b45b1f0dc7e2704e80dfd5f1af83a3a9f841f9dfe5b2912","impliedFormat":1},{"version":"ac457ad39e531b7649e7b40ee5847606eac64e236efd76c5d12db95bf4eacd17","impliedFormat":1},{"version":"187a6fdbdecb972510b7555f3caacb44b58415da8d5825d03a583c4b73fde4cf","impliedFormat":1},{"version":"d4c3250105a612202289b3a266bb7e323db144f6b9414f9dea85c531c098b811","impliedFormat":1},{"version":"95b444b8c311f2084f0fb51c616163f950fb2e35f4eaa07878f313a2d36c98a4","impliedFormat":1},{"version":"741067675daa6d4334a2dc80a4452ca3850e89d5852e330db7cb2b5f867173b1","impliedFormat":1},{"version":"f8acecec1114f11690956e007d920044799aefeb3cece9e7f4b1f8a1d542b2c9","impliedFormat":1},{"version":"131b1475d2045f20fb9f43b7aa6b7cb51f25250b5e4c6a1d4aa3cf4dd1a68793","impliedFormat":1},{"version":"3a17f09634c50cce884721f54fd9e7b98e03ac505889c560876291fcf8a09e90","impliedFormat":1},{"version":"32531dfbb0cdc4525296648f53b2b5c39b64282791e2a8c765712e49e6461046","impliedFormat":1},{"version":"0ce1b2237c1c3df49748d61568160d780d7b26693bd9feb3acb0744a152cd86d","impliedFormat":1},{"version":"e489985388e2c71d3542612685b4a7db326922b57ac880f299da7026a4e8a117","impliedFormat":1},{"version":"e1437c5f191edb7a494f7bbbc033b97d72d42e054d521402ee194ac5b6b7bf49","impliedFormat":1},{"version":"04d3aad777b6af5bd000bfc409907a159fe77e190b9d368da4ba649cdc28d39e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fd1b9d883b9446f1e1da1e1033a6a98995c25fbf3c10818a78960e2f2917d10c","impliedFormat":1},{"version":"19252079538942a69be1645e153f7dbbc1ef56b4f983c633bf31fe26aeac32cd","impliedFormat":1},{"version":"bc11f3ac00ac060462597add171220aed628c393f2782ac75dd29ff1e0db871c","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"3b0b1d352b8d2e47f1c4df4fb0678702aee071155b12ef0185fce9eb4fa4af1e","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"a344403e7a7384e0e7093942533d309194ad0a53eca2a3100c0b0ab4d3932773","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb18bf4a61a17b4a6199eb3938ecfa4a59eb7c40843ad4a82b975ab6f7e3d925","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"e9b6fc05f536dfddcdc65dbcf04e09391b1c968ab967382e48924f5cb90d88e1","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"2b664c3cc544d0e35276e1fb2d4989f7d4b4027ffc64da34ec83a6ccf2e5c528","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"3cd8f0464e0939b47bfccbb9bb474a6d87d57210e304029cd8eb59c63a81935d","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"3026abd48e5e312f2328629ede6e0f770d21c3cd32cee705c450e589d015ee09","impliedFormat":1},{"version":"8b140b398a6afbd17cc97c38aea5274b2f7f39b1ae5b62952cfe65bf493e3e75","impliedFormat":1},{"version":"7663d2c19ce5ef8288c790edba3d45af54e58c84f1b37b1249f6d49d962f3d91","impliedFormat":1},{"version":"30112425b2cf042fca1c79c19e35f88f44bfb2e97454527528cd639dd1a460ca","impliedFormat":1},{"version":"00bd6ebe607246b45296aa2b805bd6a58c859acecda154bfa91f5334d7c175c6","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"504f37ba38bfea8394ec4f397c9a2ade7c78055e41ef5a600073b515c4fd0fc9","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"87ac2fb61e629e777f4d161dff534c2023ee15afd9cb3b1589b9b1f014e75c58","impliedFormat":1},{"version":"13c8b4348db91e2f7d694adc17e7438e6776bc506d5c8f5de9ad9989707fa3fe","impliedFormat":1},{"version":"3c1051617aa50b38e9efaabce25e10a5dd9b1f42e372ef0e8a674076a68742ed","impliedFormat":1},{"version":"07a3e20cdcb0f1182f452c0410606711fbea922ca76929a41aacb01104bc0d27","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"4cd4b6b1279e9d744a3825cbd7757bbefe7f0708f3f1069179ad535f19e8ed2c","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"c0eeaaa67c85c3bb6c52b629ebbfd3b2292dc67e8c0ffda2fc6cd2f78dc471e6","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"b97cb5616d2ab82a98ec9ada7b9e9cabb1f5da880ec50ea2b8dc5baa4cbf3c16","impliedFormat":99},{"version":"d23df9ff06ae8bf1dcb7cc933e97ae7da418ac77749fecee758bb43a8d69f840","affectsGlobalScope":true,"impliedFormat":1},{"version":"040c71dde2c406f869ad2f41e8d4ce579cc60c8dbe5aa0dd8962ac943b846572","affectsGlobalScope":true,"impliedFormat":1},{"version":"3586f5ea3cc27083a17bd5c9059ede9421d587286d5a47f4341a4c2d00e4fa91","impliedFormat":1},{"version":"a6df929821e62f4719551f7955b9f42c0cd53c1370aec2dd322e24196a7dfe33","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},"9269d492817e359123ac64c8205e5d05dab63d71a3a7a229e68b5d9a0e8150bf",{"version":"4b2aab41b7e2a4295d252aff47b99f1c0ddc74bc9284dd0e8bda296ced817a61","impliedFormat":1},{"version":"a01035ec8ac796e720532f76a2f5ef957ec5ec6f022e5854e8522fa4fec3dd3a","impliedFormat":1},{"version":"a3628f430f8d502a5c026a0c932a5c41e6361d8e0248287872cd8999bc534399","impliedFormat":1},{"version":"ed774418ed7b67bf7c7c09afec04dc68aaf4b2ce34e83c8385ed32b836bfa1f5","impliedFormat":1},{"version":"b0c35bf00dd6fb25d84febff7590ac37528c99fcb452428b326fbed24dcb8d70","impliedFormat":1},{"version":"016eb46411ea55780ac3ccb57a10ae7d3de5f039a9b1c0889ebfe1bf4963c0af","impliedFormat":1},{"version":"f0e4a8414ebeccecd2eb57a7e4cf31e968e951126f45484d86fedc89dca61dec","impliedFormat":1},{"version":"ceb8fc6899a46dd58dd1f11077891ebf887a56e5fae8956c41d6dbac181bfe78","impliedFormat":1},{"version":"f1ab325fae2490d7933a0ec029a3e4df191d2022f5bf638acc9fb0bbc6a5792b","impliedFormat":1},{"version":"743ec4b877ee007e896a45ff5165100f793bef796938631051ad818039e238de","impliedFormat":1},{"version":"739ba5b048829e14de67e2fd9c067c28af878b65206a43ef0578552eedd8d8eb","impliedFormat":1},{"version":"509f00a10e4d37dd72e5d065054c430b3c1d4da788f4fe6a1fc15b91e60abf99","impliedFormat":1},{"version":"e2c737ecabdf5dde9d56d2675f5045d96c68383a5c019cb89b66b636185aa820","impliedFormat":1},{"version":"987c5db7454ad787d00334c97c761441f259ffab25495dc7d158cc8a7e9fd80a","impliedFormat":1},{"version":"c890847d746b7209ff5ec1d08c3ea02336f656f9190813e9ecb0d0ef938b4894","impliedFormat":1},{"version":"b45603e045c5bd484bbe07f141aec54d7dc6940e091fa30ba72171c7e3472f61","impliedFormat":1},{"version":"381b623c9ee962965cc3684ee45de6236f91cf24eb845dafc3a74a27d1eed070","impliedFormat":1},{"version":"1f84dff7964146377785aa684028ca62290e0639ac41fd0c5f391a5f5d414adc","impliedFormat":1},{"version":"4edf6371c3fd1f12c91cab0b0c42340ba0205e1a24f95757551ba46b6ab0e8a4","impliedFormat":1},{"version":"f4ae5546352701fd6932fdd86419438bb51253e4627a44808489742035bac644","impliedFormat":1},{"version":"439b003f374c5a1145015ba12175582b1dfd3e4b253428958fea2eb3d9171819","impliedFormat":1},{"version":"39354f1cbccd666d005e80f6e68c4f72c799ca4cda66c47e67f676a072e7bc57","impliedFormat":1},{"version":"79a420cb57cfe0e601792139138946b0a348fb2aaab2a2782cf2ad4b9767cf43","impliedFormat":1},{"version":"87b87f8f8e2e159f09fc254553c9f217ea9cf5d21f25714d8b528768d36b2818","impliedFormat":1},{"version":"9f673a4953dc682735441e2eba5275f59dbc63a4372f02a55293864bd5185669","impliedFormat":1},{"version":"1db8a09149ae91d1415011b68fa08a96e2a5e12bf78f175ce24c84806c124c52","impliedFormat":1},{"version":"021ed353ba1623ec4c783163b2e7a544db68764d20307788f00b5c16ce40f341","impliedFormat":1},{"version":"8b6581bd30c91d99d10a86efc9db6846b047d5bd037ecf36c23c026e8579d0fe","impliedFormat":1},{"version":"6b3d312e4a3be452af9aad07d1cc6036ef4a4d7571141f6d4ad820b86ef24ad8","impliedFormat":1},{"version":"f2737fe8c9a990d1963bf940e9e4fbb2c44dc2179b5f00accc548949aa0082ce","impliedFormat":1},{"version":"33899c60aea8188645a90bc029c0a98d18c5cb271de8a967c0a7e45698a28007","impliedFormat":1},{"version":"6b4cc716f171384a65f863080b6577fc1c45028490c5b0a35b3e31467e590b4d","impliedFormat":1},{"version":"54e425cf2edad78bbfb12e323d3328df6e5302d3c32f2844325930c0fe3e5683","impliedFormat":1},{"version":"2b7dbd58afc5dd64f1a5d5b539d253ef739e9a9193eaffb57c6820803fc072de","impliedFormat":1},{"version":"dc18979157d4d0c265fa5284b7f600e6c1946b0a40f173a96217bd3d2bdd206a","impliedFormat":1},{"version":"ecf09b7dbe9c80785e547ca7139e420a7dc7590e8f02223056813776e8d04168","impliedFormat":1},{"version":"1f45120c22557960e11c535574799d781d87eb4e3c63c5a32c1085c4884e8c3f","impliedFormat":1},{"version":"11c625608ca68c729832d21c10ea8d6c52d53aae61402062e45ea42e4610630e","impliedFormat":1},{"version":"4ae9b50481136302de9c77668621ed3a0b34998f3e091ca3701426f4fe369c8a","impliedFormat":1},{"version":"9ba9ecc57d2f52b3ed3ac229636ee9a36e92e18b80eeae11ffb546c12e56d5e5","impliedFormat":1},{"version":"a35e372b741b6aaf27163d79224fb2d553443bb388c24f84fdde42a450c6e761","impliedFormat":1},{"version":"d182d419bb30a1408784ed95fbabd973dde7517641e04525f0ce761df5d193a5","impliedFormat":1},{"version":"6b1163dc8ac85260a60ffce42aed46411c5b508136e1b629282b3f08131b38da","impliedFormat":1},{"version":"ec3e143e22d0b8828c2b99ef926af7ef05475421866ca9915444b383cd9e1db1","impliedFormat":1},{"version":"5aa0e1027477cf8f578c25a39b4264569497a6de743fb6c5cd0e06676b4be84a","impliedFormat":1},{"version":"2a23ef3132a5d05b7205c7af3cac333d183d90c6d09635e7ec213948a4ab6edd","impliedFormat":1},{"version":"97e9940040acab47893f052dc2549914ec4766c8f4b97c8b9e201dd581264bf5","impliedFormat":1},{"version":"1bce4eff735766d88309c8c34f8213502f5c84ca463ecec75223bdf48f905e36","impliedFormat":1},"bf806bf4d1c42b95af1fb77f0489690395fcbeb06cb050ae827dd36f8883f549","48ea31662dae50d1735f59c4e84488a49b699a4357092f2ab56f40e9f0eda071","ffd073b787194f28f1a9d97f5e02167e0aad4a1bb3bb6ac568264bf44484b2b6",{"version":"c57b441e0c0a9cbdfa7d850dae1f8a387d6f81cbffbc3cd0465d530084c2417d","impliedFormat":99},"12cc54d6c6b6a7eea3dbb1e4c6a9faf25fa850d68457a4ae628690fa7abe4ab0","9cd5e38a5d2dd3e001a7b7d09f3f29bb7b4bb0f188c287f15f251e6b10b2e31a",{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},"20094ad705ed8c2fe0db972d88eb0b193d39ffe3a4b16cbf3eb42ae2f58bc062","0ce0f345d607b7a27eb9418f9435c5a0f442b10a6be797ad9fecc50d4514869f","4cfe829430f2cef451b0fc7defdd2f256ee6fb3deaf91938a35095fdfa4907e7",{"version":"eae0f0bd272650a83a592c6000b7733520eb5aa42efcc8ab62d47dc1acb5ee78","impliedFormat":99},{"version":"0f321818befa1f90aa797afdc64c6cf1652c133eca86d5dd6c99548a8bdaf51e","impliedFormat":99},{"version":"481c19996de65c72ebf9d7e8f9952298072d4c30db6475cd4231df8e2f2d09b1","impliedFormat":99},{"version":"406be199d4f2b0c74810de31b45fecb333d0c04f6275d6e9578067cced0f3b8c","impliedFormat":99},{"version":"2401f5d61e82a35b49f8e89fe5e826682d82273714d86454b5d8ff74838efa7a","impliedFormat":99},{"version":"87ba3ab05e8e23618cd376562d0680ddd0c00a29569ddddb053b9862ef73e159","impliedFormat":99},{"version":"2b4276dde46aa2faf0dd86119999c76b81e6488cd6b0d0fcf9fb985769cd11c0","impliedFormat":99},{"version":"88247402edb737af32da5c7f69ff80e66e831262065b7f0feb32ea8293260d22","impliedFormat":99},{"version":"5ecea63968444d55f7c3cf677cbec9525db9229953b34f06be0386a24b0fffd2","impliedFormat":99},{"version":"b50ee4bde16b52ecb08e2407dca49a5649b38e046e353485335aa024f6efb8ef","impliedFormat":99},{"version":"a3d603c46b55d51493799241b8a456169d36301cc926ff72c75f5480e7eb25bf","impliedFormat":99},{"version":"324869b470cb6aa2bc54e8fb057b90d972f90d24c7059c027869b2587efe01aa","impliedFormat":99},{"version":"eedf3960076a5b33a84cd28476e035983b7c71a9a8728f904d8e17e824259a8e","impliedFormat":99},{"version":"d7058b71aae678b2a276ecbeb7a9f0fdf4d57ccf0831f572686ba43be26b8ef7","impliedFormat":99},{"version":"ed57d309b3d74719526912a9952a1ff72ca38fe0243c51701a49976c771cbb6c","impliedFormat":99},{"version":"9e0b04a9586f6f7bcf2cd160a21630643957553fc49197e8e10d8cca2d163610","impliedFormat":99},{"version":"2df4f080ac546741f1963d7b8a9cc74f739fbdedf8912c0bad34edeb99b64db6","impliedFormat":99},{"version":"4b62ccc8a561ee6f6124dec319721c064456d5888a66a31a5f2691d33aa93a5f","impliedFormat":99},{"version":"430fa8183f4a42a776af25dac202a5e254598ff5b46aa3016165570ea174b09e","impliedFormat":99},{"version":"7cd3e62c5a8cc665104736a6b6d8b360d97ebc9926e2ed98ac23dca8232e210b","impliedFormat":99},{"version":"ff434ea45f1fc18278b1fc25d3269ec58ce110e602ebafba629980543c3d6999","impliedFormat":99},{"version":"d39e6644c8b9854b16e6810f6fc96c2bf044e2fd200da65a17e557c1bac51bc4","impliedFormat":99},{"version":"cd6f4c96cb17765ebc8f0cc96637235385876f1141fa749fc145f29e0932fc2b","impliedFormat":99},{"version":"45ea8224ec8fc3787615fc548677d6bf6d7cec4251f864a6c09fc86dbdb2cd5d","impliedFormat":99},{"version":"3347361f2bf9befc42c807101f43f4d7ea4960294fb8d92a5dbf761d0ca38d71","impliedFormat":99},{"version":"0bbc9eb3b65e320a97c4a1cc8ee5069b86048c4b3dd12ac974c7a1a6d8b6fb36","impliedFormat":99},{"version":"68dc445224378e9b650c322f5753b371cccbeca078e5293cbc54374051d62734","impliedFormat":99},{"version":"93340b1999275b433662eedd4b1195b22f2df3a8eb7e9d1321e5a06c5576417c","impliedFormat":99},{"version":"cbcdb55ee4aafef7154e004b8bf3131550d92e1c2e905b037b87c427a9aa2a0f","impliedFormat":99},{"version":"37fcf5a0823c2344a947d4c0e50cc63316156f1e6bc0f0c6749e099642d286b1","impliedFormat":99},{"version":"2d2f9018356acf6234cd08669a94b67de89f4df559c65bf52c8c7e3d54eea16b","impliedFormat":99},{"version":"1b50e65f1fbcf48850f91b0bc6ff8c61e6fa2e2e64dd2134a087c40fcfa84e28","impliedFormat":99},{"version":"3736846e55c2a2291b0e4b8b0cb875d329b0b190367323f55a5ab58ee9c8406c","impliedFormat":99},{"version":"f86c6ba182a8b3e2042a61b7e4740413ddca1b68ed72d95758355d53dac232d4","impliedFormat":99},{"version":"33aab7e0f4bf0f7c016e98fb8ea1a05b367fedb2785025c7fa628d91f93818cc","impliedFormat":99},{"version":"20cb0921e0f2580cb2878b4379eedab15a7013197a1126a3df34ea7838999039","impliedFormat":99},{"version":"c8e857b6224783e90301f09988fb3c237fe24f4ebf04778d0cbe8147a26fffe7","impliedFormat":1},{"version":"df33f22efcbdd885a1ea377b014e0c1dfbe2e42d184d85b26ea38db8ee7834c4","impliedFormat":1},{"version":"f400febd2140549f95c47b2b9a45841c495dfeb51cc1639950fa307cd06a7213","impliedFormat":1},{"version":"7048016c91c6203433420b9e16db56eec9c3f5d5a1301398e9907ac1fed63b58","impliedFormat":1},{"version":"a4234645829a455706bf2d7b85642ee3c96bfe1cfddc9918e25bac9ce2062465","impliedFormat":1},{"version":"9ff2d17592dec933b2b9e423fab8b8bc20feed486f16d35c75edd77c061de6e3","impliedFormat":1},{"version":"fe9fc5b80b53a1982fe8fc0f14a002941b471213717536987d0cf4093a0c90a0","impliedFormat":1},{"version":"4921f21de15ba1e7d1d5c83cf17466d30d4371bc9acf0c2c98015ebc646702ef","impliedFormat":1},{"version":"f728f13a2965aacfb75807a27837509c2ab20a4bb7b0c9242e9b5ca2e5576d22","impliedFormat":1},{"version":"c340ac804b0c549d62956f78a877dda3b150e79954be0673e1fc55f4a415f118","impliedFormat":1},{"version":"2bfe95f5f0ea1a7928d7495c4f3df92cdc7b24872f50b4584e90350255181839","impliedFormat":1},{"version":"9dfe677f6d3a486eebe1101b4cf6d4ec1c4f9ee24cc5b5391f27b1a519c926f7","impliedFormat":1},{"version":"2766c9a60df883b515c418a938f3c8fd932241c89aba12aedf418e02a73017ce","impliedFormat":1},{"version":"394967bc5f7707312a95cd7da0e5b30b736b7ab2f25817a8fea2d73b9398d102","impliedFormat":1},{"version":"014a4afcc1674f40c7d77ca215e68bb3b0a254c2c925bcaa9932b6fb8f1ccd4e","impliedFormat":1},{"version":"f816538db9388ac17bd354cf38d52da6c01d9a83f0589b3ff579af80cff0c8c6","impliedFormat":1},{"version":"d2e0c04dce50f51b98ee32fd461dfa6e416a4b703c3d6d7e7fb7e68eca57a8de","impliedFormat":1},{"version":"a8995e0a2eae0cdcd287dca4cf468ea640a270967ed32678d6fbf89e9f56d76d","impliedFormat":1},{"version":"b151ad192b8e11b5ca8234d589abd2ae9c3fc229cdbe2651e9599f104fe5aa6b","impliedFormat":1},{"version":"c37f352ab276b3cd4117f29e4cc70ed8ac911f3d63758ca45202a1a052fa9d00","impliedFormat":1},{"version":"c97ffd10ec4e8d2ae3da391ca8a7ff71b745594588acc5d5bdef9c6da3e221bc","impliedFormat":1},{"version":"74c373c562b48a0bde3ee68ac563403883b81cabe15c5ada4642a559cbd5d04e","impliedFormat":1},{"version":"d42fe36f52e0ae09274753ed0fdedb32c42c2ad6ad247c81e6bd9982d1762004","impliedFormat":1},{"version":"87f162804c7a5615d3ea9bdb2c828cd1d1f8378d5e2a9c3be1bd45c12f1fc1a5","impliedFormat":1},{"version":"ccb92f285e2f3a3462262945fa59506aebe6ec569e9fec223d45d41c7c6cd447","impliedFormat":1},{"version":"04e45000cf1381e6a84196aa01ca811ab192ca0a09debacc9e75dcfc6777bae1","impliedFormat":1},{"version":"566007f48fa4cc7d29e4cb5cce9c315ccd52b72300d2d45ab0c639889e42d455","impliedFormat":1},{"version":"4c2f8fb8a8f4afce6e05b9c554c012eb50147084933d78f7d218108740afd803","impliedFormat":1},{"version":"6f72b3ebad0276cfcc7291fd2aefd1fbbd229487ec1acbbad03e798e8760e02e","impliedFormat":1},{"version":"096681898d7131c1183f164ccfec478d99a9efa3744a1b6617116bc6713ed7be","impliedFormat":1},{"version":"2c9626288e967ebb03ec2bc27ea504f6f829b1686f65b86fd5074d53e0160d70","impliedFormat":1},{"version":"4de35fb3800a92324c59c1d2ed28a4dc1284d507d27ef2eed680c2f9ebb32cd2","impliedFormat":1},{"version":"4c3cccf01f76ca4292746b6dfebd6df4382eb7a05315724116feacecf952f106","impliedFormat":1},{"version":"492d1d21f79a8fa084e9dfd8fab89247301a49f1a0c12765b99c30a0ad8629ff","impliedFormat":1},{"version":"69872cabf40dd4399939184cd7c5e47da62a9df811d3f56d193a437817a85b21","impliedFormat":1},{"version":"19d00382e69115eeb1214d9b865030b61ec14f1bd5e91fb6e2b75acf5a6bef80","impliedFormat":1},{"version":"3c3045d2661ef44458559f6bd48ebb47ccdfcbc513d859dc60c5e18e0544ac87","impliedFormat":1},{"version":"e1de43a7fb0dda59dd9ed398fa306abdcb99da16b54edd3c7dc5e1a45d7e91df","impliedFormat":1},{"version":"8301449ecbf03d5f893c298863fb66d97f1becb31f157276bdba7c708174a5be","impliedFormat":1},{"version":"a556bdee2de2416a026022aeb260b5d684da34e322b5a95c7503143e51787b4f","impliedFormat":1},{"version":"e8bc04f55c1b3da172412955b2785de54f2e1f2c9cb8949c0748ff143525310e","impliedFormat":1},{"version":"683ad3639d8a96cfc782d672c44797d13c735ca9792d6c57e2fa5ada89e18e0c","impliedFormat":1},{"version":"25b171a82c55909032e85448d89f8409e045a24a2b0458080bf304845b29b6ba","impliedFormat":1},{"version":"ce25751e5374e1f13100276ecf2e2e8aac4d4c7229f762b3dc206639640954b8","impliedFormat":1},{"version":"2f0a5a8ef5c6f5866d3caf04151422d05e64765ee250a7e9defc62908cfe73af","impliedFormat":1},{"version":"79726fbe0854724f5bc3f16d4e40c0b320bbaa7a6296d1d782d70909f3b3a2eb","impliedFormat":1},{"version":"6d391889910947acbe7d110271463ef74e7f65ae372d355756b1a6b0a987168d","impliedFormat":1},{"version":"b3dadc705ad865a3acd5b40561ac0dcbce38fa28872ecb903eb586bd64cfa8b6","impliedFormat":1},{"version":"8181adc6c7145eb6b2596249f3a2e1ff2fa7ebc604e73fe583f98c4b40916d6a","impliedFormat":1},{"version":"dc84bb520982504eb30b09b870b32be8eccff2cd9beb963efd6a78971ae104b6","impliedFormat":1},{"version":"bafdca74b47f54e116a9f2d589d39f1c677c777198b96a677a2d2f628b43c8f5","impliedFormat":1},{"version":"9ccc168fc7cb696b5f60f216c72881db1f6c2d8e39eadd6c68130711f8eddd19","impliedFormat":1},{"version":"6187a2dae6a9d910f272bfae324625437343f43a6ff48a28a5c5dd5e9cfc2d5f","impliedFormat":1},{"version":"f063f87a44b1e92948bd5ef6db5b8cadef75218126e75ff02df83196e2b43c4b","impliedFormat":1},{"version":"333df4996910e46b00aa9b7c8be938f6c5c99bfbf3a306596e56af9fff485acb","impliedFormat":1},{"version":"deaf2e9bfb510a40e9413d5e940f96bf5a98a144b4e09a0e512efe12bfe10e9b","impliedFormat":1},{"version":"de2395fb1d7aa90b75e52395ca02441e3a5ec66aa4283fb9ced22e05c8591159","impliedFormat":1},{"version":"64be79c9e846ee074b3a6fb3becdbb7ac2b0386e1e1c680e43984ec8e2c2bbb9","impliedFormat":1},{"version":"9c09e723f7747efc123e19f0ced5f3e144bbc3f40a6e1644a8c23437c4e3527f","impliedFormat":1},{"version":"36fc129c8e3ad288656ea0e9ba0112728c7ec9507c75c6a3bce6d66f821a31d5","impliedFormat":1},{"version":"3771470dde36546305e0431b0f107e2175d94e11f09b116611156f134364127e","impliedFormat":1},{"version":"18c6715ca6b4304a314ff9adb864bd9266fc73813efd33d2992a7c6a8c6e7f73","impliedFormat":1},{"version":"90cde8ac2173d2008c51996e52db2113e7a277718689f59cd3507f934ced2ac2","impliedFormat":1},{"version":"69d01aac664fe15d1f3135885cd9652cca6d7d3591787124ae88c6264140f4b1","impliedFormat":1},{"version":"55ab3dd3c8452b12f9097653247c83d49530b7ea5fe2cb9ef887434e366aee8c","impliedFormat":1},{"version":"abd2ce77050bfd6da9017f3e4d7661e11f5dc1c5323b780587829c49fcac0d26","impliedFormat":1},{"version":"d9dfcbbd2f1229ce6216cb36c23d106487a66f44d72e68fd9b6cb21186b360cd","impliedFormat":1},{"version":"244abd05ca8a96a813bf46ddb76c46675427dd3a13434d06d55e477021a876ef","impliedFormat":1},{"version":"5298f6656d93b1e49cf9c7828306b8aefc0aa39ac56c0a1226f1d4fba50a2019","impliedFormat":1},{"version":"93268ed85b0177943983c9e62986795dcb4db5226732883e43c6008a24078d7f","impliedFormat":1},{"version":"843fa59ad0b6b285865b336b2cbc71cdc471e0076a43d773d580cb8ba2d7030d","impliedFormat":1},{"version":"aa2d452401748a5b296bf6c362b9788418b0ab09ee35f87a89ba6b3daa929872","impliedFormat":1},{"version":"a4ef3c3f6f0aadacac6b21320d0d5d77236360e755183802e307afd38f1cbcc9","impliedFormat":1},{"version":"853b1daed2861381ddda861a0450ce031c280d04caec035cc7433872643871c6","impliedFormat":1},{"version":"1058ed9becf0c63ba0a5f56caaafbfd0bf79edf2159c2f2f2fe39a423ae548ae","impliedFormat":1},{"version":"8b6eab9a4a523909ee1c698a10d332c544aa1fb363f482fe60f79c4d59ca2662","impliedFormat":1},{"version":"f2b2c244b10a8e87192b8730ed5b413623bf9ea59f2bf7322545da5ae6eae54b","impliedFormat":1},{"version":"92bbeada67d476b858679032b2c7b260b65dbccc42a27d0084953767d1a8cf46","impliedFormat":1},{"version":"545afad55926e207ac8bdd9b44bb68f0bbffc5314e1f3889d4a9ad020ea10445","impliedFormat":1},{"version":"4c8ef63125ed4d1eef8154ec9da0b6b7ca9effdf4fa5a53ab74a9d73c9754ff5","impliedFormat":1},{"version":"e76a7e0b4f2f08e2bef00eacc036515b176020ab6b0313380dd7a5bd557a17f0","impliedFormat":1},{"version":"fabd983e4148e2dce2a817c8c5cdbbc9cf7540445c2126a88f4bf9c3e29562b2","impliedFormat":1},{"version":"a80c5c5bab0eb6cc1b3276ac276e5b618ead5de62ec8b0e419ea5259af0a9355","impliedFormat":1},{"version":"d8cf5ded7dd2d5ce6c4e77f4e72e3e1d74bb953940a93d3291fb79158e1afc6e","impliedFormat":1},{"version":"bdb10c13a7ababaae91932d0957ef01cd8a789979cd0b606a2106d198848b16c","impliedFormat":1},{"version":"0fd3f9fed4dd35b1b07c18b4c3f612b7542c91835ad8a26e0e83d905709543dc","impliedFormat":1},{"version":"441b5f5ac4619df9dbf436ecdb9f0bbaacf8696e6fdb2f81c6f5b1db76f5a1c0","impliedFormat":1},{"version":"5d2284728400ee7b4fd1acd69e48d649d4056916cc70950a0000e5d70a32a750","impliedFormat":1},{"version":"27ef186120f9e7ee90686aa7ad5163eb5c7f4cdeb19bb87850c4a5fe4b8e05e8","impliedFormat":1},{"version":"4f1f9e056e0c9d23031367b4c7e7eedffb3e1ed58e64befc90749ca4dd9363ee","impliedFormat":1},{"version":"2b0ccf76bcf10f61612135f951a74327ea0a2d5a80f397b767e0e0b08cdac265","impliedFormat":1},{"version":"4e42e643f05a7fa69581a1a697a1cf967d9b2657dd9dd66e59d90500ec053ba0","impliedFormat":1},{"version":"0ea8485dc0bb7d2a258a93b16305e17fb5be9f877a9df88de7023a9821c537ab","impliedFormat":1},{"version":"5c221ba5333b775cef94d4a30076cc30730cceba649e9d30c5a7224a698c8825","impliedFormat":1},{"version":"cb61ba4d5b5e39ecafe74ad7d88dc8e67defcffe15fb9216addee0fa06d5df38","impliedFormat":1},{"version":"d83e8f0c10477fb4a7729a51aaad853cee81e0e332581dd2244da09e5526b5ff","impliedFormat":1},{"version":"c8933a5b693306696e78315dca1fa57f6f5493fed44cd90aa2d4a4d354dd6516","impliedFormat":1},{"version":"af8e2bf3df20cd2e6b8d744dd83499e174609d0c88864af3f30cd43671e719f5","impliedFormat":1},{"version":"4186fd8b51535399c7ad1edc08f9c4ebb2a9e8e327b131cc1f950c5dfbb0c358","impliedFormat":1},{"version":"b92965f503f55830702062f9e0832fabfbded49ff28728686a6fd84aa32f454d","impliedFormat":1},{"version":"172dbc7933ff46ba3b2efe8b5c7828fd4f0d45c08755df8200213b6055d57f2e","impliedFormat":1},{"version":"89e2ec7ed42725f89fa537c38f20144782bec6c5710e467a46a647647c8255cf","impliedFormat":1},{"version":"5165882999957fa041e423a4fb64627dcb310bf50183af70a6ee8e10a584b0c3","impliedFormat":1},{"version":"390997d64e1e5721fa807aa9e05c97086f58627170d9a7ed84b127126a3e5202","impliedFormat":1},{"version":"00cf8ed9b47860a5f8cc0a65d7a41f85a7026f68162057728abc9249943a8629","impliedFormat":1},{"version":"fc8b086c99f6d721eae8125a96833e0ba1762d00b80aad1d55c7a8b59d007466","impliedFormat":1},{"version":"ff72c74ccdc5570c4a75a93e605a5586596444d96048d52c72f322da183c556d","impliedFormat":1},{"version":"b8755448066177191edcd0b7e19e7fe44d69ed6dc97b16a420b7aa9070e2b850","impliedFormat":1},{"version":"822a0c843f492ad2dc815080f24d4ddac4817a9df0de8cd35830e88fbbafbbe4","impliedFormat":1},{"version":"467865324b9f66a1b8f68d9350c5aa0e749eec499e4863fe017b16ea8bcaccdf","impliedFormat":1},{"version":"863bd77d5546877e19594759a901cc7b75da8d27336d4351e54413ec12032d09","impliedFormat":1},{"version":"a17a62c94da321c0bf2315c35033e313daf1298a75aa43a01a4daf6937980c01","impliedFormat":1},{"version":"851271a09d3c2db3eab80d64beb468d775a9818df06a826ba58925c900231ccb","impliedFormat":1},{"version":"da2c95cd1f0f9cc19f3dd599b4c8fb0930eccb78a5c73f683e7ea98262d2f55e","impliedFormat":1},{"version":"e40d3ca85fb1362763067506784635aa28863640cf7cf9be9e8c1c521c0fbbd5","impliedFormat":1},{"version":"77a2f84e19aca9d03efdf0c484aba8daad3fd23c70b72e63aca78fadf71b448d","impliedFormat":1},{"version":"00c5b6248c69e66729e5c4acb239db849b1497d7eb111fed3eba979432461ebf","impliedFormat":1},{"version":"8e13abf75e9394f3a4b1d0b3f99468e15f4c7e2115153d2a1ca3c0de035bad1c","impliedFormat":1},{"version":"07097dab1c068118806fecb8544aba3cca30965d0864b1998af1bee326a9990c","impliedFormat":1},{"version":"c490ca6eb9149c28e4f2def6acb1bc058d160edb40fd249cf2a70c206a8cfecc","impliedFormat":1},{"version":"7c9aab9a76abba65aa6389e41707d57ea0288dac9a8b6359465dcb462d2cfaa1","impliedFormat":1},{"version":"97fbe30fd1b61b26f807ae1c78b681b0999af71cd9604c08a1d45e44690ca0c2","impliedFormat":1},{"version":"ef91bf45a3d149db0b9e4e612ed1400c35f6a3d2a09669d1441add612d5f16b8","impliedFormat":1},{"version":"dacebdc0353168f259724bccfd273b892e883baf36cf3dee21cf4178f3ef9ea0","impliedFormat":1},{"version":"5416fb031a72377c3c17faa2041428a5f19f9d46a70b645dda6e3293fd0ca8ce","impliedFormat":1},{"version":"95611472fd03e0992070caa3a5387133e76a079719994d237947f6bcf67f9bca","impliedFormat":1},{"version":"6141d19bfa7698f362e84460856ace80a1eac3eab1956b188427988f4cd8e750","impliedFormat":1},{"version":"1acded787e1fc09fd56c004d3ba5b719916c06b61976338a92a2f04ec05cba5c","impliedFormat":1},{"version":"8fb0d41cd90f47b9148e4a474fb03484d9af1735871321a2f57f456e40a7e319","impliedFormat":1},{"version":"a25cd4cf54bcdd109dd46274e2369fc1cad6d74350b5642441d2b9eef515c3bf","impliedFormat":1},{"version":"af4b9f16e50a0ae803745150e4c091e86ab95f3dac649286af28505258f7a189","impliedFormat":1},{"version":"3d209a6c3c53366b3bcb72dcf04a7ceda57362cae6ac47dbb783321934a0c5ad","impliedFormat":1},{"version":"4766770027d93a5ad1d4cc880cce405b4c6f67c64303ab34b347d6428eb783f2","impliedFormat":1},{"version":"43d2bec085f0fab54d7b9dfa3f5c5ce65e30da6a19d82ed37d1d41867682f86e","impliedFormat":1},{"version":"e5efb9781a0ef18d60cbb8afa261489efd260d87642c095cacba0b09b2684fcf","impliedFormat":1},{"version":"775ca7538a2f9bc674ebe5f3cb8aa8fa346ef4c1faec4c5b13b4784a744854dc","impliedFormat":1},{"version":"c0037c7c6fb8031f7047a1ccdb381762862b48429e9ab07bac8fc35fc5b5dd14","impliedFormat":1},{"version":"af4db63c6e4d55df1ad7f3dabdde31bc30555debf1cd6b79ea65a36c52bf199c","impliedFormat":1},{"version":"d291ffc234a58061b8192f74422f2e51fb87f6d10e82c30a555bccf9641b3e38","impliedFormat":1},{"version":"6d683695e9765b29165bb0823f88755211d48949f0b95a9a4236802afddf41e1","impliedFormat":1},{"version":"8fcd568ba937d867544cd8e726f35a515690ad041387fdebc93d820c8720e08c","impliedFormat":1},{"version":"81a0ff507ece65e130c1dd870ba79b8337c1fd345db7b154a2749282c994d2d5","impliedFormat":1},{"version":"64e2ffc72047548fa3c04095abb9dab48e2eaac169161fd2ed3564dea0c67e57","impliedFormat":1},{"version":"b525d2fc6b694512a877219ebba25d5fa244f99253a5bbe6c6421f8d71b1c806","impliedFormat":1},{"version":"d695f0d65f5fba0e275cf7801399575c272b86e7bf8e70133f8fc03517305b1d","impliedFormat":1},{"version":"0836f15e5e7dcad64fd50d49a39267da34371d1c2b803b38dffcfabcd2ff604e","impliedFormat":1},{"version":"56eff313f885482d44e4aa7cefdd55f7d0d92a91c1ddf9cd73c533abc36f4dff","impliedFormat":1},{"version":"022ff6b725f6ab95b1c4d229893b3047002a9c1fab6798c8fe63797ec1e63dc5","impliedFormat":1},{"version":"5e64d04301aa6ae6bf0f3435d07804889342873ab2875a16c827db9e6543002d","impliedFormat":1},{"version":"0b8c3effe0c65129d493be140da1a83eb61a1e83481d441dd2bc359a926b453e","impliedFormat":1},{"version":"0816c977ef73d99cbb134427a83f91ca6f7fe00eb7544118320d613a85da6879","impliedFormat":1},{"version":"068db2994f5926e888462b0852ada2c24f2cb50028f034f475407957ca51c6cd","impliedFormat":1},{"version":"59106b469557319ad26f40f054861be3fd2cf09911c3b66df280b9340a1d9caf","impliedFormat":1},{"version":"69e8e2dc21b0636f671485867555439facd68ee9e234fc9190c3b42e7f1a74e9","impliedFormat":1},{"version":"5fb0c0cae187f6554769cd4ff36575ddbc43078a4fdf9b17a5c0c25dfa9a9f2b","impliedFormat":1},{"version":"918d99a7aa4b7f5edf2cdcb33c163837a892f43b9e22c10634d61d0a28fc09a2","impliedFormat":1},{"version":"097b0d1e237bfcc97411fcae19a484a717fd4055a48e98ade5cc28b26afd21f6","impliedFormat":1},{"version":"5fb0eef64cb75951f7ae2dc6a704aa0567a25a39a616a5dd10ba7cfbfcf73b78","impliedFormat":1},{"version":"0a649cbc59a47f224d0494a6d5167a803ed049f995ade8423c7cb62bb6a38b64","impliedFormat":1},{"version":"68e25d1a79523b18fae630ca57100ce2dff6c5023376a2f57e9d0d07e1b9b8ef","impliedFormat":1},{"version":"1a505f408bc7d484553b7701f712dc52e1174648baff7d6c9c1f38b5cb83b772","impliedFormat":1},{"version":"b19badf31df455f10cf44fda9f6a0e0b42d6e970ac122b66c5da5d683fa270d4","impliedFormat":1},{"version":"71b6fe5c85eb877c3e3ed2f142b95a69f97905c34f11fc6d9052a4317e7f6bae","impliedFormat":1},{"version":"bd55536c0f989f59af6ca66cbc8121485f978f4e07c3df1688623c5f898058c6","impliedFormat":1},{"version":"dcb868c613ccd06b1a3ff56ee235e5987820c0c8bbd77fedc9af4dcfdd4c54bf","impliedFormat":1},{"version":"f3d1b3cd130e3cd67fe8e06256deb5d678243c6976ea498c81a48e542efb7529","impliedFormat":1},{"version":"772b881836efbdceb7ae8d3ae038f14ec83444397d8429b866312dcd78714dde","impliedFormat":1},{"version":"314d516eb3bf1eda07e898935edcbd1e74739493c8ad444e82181f8a020eef2c","impliedFormat":1},{"version":"8cfced8e57c64563f91e90a76a6df2d8f934c90a425327a9ed5393bc88c27d97","impliedFormat":1},{"version":"67bd754a8775c81794c9fc84b1a1e9fca44a402fa7d93fcdad4ba2d37737d929","impliedFormat":1},{"version":"5128e32c57068eb09d5189eb68681ca7d0e5e4b0cdedecbef9c67689f0970876","impliedFormat":1},{"version":"7fcdedd29146e5a2a6c86eda652f8485a1eeda1b8646825bbf729023f6ea6013","impliedFormat":1},{"version":"86b9b361ce8ea1d9f04e15bbe49e5ac72e5f97d8cfa8592930d32f267729a201","impliedFormat":1},{"version":"671f5e3a931c2737f8dfa43b34c4a320eca27fc6584ecef890ddd7374cee5cb7","impliedFormat":1},{"version":"ff213315eebd3ff05e01b383f704d79d8139aad5cb0d6a13c082f2e29625adbc","impliedFormat":1},{"version":"83ed351a10ef17b7811d3c06fc2775e36b6911278326d55da8d1eef8ff2f29df","impliedFormat":1},{"version":"2f5f146f1d6c04cf89ae0e9b4cf2b064b2ce4319ba6a5bf18ab8fb29db1cfd1a","impliedFormat":1},{"version":"7fc2b96a8465725bf774bd490c383edd5ee3dfe0d38c13551d082cae2de4041e","impliedFormat":1},{"version":"9eaeb6696e4218cb5bded9ee27c3e95589ad4af1fd4b97ccdca43eadd62c94d5","impliedFormat":1},{"version":"fd580a99cb9bb84288da00eea67dce300bdef06d4da2a727c0fc466d2922dca2","impliedFormat":1},{"version":"b82809d4468b6ba4d72437adaab7ca273547c59974e954c48f655a4b1bdca429","impliedFormat":1},{"version":"c6455d4ed4f7337bcb885c61372c7d9b03991995ed73e29023bad502d1336f0a","impliedFormat":1},{"version":"b5e6f0491b5a2002eb9b1146165cf915ee58e0fddf7f2adb5f2aa4bc44b4fb83","impliedFormat":1},{"version":"f534aef095a62fb82f57768fc52995d3e58d95e0a1671b0256a4704802aee818","impliedFormat":1},{"version":"cdc6f1d471882782cdac7442dbdad65aede5f749c09799a84918bd916eb6d6db","impliedFormat":1},{"version":"2475197472c609662f09660e3964a86aa355cea0e671653656800690bb508b7c","impliedFormat":1},{"version":"b4067760d0447747d82b6848b640168d656d0b916c3add2ec94c3c4dea92fc9f","impliedFormat":1},{"version":"c6c591a17f9c0c2821baf15f775f5c7d6dd4a0786365ee9c182d7a97e38ad96a","impliedFormat":1},{"version":"ede44ddf9d274a859e9f1f34333d5f0e8cf2167c3265f81d5280d37b872b4552","impliedFormat":1},{"version":"6317aba53c9152998bb1f8bd593f55730084d05c00c774ff72a3aa4d687a6dbb","impliedFormat":1},{"version":"26f1bd15980b19d925be98afde3918a6a181435b87e9b7c70d15726ecbfff0e5","impliedFormat":1},{"version":"57af4faf6847adff5048f82929b9a7d44619d482f571534539ae96a59bb29d3a","impliedFormat":1},{"version":"874770f851ac64a93aaddfb86a2f901f158711911fee14a98a67fe32533ee48b","impliedFormat":1},{"version":"3d933e519ad9cc8cf811124f50d0bc14223cdea9f17adf155f11d190ceb2a6c8","impliedFormat":1},{"version":"d5dfce61a7bf994d2cb711af824efa4de9afa5854d34e6725b9c69d925b6b2dc","impliedFormat":1},{"version":"f77d1e10417bf43f8fa5d18916935f342d4d443e371206ede7239faaf9abbbb8","impliedFormat":1},{"version":"c94e0b8815b72ba924c6b8aa666b25903d949a7ab0d38ed84e4bf65da3d06a3b","impliedFormat":1},{"version":"15db84e660fdcd8468f23973ab83c31d7fd28bdddb30b0aed16cfa051aafe900","impliedFormat":1},{"version":"7c01cbfe181c0e10044831b899de6c2eec4fba32de1f1cca12742d2333c1345b","impliedFormat":1},{"version":"62cb1636513ef26d3ea83fb5d2369cf8569d04aa30d8fd7f5327d0e10841635d","impliedFormat":1},{"version":"8282a076b07dc3dc6b2265377627ab3860cb6a1bcbae85a5a4006dec4c9f0066","impliedFormat":1},{"version":"b273c241dd08c6276fd35be413c64508ae50f847fa052bf7781799b51da8e9e9","impliedFormat":1},{"version":"3bc0bbef6d7fb63002fe80167db350b9677cfce5872c0cc7ecec42ba8248ded6","impliedFormat":1},{"version":"4880c6a85442934b81f3b1a92cb6b43df36f8c1b56b6822eb8cbc8c10c438462","impliedFormat":1},{"version":"1bfdd8c1710a3d1654746ca17f512f4a162968a28e1be1a3a1fdd2a8e5bf385f","impliedFormat":1},{"version":"5405aedafdf272dde53b89036199aaed20d81ddc5ec4bea0cb1ab40232fff3fe","impliedFormat":1},{"version":"db2ee45168db78cc83a4368546e0959318374d7256cbd5fa5692a430d5830a59","impliedFormat":1},{"version":"49993b0eaa14d6db6c334ef0e8b1440c06fee2a21ffd4dea64178880bd3d45a2","impliedFormat":1},{"version":"fb9d9dc0a51cb4014d0e5d5f230ec06ffc4eb6caae6eecfe82ea672b7f3c6967","impliedFormat":1},{"version":"84f44079a0793547d3a629feb8f37d8ef6d07cb5bb5fdeefd887f89e9be871f6","impliedFormat":1},{"version":"295c5ec088a1bfc286e8dbdc9807958588979988cd7a74ad32be774a6f6ea512","impliedFormat":1},{"version":"f15129c62ed04410ac0a3326ae6fa5ef7229bbb1b0cbfa252b5c558505a38253","impliedFormat":1},{"version":"4bf500d9a554d43cb9133d60f1b3f58ca98b0f794486d1377f3effc551b40faf","impliedFormat":1},{"version":"536f6a9208c89eb8f0a5eeda629175b0fa62ccd22e387af7f35297fa2af6897d","impliedFormat":1},{"version":"8c95fe5a655ea1c78f0335f8da58e70d98e72fe915987c3b61c6df49d6e276d1","impliedFormat":1},{"version":"4bd434d3055d1b4588f9d7522d44c43611341de7227db9718a700703c608e822","impliedFormat":1},{"version":"935507b695f420fddff2d41ddc12ff3935931a3f26d6aa65afbb276bfdf51cb4","impliedFormat":1},{"version":"e851c14c9dbe365592f5084c76d4b801e2f80302f82cebbe7c2b86095b3ae08a","impliedFormat":1},{"version":"b5c90d931d285d9d1c4cb92d71f2719e28caaa9ca062072d0bb3b69300b436c2","impliedFormat":1},{"version":"40b3e953e9ea51a86a1e5b60a2355eeb780f2f8ce895ece252910d3e0a033a16","impliedFormat":1},{"version":"0264b432aace8398f174e819a0fc4dc196d5aed49ae65aae071fc2ec8e6dc029","impliedFormat":1},{"version":"3b29bb23855a1924264c3a30b5c73b00c52a57c2ffb5f91c48c9572e71048f19","impliedFormat":1},{"version":"8b9b2e76db07d8926bcc432c9bdfb38af390568951b39fe122d8251b954f9ed2","impliedFormat":1},{"version":"96e85c6fa102741a25418ab2c8f740c994e27ea86fd6518a17ec01a84b64dd5c","impliedFormat":1},{"version":"9525b28a4fa959c8d8c7d6815f842f78c67b40def9160afdced5c9daf14cd4a8","impliedFormat":1},{"version":"0e59a6944a52f52138315b6658fb1d217fa017b7abec12006c491d51e07fb56d","impliedFormat":1},{"version":"cfa8acfeb9d68702aa6249b7295ca73ea598e441f014cd4184b6e2a3ea9a275c","impliedFormat":1},{"version":"21b0c616f61cd6699135a34a500f7df30022abf9358ba612f10668ea3c988e00","impliedFormat":1},{"version":"9ad1d0b171f7bb9f484ad156e97f0d8e760a5fee13e342831669c7b2d1137a30","impliedFormat":1},{"version":"7ccadd4ba126bb2c0564bfb85ddd7d084aa5f2880cc2d0149fbe183fd5ceb6d1","impliedFormat":1},{"version":"ebbde5a8a356a1547ac6ecdfba7547036a5ada116011cb96634c32df1cf69084","impliedFormat":1},{"version":"e703eded767e3a944ac1f7c58c201a0821da1d68c88d6ba94bb985a347c53e42","impliedFormat":1},{"version":"99953f3f1f9deae755b97ed3f43ce2bee2ae1324c21c1e5fa9285c0fe7b5077f","impliedFormat":1},{"version":"2afd452bfa6ebaacbead1ca5d8ab6eda3064d1ea7df60f2f8a2e8e69b40259e9","impliedFormat":1},{"version":"dae0f3382477d65621b86a085bdb0caabf49e6980e9f50ee1506b7466c4d678d","impliedFormat":1},{"version":"e5793b3f4cbd73c841790264db591d3abe9bd09128302a2901fedd2353ab24d5","impliedFormat":1},{"version":"41ed74193a13f64a53705a83e243235920fd58d4b115b4a9f5d122362cda7662","impliedFormat":1},{"version":"478e31b207faa7110b04f6a406240f26b06243eb2d2cff3234c3fc8dd075bf6c","impliedFormat":1},{"version":"ea917cdbfb87d11cd2f8b03e357b22b1114d0ba39ce4ce52b1a4f0dc10c6c20a","impliedFormat":1},{"version":"3ef0c5634d9aabee346f9ba056c1c5d977f2e811f6d13c082614c9062cd4b624","impliedFormat":1},{"version":"1ddb49c7f8fc4b9e4da2d5ddca91b4e2763fe7d17aa79940bd60406f3e2739bd","impliedFormat":1},{"version":"d5b01eab562dc40986a5ceb908519dc7f02a7ded2bcb74318317a75714dbc54c","impliedFormat":1},{"version":"b19ef44e991aa150a19a9f84be1fd1c4d86496241300fd904216762246700623","impliedFormat":1},{"version":"87df6cf2565a88dae3ec50e403e9ef6b434ad3e34d922fe11924299018b38e58","impliedFormat":1},{"version":"9d999d30b52fb0b916f7a64c468f6d5c7a994e0c1ef74d363562e9bda3cb8b99","impliedFormat":1},{"version":"9b1b05f88ded21046391276ff60d2d987bf160d77b40399e07b7bdbfe2e38b31","impliedFormat":1},{"version":"628177f7eb0314f0189e4d90f663233606b3936ce391c7f98da46105ae402c65","impliedFormat":1},{"version":"3c80bf6873eb3b95cd590aab8eb1612f0f7cef6a30b3f49535844f7cecd99351","impliedFormat":1},{"version":"da367ede4ebd5ff4cb1cf9e6bc8eb35848b23c57c22c53360e53dc772c7be8f9","impliedFormat":1},{"version":"4337acbd8896efb7e7d8d6e0eca78607fc7c1a9ad2bb228240f13f97b3492f1f","impliedFormat":1},{"version":"505c7800f8195961302dee715870b7212bdfb667e5e47de76447151dd35a40f1","impliedFormat":1},{"version":"cf5a3eed6cd493d198b0c1eacf70486d8bd527fc411d57660caf2c93b5ea0fb6","impliedFormat":1},{"version":"900e344adae3c65076c9ba4ee1a77c6db19fb0c7e54d7ce23c28ff8d272cba26","impliedFormat":1},{"version":"bcc5186a38d1eecf60b2c4d1e3eb9abd8ab91cb492f384a9d2ed7bcda2abd0d5","impliedFormat":1},{"version":"0ec1b41954fea9def7d9d87e0f3beea2ba3ec5b7beb769f308cfe32ad2968669","impliedFormat":1},{"version":"51189c085256f11da13b22792f1d7c928f8a8e9d9b6c7b38e956e72a51ef8219","impliedFormat":1},{"version":"504f509e23f2ab3a8018533925c034a340fbce4af9e77a1f71a8ddffbe0c19fa","impliedFormat":1},{"version":"635c049483e13e1dc8bee72dde300c40d350046cff59b202d41a12ec8c733d27","impliedFormat":1},{"version":"7fd8d5f70ea745e1a0338de7aaacd9bd6ff086ce6de75dcf91749c77d1e23831","impliedFormat":1},{"version":"78d2a7795bfd2be490937e8b01968a0acca8a6bdf5933570bc013806049d4175","impliedFormat":1},{"version":"db49833b6e9aa54b535076f40615349a7465005367a787b50ba7b92421e26442","impliedFormat":1},{"version":"6a936fc917de40c44ca81331ee7d7a71dc30ae1895871e7be7b6ed85d96cc41f","impliedFormat":1},{"version":"bdd2a764cf87c4ab1efd7084597d1ca4ba17f6b6496553095ecca5a14b5d4278","impliedFormat":1},{"version":"ddef8e6676fd572ee3de174ad28df05c7b3803542d7318482b8f98779ff25612","impliedFormat":1},{"version":"34eae3bc7f5bfb515d2ec163ccd4b63fdb73ad7f66564707686d84f42a8b7c35","impliedFormat":1},{"version":"d240d106cf9bc3c0efdb323d807b944ce16ac5d837ecef5b75f1e66d606b2a72","impliedFormat":1},{"version":"639d5a26be297431e0bcc9f71f969fd7d84319fc03b5e1c672ea10fb0094c616","impliedFormat":1},{"version":"770c3e6367c2802c027c0b1f86928f288e11ad77ac2f454d7f682460eab30a0c","impliedFormat":1},{"version":"c9dd2760e0419a059cf733c38ef5d44eeca3fc647f9c201d88656e5040f5a3a7","impliedFormat":1},{"version":"16766b8f3d1bba66ac8167e6407be6c490d4462e802f67c140b1174869db5b67","impliedFormat":1},{"version":"f9267391788ac81ca54dfae32c5d86e99a19abaee9b172b2f8d98a3c2b578a2f","impliedFormat":1},{"version":"92441638c0fa88072ef9f7b296a30e806bac70219ce2736ef33c8941259d9b70","impliedFormat":1},{"version":"8774efbaf39f9ea3a0ff5b1c662c224babee5abb3d754796278e30eb2e51ae3c","impliedFormat":1},{"version":"e634b47a7d3f9468572a7c9af1fe2f52687ee1afb23ba5568205a7a4c55662ef","impliedFormat":1},{"version":"1cbef47ee169c717a1ef7ea91b15582c61ac721fd5f5671de95c3df9f026db9a","impliedFormat":1},{"version":"0db0ee49f803c9b901dfe06be9c8fb6a1c05f98664ca34c68e0da575eae76f2b","impliedFormat":1},{"version":"4b745fcadf040899979b6b26e24aca6d2fa2bbe52a919d67f717bfe0339354a3","impliedFormat":1},{"version":"bc57f3550b3fd3b7d31b9a278d0b491dd45d170e37c4046a3105fdea9ebe5f89","impliedFormat":1},{"version":"b5f7093d62a228669dd56edd0bcb86a0cf0b46db4816a3967b4632503c21b93c","impliedFormat":1},{"version":"4d70bbb1f35f345b2c2e1b5c9b8174d5397bba76ffef12656bca16ce9a1830d3","impliedFormat":1},{"version":"a004fc80aa8f78dfb1d47b0e098fe646e759311c276b6b27404f5e356528f22d","impliedFormat":1},{"version":"c8933d9afe6c5ee7ecbeec5aa01f6b37d3c2be2f7dd203ee75ee4850164007cb","impliedFormat":1},{"version":"b1129b38f1eea70951ece3ccd1cc3e1d094379b64d3958ba8ce55b0ec0083434","impliedFormat":1},{"version":"b2bb10f992cfd1cf831eb005311a80f7f28bc14cfac5883f17e75f758d1354e1","impliedFormat":1},{"version":"58b621b924324874a67e92d7626809fd4b72fc079ce909f6da7097654026af00","impliedFormat":1},{"version":"149288ae23bb3b31ffe5cfb7eea669fc6872e41901d60be932af2581601fc70f","impliedFormat":1},{"version":"01a0fd262c8fdc6c91078255c4fe2f8602fd4fe4c753b2eae88537585b21dddf","impliedFormat":1},{"version":"deb69e6754a61784daadc35b318544b0aa69048ebfb142073c62b7f46bb1d5d0","impliedFormat":1},{"version":"60eef77c9b5cec20516907628f849845975a8137773ddb0bcb53fc2ea7d28870","impliedFormat":1},{"version":"67bcdcbd8cece34ae28180c636908af1b118fa9603d0d4b7dea877156d4de519","impliedFormat":1},{"version":"5a1c2cee26d1f8d9bb15b334f5b2df7de27a3944bff9ccf71d3b69c588612bda","impliedFormat":1},{"version":"a04d60b205af1f28461f3d2f5a8222ec2d8af54d436bc53a0460756e07e4207d","impliedFormat":1},{"version":"14c85d4debb2e0c8939f81b85cb9ab4543f70c8fe53be5fb5caf1192677c8ca4","impliedFormat":1},{"version":"c507cdc9757c048620ff08a85b9cf6278598eb1738d729fdbfa1e387a35e639a","impliedFormat":1},{"version":"4a4807c3096f49a463476742e3b5d23ccf0e087e43c017891c332ae5b8ad667d","impliedFormat":1},{"version":"c611af558c5d19fa477f1b03ceac7b0ae28fe5ad4f8bc61e8ad64c46f97e86e2","impliedFormat":1},{"version":"0cec41f583efa1f1033a4d546d926ee949756f19040bb65807c5a3ab6f3b8449","impliedFormat":1},{"version":"73b1eda15491d4f3052d6fac202190e76d6453fce832034bd29901cb198448b9","impliedFormat":1},{"version":"08c66989383183f3d7c43346617c8f466bef28f1e3eb4da829316d548cdbdf80","impliedFormat":1},{"version":"1f283476bbeaa589fe644fe6ba9da223baf118ecd4756863deae7362b246aff3","impliedFormat":1},{"version":"0a8f91ace4d1803eb2a50079c9e233fb262b0027d19aa250eb7ecbf6319e52d6","impliedFormat":1},{"version":"65bab52912be03b374ab591d73ee40aff3a465ac20bc0f2024b4c80ac5ce8397","impliedFormat":1},{"version":"6a647bf0620a4a7777527c688c62636a503e8b4d5e680037503066dd2af6d0dd","impliedFormat":1},{"version":"f1466e4d708815280c849956a506e132b7dc243907b9c8e07d52862e32dfcd91","impliedFormat":1},{"version":"cb4b99f8e47f57df841c95fcb1afc28488a2b5442e3524f6261e611b86105331","impliedFormat":1},{"version":"7c5fc61fc40a9f3aa3a09fd867536ff94a93b16f4ae99f1fb748fae6e13ae8bc","impliedFormat":1},{"version":"473d9ca5b242db0471d418336f410922eadd290679914f37ef21ee26dbeee2b4","impliedFormat":1},{"version":"2ffeb6ad0b074d1cfa3dc9671dad062b08129d1e8a8988b727dd2ce9fd4298d8","impliedFormat":1},{"version":"fa1d4332a68d84300895af592811f65f5f1d725ed0664f17d5c215a63408b6b4","impliedFormat":1},{"version":"7a09768c36d8b7d8e44b6085031712559362b28a54f133b803bed19408676cdf","impliedFormat":1},{"version":"f0b807278b2619fbe0acb9833bd285acabbf31da3592da949f4668a2e4bcbcf0","impliedFormat":1},{"version":"bc6419ca69c35169941d9d0f7a15c483a82ac601c3448257f29a1123bc2399e1","impliedFormat":1},{"version":"45f530610645ca6e25621ce8e7b3cf6c28cd5988871bc68b3772488bd8e45c25","impliedFormat":1},{"version":"2d3e715ca71765b491ae8bd76257e8ccfe97201c605dadc4e6532bb62e4f6eee","impliedFormat":1},{"version":"c519419c11e61347181ba3b77e8d560d8cc7614b6231cacefe206b41474792d4","impliedFormat":1},{"version":"24823640771cf82865c3b1cb48a8a88119b69e56aef594171cc0570f35f60b8a","impliedFormat":1},{"version":"30398045bda704d03d23e78a37095aa56e69ab2dd8bb7304b15df9e183b9800a","impliedFormat":1},{"version":"9a816fe54ea736ecf02b6865c10157724cdb5ba3f57ead02d9216b2dd4bd0d5f","impliedFormat":1},{"version":"a67582f2933f5b6faebba3484c99e78b529aa016369b768021726e400c93ddb8","impliedFormat":1},{"version":"96cd7367cc076d36d9f10cbe34b91e94467caf9b64a7a0fe1c4f6c8287e0a1b5","impliedFormat":1},{"version":"17c7be2c601e4b7e6292932997e491ff874418bef9ee6137e69ea6ef497e0e5d","impliedFormat":1},{"version":"eb7ed3b69718cf40c1ab8ce9a0e917819e0ef0b7480ba2890cddbb94a1386b10","impliedFormat":1},{"version":"7a7cec0720ee6d20e08fa9def697b149a94db1763bbec6e1ab5da8d7726ebddc","impliedFormat":1},{"version":"c024677c477a9dd20e7aba894c2f3e6ef81c4076af932a7fc00c210543cd53bc","impliedFormat":1},{"version":"7f31b6e6d0c03a34e462fdaaf2f7ab6daf85bed51fcaa61ee794aaa1c9b890ac","impliedFormat":1},"363337d3890de5c30fbce1ec0936a3c2951d0951db4e8d76f8086610ebf36a3b","60fcf8e1174e55a34834c30781fa24512db9a2cc95a2add7b9fe8402da341d45",{"version":"829b5cb87df9dfb327efb8a4e55644d809f3e03de209067122b99ffebf284f00","impliedFormat":1},{"version":"a33df240f17a55c46974ca9db7fbbfbc821a381e8c55267142692692d00aa71f","signature":"4f7cab2149e5816f259758f3acd01d3ab7d87d8ba89a432c3aad0626618ccfda"},{"version":"b2d6779c0b91b43b26c4c926e8caa3a7fa9519c88aa5e286cf907152b595c93a","signature":"5d138009f638c5d57b012e5a9a67ccfd810be05267ef7f8ddfaab288a03efcd4"},"4decac9024c2d96222fff4d423757693bb3957dde59cc9bc7a9eb953b1580b53","c114ddb8ad5876cfafa8bbd16e59dc0728d5203237fa8d96a663385a77640bea","13766f8e100130ea50bbd91a4a1c7e4c4b3518b86e2dc6970e7caa94c099528d","92c1b2698b889efaf36da1ad326c9ec4c0513d9a3e408b65a5414655d8dd0a0e","2963ef2f6fb7587467d5a3cde6a73ebbbdaf50b2d4fbe95b989c96599b576e5e","549e3d32d869f0fb8985b9f7c3d3025776e5c930563f4a2ab66ffb576bd6441a","a4cef6b6cac13b041998a9c7ad0e3b5caa7f4efc19e7434ff959937a3ca2e2a6","22405c65eab6b7f015a537328464c8cef8074e8a053ea863796b0b95d61e5bb4","31cb77384b75a56dbc1d127a7900083e80c136a53f537020190d6e4b2f404c99","476f401aaf6c558a214a40b6ec7259cebb8b075a3c663f53289fdafe1460641a","e8aa6c0093a3f7a806d3a421dfd467ece3adb9b85969f40bfba8fa69c004dbd4","14b5c9564a1fc97c14683938367de9bfe38e418cfeab80fc0e4d6c5f7829932e","6c77ff44fd59ab9a275a8ffe7459020ba9b8228b1bfc408229cac99dd411af50","c650f3738f967af45e19c8b415872eae2d2e4cea6105d77501ebcafb11c0ce3f",{"version":"b3203c3f5a020082b416744003a9e38979ede2df30ccd21f4de67143172d57e2","signature":"9fbb57ff44e50c72be21556a083c1560c462c232dfa73eab062b05efa4e4814f"},"07febcd07951cfbdf73a984dfae28456ca08ed22a773fddb176da9956d715851",{"version":"8a4201eae312398eaf445fdbd54b3a21ae637eadd2ac0e293f4d52fa4e0ab327","signature":"e6aa4ddb08f23faadff16d758da0eb5e47f6e238c87988d232d1813f37eeb284"},"e1d631bdeb05302311ef466e5ec3c66d7c13ed9c02e4edc0644854be5b37ac5a","0cdc72699f3d51e96b403efc94175c74657577021b60153e6ea1e2c11ea231b9","466c919ce35f10c2d59634495f97157075cb8f345b8721db6800a66b5bc691a3","fd5b7cecc424c633a97d69e2c850b6ff6663e44c07b9a1afe9318091ee35ece7","9b9eb6ca47a86593b2e0d294bd0350c37c0a9417ad01aaf8ba13cff83ec727ca","bf2604e4c66c8e3abb304f51d95e001c373fdab93f2a128df3e36856f957a624","e3316335ad05ab15eaa78891fc713cb84566ba28c0ccbdc34f9b5a85e6de83be","c4ec7f326602e86e92572cce7a816a9f260b20fbb5f912a3a94724b0c0b8a445","5eedb679612bf530187cc7b6a1dc81864cfd1a8b2b32c0843ceda631a4f672e9","a9af3ec5eddd279d14605fcd65ed25268de0ca1cb8af98faccdb10c9bfedbcbe","6ed3407ba79e955b9de88f8bd6db462b1b4ef65ff3f3dfaca6263d8cdbd3fb69","e191edb85d3db1bf7314163d3630ebc8c3fec2a94a8b16c656710b40addd7c80","906deccbf394d6dac64f092bfe0db1d3bd55170f61b6dc125d87bb5ce951cb05","b285447e628dee9e7397feaad86dbd0b7677f9eb3d58625add2726a2079cbcc4","cc602b9359ffa0e7486df851aada9f73a3239df42a9f70ad5bb545f0d340f64d","c57b52c5bab42925bdc6ed27bd4e61928e5d96c94562901406d5fbc8b04d266f",{"version":"eae90981470f769d32fdbb9f9def3a2ab871e0673e6421085de9e75a4ea19c98","signature":"d42891149e5bd34f47995d87078af79999d374856c1ec0cb9c72b631ac1b8ef2"},"4c6ff3836307effaf57d3a3709a07e0a8229d13a5c3a0985d15958e58f5f5928","7bea32f6c7755c892393e67416cc89f54bfdc041aa7fedc54d73ed67013563c3","6efa7f569949e3c478d4c2284d1fe1cfe749046d16a8af58e7a099f98eec3656","7ab042174e54fbe7d83fc6256830a0260da72d2dc94729076a5d740920d456e9","cfa24a8a95f17d84282086997a89c54c2a41c9b0084ef867e18b70fe220b5fe7",{"version":"2b33d51b918090f435fe61462c20abeb10912b8e0b0182f6fd21225f6b589bf7","signature":"33e2f1fac6d1b20533fd43c335747417f3e96c8b02c97ebf0ca1c7fafba466aa"},{"version":"1807fc14993c1e1680f40f77c29eaf9b88ce14bf8a6a945298e04375ed838dd8","signature":"17f5053845b1e0bb40915a5985862fd7f3ab600c5a43797df8b0bba09513356e"},{"version":"b991f5eb408369ef8f004d49d02930429e1a867d02faa79ff378f006f8566f4e","signature":"02f4adebdc301e3adeba6c5eb58106947840a79399e8433d6ed4ede14e16abd2"},{"version":"7aed1f363dbdd5c96b5d8e480e24fe13895e269d5ffc23a41d1b563aeb36587c","signature":"66a10d75d6c2eb52a7cf011171b72addc43e37c17e283504cd4fc9be0f89ea2a"},"a15844a6b0b9a2799ba10b49ddd63f1288e5805991cb96f0e7d51c861a5268ef","78a7180b0175462ed83a93d95694075174993424fd663dad4781cc5e6c92c60e","3603b3ae80148d541d09dbcc47a94dc8c9512907ba9715beb73b4dbe942748e2","eeeec5e64a0af0dc1945a8a107bbb8f7f44374efa626b3f0fb28a487e3d497ad","f14db16e2dfb9444fdc7a3b876ba9bccc30199303a1b336512ce431a16ccc976",{"version":"ebe5e754a1d4fa5df368e354329607bde9736e7f5f276dc17ec9f5aba00ce708","signature":"2cd055b0c7bc3fdb035236f03a1794878497323de2cb13ffc077aa083858341b"},{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"fc2e03a21b84c1d090e6c38dfd1bd440f6c5c9e83a9dd3a81f8c7391a1fb928d","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},"816307dd1a6ccb60e6aee1f353d418cee9727e7a4d65e01766777ba390e4fa26","5b2aa588b0784190c54096f8f2040ca59cb08fcbc33081e38a6553c8a868514e","d31a09ff5a4d2bb4158ce9f64c3f33a61c415bc38d222813ded90a847cd34300",{"version":"24cf0f6a884ccfe83e62c5d9e4ce103ea85a8cfb8965845b8cf8e8d1932d8ff3","signature":"2812d6388581e6b6c1bf3311bb77731b8e50dff901839a2851604940fca6c309"},"1ec14ae68bdfe7d719204fcc413abadabc5a015b92c5fbb0fe6ba87534fc87e0","b22193e41f508af507cb1253a97ca1dfb7d16ab4dc8a7f94152506c697491e4b","578947b7c38d8ca34d5b3423159f4fa2726f7baf798df0af39e37ce97c39746c",{"version":"8bf290ecc4308eed9e0abf9802f7ede9c06b54f0ac5eb4243e6a737cc31395a4","signature":"2173ea8fd782891df4e81585071204982ddb9fb8c9100b57ea3c64e932c36b42"},"30add896658251b09a82f8f7a7a38b17090e95a4eea814a3c25a53b73e43bbec","daf47d6a4987c45c61ab2be6ae982833d51ce1a3ec40191b940c5a6ca84eb163","ff645fb88ed73c63b28d7a74454b2dcef66bf75f2f0796b927fc1204c5a59d35","e2e27055a629d56be417ee38f3df5ef0454589c1ec3db94bcd17f3d2487ed39d",{"version":"640f2224d7bf43d35597471fd4c383a35185d0d5deb9e1820ff4206a4f7be16a","signature":"b6352573903266808585e911c3052b338d81a689adf9708aee46205d07d82ff8"},"149044c5c5ad8a83b7e8e7ee26dcbd291521ce43c16385f3f7fa136726e880d1","e0d144320b6e2bb7c511b04230aa7034dfa6eb3edd9f41ae5faa472cef632677","aa1eccd1a9f15c3b172cdffd9d1286c5741ffc094ad2df6bdec9014b83b1661e","0c91057d02bc4518b3c60cc1d14eef0926c845d9961a3fec7c029de72b1b0d82",{"version":"89d42e6b0495956b614115ddad79aa1f0c2a9488f8c27834fa1a256d8520a43f","signature":"657620d14da68f8f1203ad2656a62e396d28362fadba57a5b69cb5cf6d622240"},{"version":"175531ddc5b6f28fcc05a561a3a3f6a34ebc8cc4a5162490576ff817244f310d","signature":"018d372bf09a075ac03550ef67b26c5f31de2ba116322adf581f3224527eb78b"},{"version":"e252f98031c7de048add015cdfea4f34819a563573514e37529a45ce8dacc3ab","signature":"f71e82c35ab8682947cc0f50ce07db725539283b9a745ec40d17044a67995089"},"55b15f2049ad82e1934bdeb2258efed77c7369d46114047d928d88c2838e86d5","1b202916b099eba6198b40bd6dd41eba4bd5b2f43c4f311a70732c5cf549bc1d",{"version":"3d1592d888b4d7f0eaab05d51e9c5e1f8b623d3b3d1118195ec67e8ae37af7c6","signature":"1999d1c1dbe909316b5095fece7d98e1d1f79a0a36b23bb01d6b1215c2cae73d"},"020ed55829f4edd896e57b4bdc8c3d9d485365d6c60a3a9d178c78ef47bdf8e1","8824e084f9f51c0053eb34dc274fb9fdeb635cf2d6a0f3ee1551f6ea42c0e016",{"version":"0132c7570247c63edefb59a14773c45698105a5ee38221f5c750d41684e7c7a9","signature":"82ef32ad4ef8fa4b661c58dad957dc222a07369edd9c61e44d6ff9af6fc2603d"},{"version":"38206800e478037401554aa0a809bd07f4a850ed9a9d80d63049107a231ef7f9","signature":"c86712b68911d534fdf4d55ff6eac2ec9f4e2bfa0138e28d4cd59e75a02652f2"},{"version":"ca3998dee2c8d2d46cab45330a80d1900fe15c5f079ecb8f123185392bbc8a0d","signature":"96d0bbb0c0b8dc18b34013edc18f65b19baa4cfb16b5b120b33cb3d61a98c19c"},"9cd55f1f4936ea857562e53350f09d32c04211f107b46eedcfe79d2b88b3f910",{"version":"2257ef3fe2219265b24f0357c4ddd9db821ba5aa9213b4814fc3e8010bd55297","signature":"5a314a6fcd7cd23ed3d2fcd85901e9610a6c29b6c2db3b1f3a50e00725408d1c"},"137a906928cf7886215530863e54c170ed96715621247d68b218a1af5d613c6b","30ec1c19d14eb2c80bf20b85a2f137609716c54431e3ef9101019ae00e60e539","9b97423b6b2ffa319787cae3b62088994842013f4b4be2b8cc9a0dd413edb011","ebe21364dd2ccf10fd5458b0b908b57b94552a38378f2f819e44ca0f0ab5ad6a","6bb8c692eff671421f426843bd9c75f86ae34159b0667623b0cad83d50dc49dd",{"version":"d675c1ac98d6427c0b9ca8e71d545a94f23bf70644914751cf561c3df90908ba","impliedFormat":1},{"version":"04d4f55d52fff3ca1e14471bce72498b6008051fb34a4c1a72a21734e9eeba91","impliedFormat":1},{"version":"2cef84bf00cbdb452fdc5d8ecfe7b8c0aa3fa788bdc4ad8961e2e636530dbb60","impliedFormat":99},{"version":"799003c0ab928582fca04977f47b8d85b43a8de610f4eef0ad2d069fbb9f9399","impliedFormat":99},{"version":"b13dd41c344a23e085f81b2f5cd96792e6b35ae814f32b25e39d9841844ad240","impliedFormat":99},{"version":"24104650185414f379d5cc35c0e2c19f06684a73de5b472bae79e0d855771ecf","impliedFormat":99},{"version":"03ef2386c683707ce741a1c30cb126e8c51a908aa0acc01c3471fafb9baaacd5","impliedFormat":99},{"version":"66a372e03c41d2d5e920df5282dadcec2acae4c629cb51cab850825d2a144cea","impliedFormat":99},{"version":"ddf9b157bd4c06c2e4646c9f034f36267a0fbd028bd4738214709de7ea7c548b","impliedFormat":99},{"version":"ed13354f0d96fb6d5878655b1fead51722b54875e91d5e53ef16de5b71a0e278","impliedFormat":99},{"version":"1193b4872c1fb65769d8b164ca48124c7ebacc33eae03abf52087c2b29e8c46c","impliedFormat":99},{"version":"af682dfabe85688289b420d939020a10eb61f0120e393d53c127f1968b3e9f66","impliedFormat":99},{"version":"0dca04006bf13f72240c6a6a502df9c0b49c41c3cab2be75e81e9b592dcd4ea8","impliedFormat":99},{"version":"79d6ac4a2a229047259116688f9cd62fda25422dee3ad304f77d7e9af53a41ef","impliedFormat":99},{"version":"5ddd536aaeadd4bf0f020492b3788ed209a7050ce27abec4e01c7563ff65da81","impliedFormat":99},{"version":"e725839b8f884dab141b42e9d7ff5659212f6e1d7b4054caa23bc719a4629071","impliedFormat":99},{"version":"851f72a5d3e8a2bf7eeb84a3544da82628f74515c92bdf23c4a40af26dcc1d16","impliedFormat":99},"ae57e6644658ae4941d7c7266ceea02d3b367d4534ccac4de3e8b8c67046de9e","73628f7b44789980af6ebd8b294c83c2755c92df50d1faba34272aec8d15b9d5",{"version":"f3dae339f56dc1b4a2984c212806f74cea56bc9895198e52942d3b2191233afe","signature":"4ef07a101c93eab523c04176fd4775fb9e6b2489026a171ce3da91295b26715a"},"26c167af4b3df67463a66e638ba04f8e1a879a17759ac8a3e681990e398f6445",{"version":"bd1c6f2a45411cf1c1ded42d5b89418d549b78aafc57e7a2b60ef95f40d5b71a","signature":"e64aabcdffcd041791ea990a3b9022f753f00b323bc7645cf3e2cc5274542ce9"},"a7ff5640428ea9f6b651fd243943bd7602e6c722fb7595bc2fb428d4e5d20db5",{"version":"8d098fa845a8b0ea0dd1471c4f6a2f1765b1d0e39e354db76795a7cb14e7716d","signature":"798caf8f8490ef08fa766d2704c888435a395590812ead0cbb55755eb1011e1d"},{"version":"9314a0a343a0c8ba8612d0e59cf702b133bd40a0ff1f32a73f3c958e81a700b6","signature":"5738d3695e18db6d6855853c8431128f2dd59de76a430f9d2de3803957c7587c"},"697be448c6721baaca12dfaf9f4b7c4d6eb764c56d821f825a6db9e1ad367d94","4341576643b32d9038f5d0e5b4db4418d69dcf0ad4ebed5ee5a4e1e1add50483","f7208d4c2d22cbe5816c3ff7aa5f89704ac7c227cdcf4896f023c27d77502ea3","ef58337c3fab50af63e4af5a66da2904262335c48fd982699b86c722d6b21d13","30167ddc4588f53b67e637ba18623df66456e3ef6107b5224a76f986d079d72d","c07cafc249f804cf1340242da96f22a426a22fe0ce01b410d4a4e26edd1f532b","5611a546d371814b6c272fc793d6c88f7408c5003e9265b7cc79a75a4af720f6","a195f6f520195b82630b7dc08944cef073613248a5760d992f16397c03757cf9","567c2493a3aaf0fa95f0556cdaf63d0aaed4142e20d4e180c1f7d01192346208","e7664424b8135c64598aa5c8238c6d91125d06ae368a07b9ccf745d64f88a4d0","8e392539b5a876eac450612eea60c31f2d480be74d8236ca121104a24c48f841","ab383a1cf5793915d25a6916c6c4bc7ec88c1ff77e7f53403c2748e0234bb944","279566e65daa17f72baeaffe2ec2911e282535438310e354707e43a6d35c39c9","8882582d087b6539632a2d778b6d6fabc56c9208ee2d5daedf02ba671a227427",{"version":"d3d8ccf8b8caa3b4c0a5985542125b561580bccaf02d2dadfdc12e42922c2696","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"8732c81ea3e4c093f018094698b8cb8a0a7c6a1f24036ff5feaa1e72f5d9053d","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},{"version":"a1ba96bc6d39ff66ff16aeb2dc4299820367416a7ab91beac92c38050536cc5e","signature":"2cc743b624d6891f9275f11f76fedfe235af04641c806e7dc65e55740db4dd29"},"482bb8a1ea74667e3d7732eee6ef07a464bd15ff47ad73ad950fd63e2509c020","e7991b436a6768e2b79c1f0d5b98bdb814c4d61b9853b3a8474f52285fd78b5a",{"version":"96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","impliedFormat":1},{"version":"f05afa17cfc95a95923f48614bf3eb5ab2598850ee27a7c29f1b116a71090c5d","impliedFormat":1},{"version":"1ba59c8bbeed2cb75b239bb12041582fa3e8ef32f8d0bd0ec802e38442d3f317","impliedFormat":1}],"root":[370,[419,421],423,424,[427,429],791,792,[794,844],[848,882],[900,926]],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true},"referencedMap":[[924,1],[926,2],[925,3],[922,4],[923,5],[370,6],[437,7],[439,8],[440,9],[441,10],[436,11],[438,11],[432,12],[433,12],[434,13],[444,14],[445,12],[446,12],[447,15],[448,12],[449,12],[450,12],[451,12],[452,12],[443,12],[453,16],[454,14],[455,17],[456,17],[457,12],[458,18],[459,12],[460,19],[461,12],[462,12],[464,12],[435,11],[465,20],[463,21],[442,22],[430,21],[431,23],[466,21],[467,21],[468,21],[469,21],[471,21],[470,21],[472,21],[478,21],[473,21],[475,21],[474,21],[476,21],[477,21],[479,21],[480,21],[483,21],[481,21],[482,21],[484,21],[485,21],[486,21],[487,21],[489,21],[488,21],[490,21],[491,21],[494,21],[492,21],[493,21],[495,21],[496,21],[497,21],[498,21],[499,21],[500,21],[501,21],[502,21],[503,21],[504,21],[505,21],[506,21],[507,21],[508,21],[509,21],[510,21],[516,21],[511,21],[513,21],[512,21],[514,21],[515,21],[517,21],[518,21],[519,21],[520,21],[521,21],[522,21],[523,21],[524,21],[525,21],[526,21],[527,21],[528,21],[529,21],[530,21],[531,21],[532,21],[533,21],[534,21],[535,21],[536,21],[537,21],[538,21],[539,21],[540,21],[541,21],[544,21],[542,21],[543,21],[545,21],[547,21],[546,21],[548,21],[551,21],[549,21],[550,21],[552,21],[553,21],[554,21],[555,21],[556,21],[557,21],[558,21],[559,21],[560,21],[561,21],[562,21],[563,21],[565,21],[564,21],[566,21],[568,21],[567,21],[569,21],[571,21],[570,21],[572,21],[573,21],[574,21],[575,21],[576,21],[577,21],[578,21],[579,21],[580,21],[581,21],[582,21],[583,21],[584,21],[585,21],[586,21],[587,21],[589,21],[588,21],[590,21],[591,21],[592,21],[593,21],[594,21],[596,21],[595,21],[597,21],[598,21],[599,21],[600,21],[601,21],[602,21],[603,21],[605,21],[604,21],[606,21],[607,21],[608,21],[609,21],[610,21],[611,21],[612,21],[613,21],[614,21],[615,21],[616,21],[617,21],[618,21],[619,21],[620,21],[621,21],[622,21],[623,21],[624,21],[625,21],[626,21],[627,21],[632,21],[628,21],[629,21],[630,21],[631,21],[633,21],[634,21],[635,21],[637,21],[636,21],[638,21],[639,21],[640,21],[641,21],[643,21],[642,21],[644,21],[645,21],[646,21],[647,21],[648,21],[649,21],[650,21],[654,21],[651,21],[652,21],[653,21],[655,21],[656,21],[657,21],[659,21],[658,21],[660,21],[661,21],[662,21],[663,21],[664,21],[665,21],[666,21],[667,21],[668,21],[669,21],[670,21],[671,21],[673,21],[672,21],[674,21],[675,21],[677,21],[676,21],[678,21],[679,21],[680,21],[681,21],[682,21],[683,21],[685,21],[684,21],[686,21],[687,21],[688,21],[689,21],[692,21],[690,21],[691,21],[694,21],[693,21],[695,21],[696,21],[697,21],[699,21],[698,21],[700,21],[701,21],[702,21],[703,21],[704,21],[705,21],[706,21],[707,21],[708,21],[709,21],[711,21],[710,21],[712,21],[713,21],[714,21],[716,21],[715,21],[717,21],[718,21],[720,21],[719,21],[721,21],[723,21],[722,21],[724,21],[725,21],[726,21],[727,21],[728,21],[729,21],[730,21],[731,21],[732,21],[733,21],[734,21],[735,21],[736,21],[737,21],[738,21],[739,21],[740,21],[742,21],[741,21],[743,21],[744,21],[745,21],[746,21],[747,21],[749,21],[748,21],[750,21],[751,21],[752,21],[753,21],[754,21],[755,21],[756,21],[757,21],[758,21],[759,21],[760,21],[761,21],[762,21],[763,21],[764,21],[765,21],[766,21],[767,21],[768,21],[769,21],[770,21],[771,21],[772,21],[773,21],[776,21],[774,21],[775,21],[777,21],[778,21],[780,21],[779,21],[781,21],[782,21],[783,21],[784,21],[785,21],[787,21],[786,21],[788,21],[789,21],[790,24],[323,11],[418,25],[417,26],[409,27],[410,28],[406,29],[408,30],[412,31],[402,11],[403,32],[405,33],[407,33],[411,11],[404,34],[372,35],[373,36],[371,11],[379,37],[384,38],[374,11],[382,39],[383,40],[381,41],[385,42],[376,43],[380,44],[375,45],[377,46],[378,47],[392,48],[393,49],[391,50],[394,51],[386,11],[389,52],[387,11],[388,11],[400,53],[401,54],[395,11],[397,55],[396,11],[399,56],[398,57],[415,58],[416,59],[414,60],[413,61],[883,11],[927,11],[103,62],[104,62],[105,63],[64,64],[106,65],[107,66],[108,67],[59,11],[62,68],[60,11],[61,11],[109,69],[110,70],[111,71],[112,72],[113,73],[114,74],[115,74],[117,11],[116,75],[118,76],[119,77],[120,78],[102,79],[63,11],[121,80],[122,81],[123,82],[155,83],[124,84],[125,85],[126,86],[127,87],[128,88],[129,89],[130,90],[131,91],[132,92],[133,93],[134,93],[135,94],[136,11],[137,95],[139,96],[138,97],[140,98],[141,99],[142,100],[143,101],[144,102],[145,103],[146,104],[147,105],[148,106],[149,107],[150,108],[151,109],[152,110],[153,111],[154,112],[390,11],[51,11],[884,113],[160,114],[161,115],[159,21],[157,116],[158,117],[49,11],[52,118],[247,21],[928,11],[929,119],[426,120],[425,121],[422,11],[50,11],[889,122],[890,123],[885,11],[891,124],[886,11],[898,125],[899,123],[888,125],[896,126],[894,127],[893,128],[895,129],[892,125],[897,125],[887,130],[793,21],[58,131],[326,132],[330,133],[332,134],[181,135],[195,136],[297,137],[226,11],[300,138],[262,139],[270,140],[298,141],[182,142],[225,11],[227,143],[299,144],[202,145],[183,146],[206,145],[196,145],[166,145],[253,147],[254,148],[171,11],[250,149],[255,150],[341,151],[248,150],[342,152],[232,11],[251,153],[354,154],[353,155],[257,150],[352,11],[350,11],[351,156],[252,21],[239,157],[240,158],[249,159],[265,160],[266,161],[256,162],[234,163],[235,164],[345,165],[348,166],[213,167],[212,168],[211,169],[357,21],[210,170],[187,11],[360,11],[846,171],[845,11],[363,11],[362,21],[364,172],[162,11],[291,11],[194,173],[164,174],[314,11],[315,11],[317,11],[320,175],[316,11],[318,176],[319,176],[180,11],[193,11],[325,177],[333,178],[337,179],[176,180],[242,181],[241,11],[233,163],[261,182],[259,183],[258,11],[260,11],[264,184],[237,185],[175,186],[200,187],[288,188],[167,189],[174,190],[163,137],[302,191],[312,192],[301,11],[311,193],[201,11],[185,194],[279,195],[278,11],[285,196],[287,197],[280,198],[284,199],[286,196],[283,198],[282,196],[281,198],[222,200],[207,200],[273,201],[208,201],[169,202],[168,11],[277,203],[276,204],[275,205],[274,206],[170,207],[246,208],[263,209],[245,210],[269,211],[271,212],[268,210],[203,207],[156,11],[289,213],[228,214],[310,215],[231,216],[305,217],[173,11],[306,218],[308,219],[309,220],[292,11],[304,189],[204,221],[290,222],[313,223],[177,11],[179,11],[184,224],[272,225],[172,226],[178,11],[230,227],[229,228],[186,229],[238,230],[236,231],[188,232],[190,233],[361,11],[189,234],[191,235],[328,11],[327,11],[329,11],[359,11],[192,236],[244,21],[57,11],[267,237],[214,11],[224,238],[335,21],[344,239],[221,21],[339,150],[220,240],[322,241],[219,239],[165,11],[346,242],[217,21],[218,21],[209,11],[223,11],[216,243],[215,244],[205,245],[199,162],[307,11],[198,246],[197,11],[331,11],[243,21],[324,247],[48,11],[56,248],[53,21],[54,11],[55,11],[303,249],[296,250],[295,11],[294,251],[293,11],[334,252],[336,253],[338,254],[847,255],[340,256],[343,257],[369,258],[347,258],[368,259],[349,260],[355,261],[356,262],[358,263],[365,264],[367,11],[366,265],[321,266],[46,11],[47,11],[8,11],[9,11],[11,11],[10,11],[2,11],[12,11],[13,11],[14,11],[15,11],[16,11],[17,11],[18,11],[19,11],[3,11],[20,11],[21,11],[4,11],[22,11],[26,11],[23,11],[24,11],[25,11],[27,11],[28,11],[29,11],[5,11],[30,11],[31,11],[32,11],[33,11],[6,11],[37,11],[34,11],[35,11],[36,11],[38,11],[7,11],[39,11],[44,11],[45,11],[40,11],[41,11],[42,11],[43,11],[1,11],[80,267],[90,268],[79,267],[100,269],[71,270],[70,271],[99,265],[93,272],[98,273],[73,274],[87,275],[72,276],[96,277],[68,278],[67,265],[97,279],[69,280],[74,281],[75,11],[78,281],[65,11],[101,282],[91,283],[82,284],[83,285],[85,286],[81,287],[84,288],[94,265],[76,289],[77,290],[86,291],[66,292],[89,283],[88,281],[92,11],[95,293],[850,294],[856,295],[855,296],[852,297],[857,298],[854,299],[861,300],[860,301],[858,297],[862,302],[859,303],[864,304],[863,305],[868,306],[866,307],[869,308],[865,309],[848,310],[873,311],[871,312],[870,313],[875,314],[876,314],[874,315],[879,316],[877,297],[880,316],[878,317],[849,318],[904,319],[902,320],[881,297],[905,321],[882,322],[907,323],[908,323],[906,324],[912,325],[911,326],[915,325],[914,326],[916,327],[913,328],[917,329],[909,330],[918,327],[910,329],[919,21],[421,331],[429,332],[791,333],[792,334],[814,335],[853,336],[815,298],[819,337],[818,338],[820,302],[867,339],[851,340],[920,341],[826,342],[834,343],[835,344],[837,345],[836,346],[833,347],[838,348],[828,349],[831,350],[839,351],[901,352],[872,353],[900,354],[903,355],[805,356],[812,357],[427,358],[798,356],[804,359],[428,356],[800,360],[807,359],[803,361],[801,356],[806,356],[921,356],[802,356],[808,356],[799,356],[813,362],[840,363],[841,364],[842,365],[420,366],[795,11],[821,367],[823,367],[822,367],[825,368],[824,367],[843,369],[419,370],[796,371],[797,371],[817,372],[809,371],[844,373],[811,374],[829,371],[816,371],[832,374],[830,371],[827,371],[423,121],[794,11],[424,11],[810,11]],"semanticDiagnosticsPerFile":[[873,[{"start":3574,"length":6,"code":2322,"category":1,"messageText":{"messageText":"Type 'LessonWithSchedule' is not assignable to type 'Lesson'.","category":1,"code":2322,"next":[{"messageText":"Types of property 'schedule' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '{ id: string; course: { id: string; title: string; }; } | undefined' is not assignable to type 'Schedule | undefined'.","category":1,"code":2322,"next":[{"messageText":"Type '{ id: string; course: { id: string; title: string; }; }' is missing the following properties from type 'Schedule': course_id, name, start_date, recurrence_type, and 7 more.","category":1,"code":2740,"canonicalHead":{"code":2322,"messageText":"Type '{ id: string; course: { id: string; title: string; }; }' is not assignable to type 'Schedule'."}}],"canonicalHead":{"code":2322,"messageText":"Type 'LessonWithSchedule' is not assignable to type 'Lesson'."}}]}]},"relatedInformation":[{"file":"./src/components/schedules/LessonForm.tsx","start":722,"length":6,"messageText":"The expected type comes from property 'lesson' which is declared here on type 'IntrinsicAttributes & LessonFormProps'","category":3,"code":6500}]}]]],"affectedFilesPendingEmit":[924,926,925,922,923,850,856,855,852,857,854,861,860,858,862,859,864,863,868,866,869,865,848,873,871,870,875,876,874,879,877,880,878,849,904,902,881,905,882,907,908,906,912,911,915,914,916,913,917,909,918,910,919,421,429,791,792,814,853,815,819,818,820,867,851,920,826,834,835,837,836,833,838,828,831,839,901,872,900,903,805,812,427,798,804,428,800,807,803,801,806,921,802,808,799,813,840,841,842,420,795,821,823,822,825,824,843,419,796,797,817,809,844,811,829,816,832,830,827,423,794,424,810],"version":"5.8.3"}
